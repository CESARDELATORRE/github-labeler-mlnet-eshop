ID	Area	Title	Description
27401	area-System.IO	Path changes resulting in failing Common NormalizeDirectorySeparatorTests	From https://mc.dot.net/#/user/dotnet-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/4fb11f22f98f2106002799957aa0993cbf188b4e/workItem/Common.Tests/analysis/xunit/Tests.System.IO.PathInternalTests_Windows~2FNormalizeDirectorySeparatorTests(path:%20%5C%22%20%20%20%20~2F~2F%5C%22,%20expected:%20%5C%22%5C%5C%5C%5C%5C%5C%5C%5C%5C%22)    ```  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure            ↓ (pos 0)  Expected: \\\\  Actual:       \\            ↑ (pos 0)  Stack Trace :     at Tests.System.IO.PathInternalTests_Windows.NormalizeDirectorySeparatorTests(String path, String expected) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\Tests\System\IO\PathInternal.Windows.Tests.cs:line 126  ```    Test disabled in #27398
27400	area-System.Net	System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.HttpClientHandler_MultipleAuthenticateHeaders_Succeeds failed in CI	failed test: System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Authentication_Test.HttpClientHandler_MultipleAuthenticateHeaders_Succeeds    detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_debian8.4_release/318/testReport/System.Net.Http.Functional.Tests/SocketsHttpHandler_HttpClientHandler_Authentication_Test/HttpClientHandler_MultipleAuthenticateHeaders_Succeeds_authenticateHeader____WWW_Authenticate__Basic_realm_____hello______r__nWWW_Aut______/    MESSAGE:  ~~~  Assert.Equal() Failure\nExpected: OK\nActual: Unauthorized  ~~~  STACK TRACE:  ~~~  at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c.<<-ctor>b__10_0>d.MoveNext() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs:line 29 --- End of stack trace from previous location where exception was thrown ---   at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.<>c__DisplayClass7_0.<<HttpClientHandler_MultipleAuthenticateHeaders_Succeeds>b__0>d.MoveNext() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs:line 89 --- End of stack trace from previous location where exception was thrown ---   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 66   at System.Net.Http.Functional.Tests.HttpClientHandler_Authentication_Test.HttpClientHandler_MultipleAuthenticateHeaders_Succeeds(String authenticateHeader) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_debian8.4_release/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Authentication.cs:line 85 --- End of stack trace from previous location where exception was thrown ---  ~~~
27396	area-Serialization	Support NegativeInfinity and PositiveInfinity as default value in sgen	Make the similar fix as #19724 for NegativeInfinity  and PositiveInfinity 
27395	area-System.Security	Add CU\My to the search path for resolving cert chains on Linux	No test is being committed because it requires editing the user's CU\My store, which doesn't make me happy.  This was tested by taking the CertificateRequest chain tests, saving the created intermediate to CU\My, removing the intermediate from ExtraStore, and then removing them at the end of the test.    After the test succeeded on Windows (and failed on Linux), the fix was made on the Linux chain builder driver.    Fixes #26020.
27394	area-System.Security	Enable RSA-OAEP(SHA-2) and RSA-PSS on Unix systems	This change provides an implementation of the OAEP padding algorithm and  the PSS encoding and verification routines in managed code. On the platforms  where we currently lack support for SHA-2-based OAEP and/or PSS the  managed implementation will be used in conjunction with the native layer in  a pre-padded operational context.    The suite of tests which were added uncovered other bugs which are being  addressed in this change, as well.  Mainly that RSACng and  RSASecurityTransforms both failed at encrypting zero-length data.  To solve  that problem the RSA padding class can build PKCS#1 encryption padding,  but since the native layers are capable of correctly decrypting the payloads  no unpadding code is needed at this time.    Fixes #2522  Fixes #2523  Fixes #27120
27393	area-Serialization	Area-Serialization Sprint 132	The issue is for tracking issues to be done in sprint 132 (due by 3/16/2018)
27392	area-System.Net	Re-enable clearing of initlocals in System.Net.Sockets on Unix	Temporarily disabled in https://github.com/dotnet/corefx/pull/27345 due to failures in ReceiveMessageFrom tests.  Needs investigation.
27391	area-System.Security	"System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.Decrypt_512_CekDoesNotDecrypt_FixedValue failed with ""System.NullReferenceException"""	failed test: System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.Decrypt_512_CekDoesNotDecrypt_FixedValue     detail: https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_centos7.1_debug/324/testReport/System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests/DecryptTests/Decrypt_512_CekDoesNotDecrypt_FixedValue/    MESSAGE:  ~~~  Assert.Throws() Failure\n  Expected: typeof(System.Security.Cryptography.CryptographicException)\n  Actual: typeof(System.NullReferenceException): Object reference not set to an instance of an object.  ~~~  STACK TRACE:  ~~~  at Internal.Cryptography.Pal.AnyOS.ManagedPkcsPal.ManagedDecryptorPal.TryDecrypt(RecipientInfo recipientInfo, X509Certificate2 cert, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore, Exception& exception) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/AnyOS/ManagedPal.Decrypt.cs:line 85   at System.Security.Cryptography.Pkcs.EnvelopedCms.DecryptContent(RecipientInfoCollection recipientInfos, X509Certificate2Collection extraStore) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/src/System/Security/Cryptography/Pkcs/EnvelopedCms.cs:line 230   at System.Security.Cryptography.Pkcs.EnvelopedCms.Decrypt(X509Certificate2Collection extraStore) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/src/System/Security/Cryptography/Pkcs/EnvelopedCms.cs:line 188   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.VerifySimpleDecrypt(Byte[] encodedMessage, CertLoader certLoader, ContentInfo expectedContent) in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 279   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.<>c__DisplayClass11_0.<Decrypt_512_CekDoesNotDecrypt_FixedValue>b__0() in /mnt/resource/j/workspace/dotnet_corefx/master/outerloop_netcoreapp_centos7.1_debug/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 144  ~~~
27390	area-System.Net	System.Net.Http.Functional.Tests.HttpCookieProtocolTests.GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent [FAIL]	NETFX https://github.com/dotnet/corefx/pull/27288#issuecomment-367821183  ```  System.Net.Http.Functional.Tests.HttpCookieProtocolTests.GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent [FAIL]    System.Net.Http.HttpRequestException : An error occurred while sending the request.    ---- System.Net.WebException : The request was aborted: The request was canceled.    Stack Trace:         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.<<GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent>b__15_0>d.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.<GetAsyncWithRedirect_SetCookieContainer_CorrectCookiesSent>d__15.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)      ----- Inner Stack Trace -----         at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)         at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)  ```
27389	area-Serialization	Catch the FileNotFoundException when to get the obsolete attribute for type.	#27370   @mconnew @zhenlan 
27387	area-System.IO	Stop FileSystem WriteAsync test from writing too much data to disk	For https://github.com/dotnet/corefx/issues/24505    @danmosemsft PTAL
27386	area-System.Runtime	Is RuntimeInformation.OSArchitecture fixed on .NET 4.7.2?	.NET 4.7.1 contains the embedded RuntimeInformation class which returns a wrong OSArchitecture.   See https://github.com/Microsoft/perfview/issues/478#issuecomment-367845285  Is this fixed with the upcoming .NET 4.7.2?     
27385	area-Infrastructure	Adding to PackageIndex all of the information about our release from 6.0 and fixing packages that needed placeholders	Fixes #27100    After shipping UAP 6.0 we didn't update the package index with this data so package validation has not been testing for breaks on packages that we will soon release. These changes include updating said index and reacting to the validation errors.    cc: @weshaggard @ericstj @joshfree 
27383	area-System.Net	Split up cookie headers that are added via HttpListenerResponse.WebHeaders.Add	"This fixes an inconsistency between the Windows and Managed implementation of  HttpListenerResponse.    Basically, there are two ways to add cookies to an HttpListenerResponse. The 'usual' way is to add them to the cookie collection:  ```  response.Cookies = cookies;  ```  On Unix and on Windows that yields the following Set-Cookie header:  ```  Set-Cookie: name1=value1, name2=value2  ```  In this case though the user is setting the headers by adding them directly:  ```  foreach (var c in cookies)  {      HttpListenerResponse.Headers.Add(""Set-Cookie"",c);  }  ```  According to the relevant documentation for WebHeaderCollection.Add headers added more than once will be added in a comma separated list. So, even adding the headers directly, we expect the same result. That is true on Unix, and we get the following header:  ```  Set-Cookie: name1=value1,name2=value2  ```  However, on Windows we see an unexpected result:  ```  Set-Cookie: name1=value1  Set-Cookie: name2=value2  ```  While both behaviors are acceptable, I think that the Windows behavior was intentionally added. That is based off of this comment in the relevant code:  https://github.com/dotnet/corefx/blob/3db29b721a45fb4f300e27c5df5750f57b38ec45/src/System.Net.HttpListener/src/System/Net/Windows/HttpListenerResponse.Windows.cs#L460-L482  This PR ensures that the managed implementation follows the same behavior as the Windows version. I think that should also update the documentation to reflect this behavior, since it seems to be by design.    Fixes: #22910 "
27382	area-System.Net	Use SCH_USE_STRONG_CRYPTO with SystemDefaults	"The current SslStream implementation was applying SCH_USE_STRONG_CRYPTO only when TLS1.2, TLS1.1 and/or TLS1.0 flags were set.   In .NET Core 2.0, we introduced a new TLS option (#13075), called 'SystemDefault', which means to use the best (strongest) TLS security   protocol available in the operating system. But since SystemDefault (equal to all flag bits set to zero) doesn't match any of the TLS bit   masks, we weren't passing in the SCH_USE_STRONG_CRYPTO flag.    This fix adds a check for SystemDefault and makes sure that the SCH_USE_STRONG_CRYPTO flag is passed to SCHANNEL.  According to the SCHANNEL experts, the current ""SystemDefault' will actually use strong crypto settings on current Windows OS's.   But they advised us that we should always pass in the SCH_USE_STRONG_CRYPTO flag when using 'SystemDefault'.    This is related to internal bug 458042."
27380	area-Infrastructure	[release/2.1] Fix build on clang 5 (#27178)	This is a port of https://github.com/dotnet/corefx/pull/27178 to the `release/2.1` branch. It lets us build corefx with clang 5.    clang 5 is the default on some platforms supported by .NET Core 2.1, such as Fedora 27.
27379	area-System.Memory	Optimize string-like portable Span APIs for Ordinal and OrdinalIgnoreCase	This is specific to portable span (and not fast span).    We do not need to allocate and call the string APIs when StringComparison is Ordinal or OrdinalIgnoreCase.    Similar to APIs like EndsWith/etc., add a non-allocating code path for CompareTo for Ordinal:  https://github.com/dotnet/corefx/blob/42d5370f8c6cec8d1961f54a0974e52b0562b0a7/src/System.Memory/src/System/MemoryExtensions.Portable.cs#L23    Also optimize for OrdinalIgnoreCase for all the string-like APIs.    See: https://github.com/dotnet/corefx/pull/27319#discussion_r170048253    cc @tarekgh
27377	area-System.Net	add shutdown call to try to make redirect test more reliable	Fixes #27363   (hopefully)    @stephentoub @davidsh @dotnet/ncl 
27375	area-System.Reflection	Random hang/timeout in System.Reflection.Metadata.Tests in CI	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/39ad031acb4bda1d91f5654e70e31fef299e50bd/workItem/System.Reflection.Metadata.Tests/wilogs  ```  2018-02-22 10:12:36,642: INFO: proc(54): run_and_log_output: Output: Discovering: System.Reflection.Metadata.Tests  2018-02-22 10:12:36,884: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Reflection.Metadata.Tests  2018-02-22 10:12:37,059: INFO: proc(54): run_and_log_output: Output: Starting:    System.Reflection.Metadata.Tests  ```  ...  ```  2018-02-22 10:32:35,798: ERROR: job(44): kill: Job running for too long. Killing...  2018-02-22 10:32:35,803: ERROR: executor(398): _execute_command: Executor timed out after 1200 seconds and was killed.  2018-02-22 10:32:35,803: INFO: event(43): send: Sending event type WorkItemTimeout  2018-02-22 10:32:35,876: INFO: saferequests(90): request_with_retry: Response complete with status code '201'  2018-02-22 10:32:35,877: INFO: executor(417): _execute_command: Finished _execute_command, exit code: -3  ```
27374	area-System.Net	Test failure: System.Net.Http.Functional.Tests.HttpCookieProtocolTests / GetAsyncWithRedirect_ReceiveSetCookie_CookieSent	"## Failure type    ""The server returned an invalid or unrecognized response""  https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/201009d077e71fcadbc44ddad6995a9b7fc37d7a/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent  ```  Unhandled Exception of Type System.Net.Http.HttpRequestException  Message :  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response  Stack Trace :     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 469     at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.<GetAsyncWithRedirect_ReceiveSetCookie_CookieSent>b__20_0(Uri url) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpCookieProtocolTests.cs:line 464     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 84  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 67     at System.Net.Http.Functional.Tests.HttpCookieProtocolTests.GetAsyncWithRedirect_ReceiveSetCookie_CookieSent() in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http\tests\FunctionalTests\HttpCookieProtocolTests.cs:line 456  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\j\workspace\windows-TGrou---f8ac6754\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  ```    ## Failure history    Day | Build | OS | Details  -- | -- | -- | --   2/15 | 20180215.01 | Win10 | The server returned an invalid or unrecognized response - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180215.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent)  2/21 | 20180221.01 | Win10 | The server returned an invalid or unrecognized response - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180221.01/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent)  2/26 | 20180226.04 | Win10 | The server returned an invalid or unrecognized response - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180226.04/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpCookieProtocolTests~2FGetAsyncWithRedirect_ReceiveSetCookie_CookieSent)  "
27372	area-System.Security	NRE in ManagedDecryptorPal.TryDecrypt	This test is failing on all OSes [mc link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180222.04/workItem/System.Security.Cryptography.Pkcs.Tests/analysis/xunit/System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests~2FDecrypt_512_CekDoesNotDecrypt_FixedValue)    EnvelopedCmsTests.Tests.DecryptTests/Decrypt_512_CekDoesNotDecrypt_FixedValue  ```  Unhandled Exception of Type Xunit.Sdk.ThrowsException  Message :  Assert.Throws() Failure  Expected: typeof(System.Security.Cryptography.CryptographicException)  Actual:   typeof(System.NullReferenceException): Object reference not set to an instance of an object.  Stack Trace :     at Internal.Cryptography.Pal.AnyOS.ManagedPkcsPal.ManagedDecryptorPal.TryDecrypt(RecipientInfo recipientInfo, X509Certificate2 cert, X509Certificate2Collection originatorCerts, X509Certificate2Collection extraStore, Exception& exception) in /Users/buildagent/agent/_work/381/s/corefx/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/AnyOS/ManagedPal.Decrypt.cs:line 85     at System.Security.Cryptography.Pkcs.EnvelopedCms.DecryptContent(RecipientInfoCollection recipientInfos, X509Certificate2Collection extraStore) in /Users/buildagent/agent/_work/381/s/corefx/src/System.Security.Cryptography.Pkcs/src/System/Security/Cryptography/Pkcs/EnvelopedCms.cs:line 230     at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.DecryptTests.VerifySimpleDecrypt(Byte[] encodedMessage, CertLoader certLoader, ContentInfo expectedContent) in /Users/buildagent/agent/_work/381/s/corefx/src/System.Security.Cryptography.Pkcs/tests/EnvelopedCms/DecryptTests.cs:line 279  ```
27371	area-System.IO	Make File.Move copy when the file system doesn't support link	Fixes https://github.com/dotnet/corefx/issues/26105.  cc: @danmosemsft, @markekraus
27370	area-Serialization	bypass the exceptions in sgen during the loop for each type	Catch the exception [here](https://github.com/dotnet/corefx/blob/master/src/Microsoft.XmlSerializer.Generator/src/Sgen.cs#L231)
27369	area-System.Threading	Dataflow tests segfault on Fedora.27.Amd64-x64:Release	"Dumpling is down, so we need a local repro. @kouvel do you have cycles to take a look? You can set up a repro box using the new system. LMK if you need a pointer.    https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180222.04/workItem/System.Threading.Tasks.Dataflow.Tests/wilogs    Fedora.27.Amd64-x64:Release  ```  2018-02-22 06:07:21,137: INFO: proc(54): run_and_log_output: Output: Discovering: System.Threading.Tasks.Dataflow.Tests  2018-02-22 06:07:21,366: INFO: proc(54): run_and_log_output: Output: Discovered:  System.Threading.Tasks.Dataflow.Tests  2018-02-22 06:07:21,539: INFO: proc(54): run_and_log_output: Output: Starting:    System.Threading.Tasks.Dataflow.Tests  2018-02-22 06:07:24,653: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/5bf3c2e2-9870-45cc-9dbf-4bc81eaddb1e/Work/aef23661-8b18-4137-b246-24dbb12648ba/Unzip/RunTests.sh: line 94: 24381 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Threading.Tasks.Dataflow.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing  2018-02-22 06:07:24,707: INFO: proc(54): run_and_log_output: Output: Dumpling has not been installed yet. Please run ""DumplingHelper.py install_dumpling"" before collect_dumps.  2018-02-22 06:07:24,711: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/5bf3c2e2-9870-45cc-9dbf-4bc81eaddb1e/Work/aef23661-8b18-4137-b246-24dbb12648ba/Unzip  2018-02-22 06:07:24,713: INFO: proc(54): run_and_log_output: Output: ----- end 06:07:24 ----- exit code 134 ----------------------------------------------------------  ```"
27367	area-Serialization	Need support reference in sgen	#27281 
27366	area-System.Runtime	EnvironmentTests+<>c.<FailFast_ExpectFailureExitCode>b__21_0 forgot to Dispose() the result of RemoteInvoke()	"https://mc.dot.net/#/user/bartonjs/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/481f6f62c7f54058bd8e5d25ab175d3b77f711ea/workItem/System.Runtime.Extensions.Tests/wilogs  ```  2018-02-22 16:30:18,821: INFO: proc(54): run_and_log_output: Output: Unhandled Exception: Xunit.Sdk.TrueException: A test System.Runtime.Extensions.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb!System.Tests.EnvironmentTests+<>c.<FailFast_ExpectFailureExitCode>b__21_0 forgot to Dispose() the result of RemoteInvoke()  2018-02-22 16:30:18,821: INFO: proc(54): run_and_log_output: Output: Expected: True  2018-02-22 16:30:18,821: INFO: proc(54): run_and_log_output: Output: Actual:   False  2018-02-22 16:30:18,822: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.True(Nullable`1 condition, String userMessage)  2018-02-22 16:30:18,823: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 212  2018-02-22 16:30:18,823: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Finalize() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 258  2018-02-22 16:30:19,580: INFO: proc(54): run_and_log_output: Output: /home/helixbot/dotnetbuild/work/e8585d9d-2db1-4361-9bb9-0fdcc3167640/Work/3d6117c8-79c6-4d5b-bd1b-2fa612c7ac00/Unzip/RunTests.sh: line 94: 18070 Aborted                 (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.Runtime.Extensions.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing  2018-02-22 16:30:19,728: INFO: proc(54): run_and_log_output: Output: Dumpling has not been installed yet. Please run ""DumplingHelper.py install_dumpling"" before collect_dumps.  2018-02-22 16:30:19,733: INFO: proc(54): run_and_log_output: Output: ~/dotnetbuild/work/e8585d9d-2db1-4361-9bb9-0fdcc3167640/Work/3d6117c8-79c6-4d5b-bd1b-2fa612c7ac00/Unzip  ```  Many of the legs hit the same issue.  cc: @danmosemsft, @maryamariyan "
27365	area-System.Diagnostics	TestStartWithUserName forgot to Dispose() the result of RemoteInvoke()	```  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output: Unhandled Exception: Xunit.Sdk.TrueException: A test System.Diagnostics.Process.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=9d77cc7ad39b68eb!System.Diagnostics.Tests.ProcessTests.TestStartWithUserName forgot to Dispose() the result of RemoteInvoke()  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output: Expected: True  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output: Actual:   False  2018-02-22 11:54:49,269: INFO: proc(54): run_and_log_output: Output:    at Xunit.Assert.True(Nullable`1 condition, String userMessage)  2018-02-22 11:54:49,270: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose(Boolean disposing) in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 212  2018-02-22 11:54:49,271: INFO: proc(54): run_and_log_output: Output:    at System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Finalize() in /mnt/j/workspace/dotnet_corefx/master/linux-TGroup_netcoreapp+CGroup_Release+AGroup_x64+TestOuter_true_prtest/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 258  ```  cc: @danmosemsft, @maryamariyan 
27364	area-System.Net	Specify sub protocol for WebSocket Client	_From @andylyonette on February 21, 2018 16:51_  Hi,    I can't work out how to specify the sub protocol when creating a client connect to a websocket endpoint. Is this possible like it is with this JavaScript client? (https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_client_applications)    Thanks,  Andy  _Copied from original issue: aspnet/Home#2892_
27363	area-System.Net	AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection test failed on Windows	https://mc.dot.net/#/user/ahsonkhan/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/e0a26daab80419c10a37646444d5155d5495d241/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FAllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(statusCode:%20307,%20oldMethod:%20%5C%22POST%5C%22,%20newMethod:%20%5C%22POST%5C%22,%20useTE:%20False)    ```text  System.Net.Http.HttpRequestException : Error while copying content to a stream.  ---- System.IO.IOException : The write operation failed, see inner exception.  -------- System.Net.Http.WinHttpException : The connection with the server was terminated abnormally  ```    ```text     at System.Net.Http.HttpContent.CopyToAsyncCore(Task copyTask) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 351     at System.Net.Http.WinHttpHandler.InternalSendRequestBodyAsync(WinHttpRequestState state, Boolean chunkedModeForSend) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1361     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 860     at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 488     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass51_2.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__1>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 654  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 66     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass51_1.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 628  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 66     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(Int32 statusCode, String oldMethod, String newMethod, Boolean useTE) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 612  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Net.Http.HttpContent.CopyToAsyncCore(Task copyTask) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 347  ----- Inner Stack Trace -----     at System.Environment.get_StackTrace() in D:\j\workspace\windows-TGrou---74aa877a\src\System.Runtime.Extensions\src\System\Environment.cs:line 146     at System.Runtime.ExceptionServices.ExceptionStackTrace.AddCurrentStack(Exception exception) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Runtime\ExceptionServices\ExceptionStackTrace.cs:line 23     at System.Net.Http.WinHttpException.CreateExceptionUsingError(Int32 error) in D:\j\workspace\windows-TGrou---74aa877a\src\Common\src\System\Net\Http\WinHttpException.cs:line 56     at System.Net.Http.WinHttpRequestCallback.OnRequestError(WinHttpRequestState state, WINHTTP_ASYNC_RESULT asyncResult) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 324     at System.Net.Http.WinHttpRequestCallback.RequestCallback(IntPtr handle, WinHttpRequestState state, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 104     at System.Net.Http.WinHttpRequestCallback.WinHttpCallback(IntPtr handle, IntPtr context, UInt32 internetStatus, IntPtr statusInformation, UInt32 statusInformationLength) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestCallback.cs:line 47     at Interop.WinHttp.WinHttpWriteData(SafeWinHttpHandle requestHandle, IntPtr buffer, UInt32 bufferSize, IntPtr parameterIgnoredAndShouldBeNullForAsync)     at Interop.WinHttp.WinHttpWriteData(SafeWinHttpHandle requestHandle, IntPtr buffer, UInt32 bufferSize, IntPtr parameterIgnoredAndShouldBeNullForAsync)     at System.Net.Http.WinHttpRequestStream.InternalWriteDataAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken token) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestStream.cs:line 245     at System.Net.Http.WinHttpRequestStream.InternalWriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken token) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestStream.cs:line 203     at System.Net.Http.WinHttpRequestStream.WriteAsync(Byte[] buffer, Int32 offset, Int32 count, CancellationToken token) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpRequestStream.cs:line 131     at System.Net.Http.HttpContent.CopyToAsync(Stream stream, TransportContext context, CancellationToken cancellationToken) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 327     at System.Net.Http.HttpContent.CopyToAsync(Stream stream, TransportContext context) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http\src\System\Net\Http\HttpContent.cs:line 310     at System.Net.Http.WinHttpHandler.InternalSendRequestBodyAsync(WinHttpRequestState state, Boolean chunkedModeForSend) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 1361     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in E:\A\_work\1994\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 922     at System.Net.Http.WinHttpHandler.InternalSendRequestBodyAsync(WinHttpRequestState state, Boolean chunkedModeForSend)     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---74aa877a\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 860     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1994\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166     at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() in E:\A\_work\1994\s\src\mscorlib\src\System\Runtime\CompilerServices\AsyncMethodBuilder.cs:line 546     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in E:\A\_work\1994\s\src\mscorlib\shared\System\Threading\ExecutionContext.cs:line 166     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in E:\A\_work\1994\s\src\mscorlib\src\System\Threading\Tasks\Task.cs:line 2440     at System.Threading.ThreadPoolWorkQueue.Dispatch() in E:\A\_work\1994\s\src\mscorlib\src\System\Threading\ThreadPool.cs:line 588  --- End of stack trace from AddCurrentStack ---  ```
27362	area-System.Net	Revisit SocketsHttpHandler's HttpConnection.WriteAsync buffering strategy	"There's a note in the code:  ""CONSIDER: May want to be a bit smarter here?  Think about how large writes should work...""    cc: @geoffkizer "
27361	area-System.Drawing	ToolboxBitmapAttributeTests.Ctor_FileName test failed on netfx	"https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/8667/consoleText  ```        System.Drawing.Tests.ToolboxBitmapAttributeTests.Ctor_FileName(fileName: ""D:\\j\\workspace\\windows-TGrou---2a8f9c29\\bin\\t""..., size: {Width=16, Height=16}) [FAIL]          System.ArgumentException : Parameter is not valid.          Stack Trace:               at System.Drawing.Image.get_Width()               at System.Drawing.Image.get_Size()               at System.Drawing.Tests.ToolboxBitmapAttributeTests.Ctor_FileName(String fileName, Size size)  ```"
27360	area-System.Net	Fix fragment handling in HttpClient	SocketsHttpHandler isn't sending fragments, nor is it properly inheriting the fragment from the original request URI into the redirect location URI when the original URI had one and the redirect URI did not, even though RFC 7231 says it must.  This commit fixes that for SocketsHttpHandler.    WinHttpHandler also isn't handling this inheritance according to the RFC. It appears that the logic for WinHttpHandler would actually need to be changed in WINHTTP itself, or else WinHttpHandler would need to be changed to do the redirects itself.    Neither CurlHandler or NetFxHandler send fragments at all.    This commit also fixes the test to correctly compare the expected and actual Uris... apparently Uri equality doesn't factor in fragments, so they're first converted to strings.  It also updates the test to also validate that the server received the URI with the fragment included.    Closes https://github.com/dotnet/corefx/issues/27305  cc: @geoffkizer, @davidsh, @wfurt, @rmkerr 
27358	area-System.Security	X509Certificate2 unclear error message when attempting to store certificate in non-existent store	"Had a problem where my app would work fine locally, but fail when hosted on azure app services.    I was trying to load a certificate from a file using ```new X509Certificate2(string fileName, string password)```. (Although hrom cursory research the error message is identically as ambiguous with other construction methods)    The error message I received was:  ```  Unhandled Exception: Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The system cannot find the file specified     at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, String password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(String fileName, String password, X509KeyStorageFlags keyStorageFlags)     at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(String fileName)     at ConsoleApplication.Program.Main(String[] args)  ```    The certificate was, indeed, present and was readable from the user running - so it's not an issue that the certificate can't be found!    The actual error is, I believe, that it can't put the certificate the LocalUser's cert store. Info [here](http://web.archive.org/web/20151101033040/http://blog.tylerdoerksen.com:80/2013/08/23/pfx-certificate-files-and-windows-azure-websites/).    I think the culprit is here  https://github.com/dotnet/corefx/blob/29cd6a0b0ac2993cee23ebaf36ca3d4bce6dd75f/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.Windows/CertificatePal.Import.cs#L150-L152    I believe the last hresult from PFXImportCertStore will be CRYPT_E_NOT_FOUND  ""can't find file"". Which causes ambiguity between ""can't find the given certificate file to import"" and ""got an error when trying to put the certificate after trying to put it in a store"".    Not sure how you'd go about solving this as we're only returned CRYPT_E_NOT_FOUND for failed imports regardless of reason.    Repro:  1. Create a web app that pulls a certificate from a file  2. ```new X509Certificate2(string fileName, string password)```  3. Upload and run on azure app services  4. Pull hair out for 2h wondering why it can't find a file that blatantly exists.    Workaround:  Store it in the MachineKey set  ```new X509Certificate2(filePath,  pass, X509KeyStorageFlags.MachineKeySet);```"
27357	area-System.IO	Path changes resulting in failing DriveInfo test	https://github.com/dotnet/corefx/pull/27339#issuecomment-367578790  https://mc.dot.net/#/user/dotnet-maestro-bot/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/e91038db253e351822d63ed2cf875f94cb0cabc7/workItem/System.IO.FileSystem.DriveInfo.Tests/analysis/xunit/System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests~2FCtor_InvalidPath_ThrowsArgumentException(driveName:%20%5C%22%5C%22,%20paramName:%20%5C%22path%5C%22)  ```  Unhandled Exception of Type Xunit.Sdk.EqualException  Message :  Assert.Equal() Failure  Expected: path  Actual:   (null)  Stack Trace :     at System.AssertExtensions.Throws[T](String netCoreParamName, String netFxParamName, Action action) in D:\j\workspace\windows-TGrou---f8ac6754\src\CoreFx.Private.TestUtilities\src\System\AssertExtensions.cs:line 39     at System.IO.FileSystem.DriveInfoTests.DriveInfoWindowsTests.Ctor_InvalidPath_ThrowsArgumentException(String driveName, String paramName) in D:\j\workspace\windows-TGrou---f8ac6754\src\System.IO.FileSystem.DriveInfo\tests\DriveInfo.Windows.Tests.cs:line 35  ```
27356	area-System.Security	Fix NullReferenceException on exception cascade when CEK doesn't decrypt	"A late change caused a test which only runs in outer-loop to fail with a NullReferenceException instead of a CryptographicException.  This is caused by the ""return now if decryption failed"" path."
27355	area-System.Net	HttpWebRequest/HttpWebResponse never releases connection after http server error (.Net Core 2.0.1, Debian 8)	"I'm running a .Net Core Console App under Debian 8, which constantly queries a REST server via HTTPS.  The app uses plain syncronous http calls using HttpWebRequest / HttpWebResponse .  I noticed that after some hours of operation all calls raise exceptions with description ""Too many open files"", meaning that there are too many connections left non-closed.  After some investigation I figured out that each time the http server responds with non-200 status code (for example, 5хх server errors of 429 Too many requests), even after disposing HttpWebResponse the connection remains open but is never reused by ServicePoint manager for next HttpWebRequest, even for the same host/URL. After a significant amount of errors the open file limit (default 4096) is exhausted an no further requests are possible. The connections are never released until the dotnet process is killed.    Actions to reproduce he problem:    1. I wrote a simple php script `getstatus.php` and placed it on a test web serer. The script emulates http error. It accepts a numeric code as GET query and responds with same HTTP code. The response body always  contains the same - the resquest headers. When requesting `https://myserver/getstatus.php` or  `https://myserver/getstaus.php?200` I get normal response. When requesting `https://myserver/getstaus.php?500` I get same content, but with 500 status code (""Internal server error"") etc.  The php code is below:  ```php  <?php  $code=$_SERVER['QUERY_STRING'];  if ($code) {   http_response_code($code);  };  echo ""Request headers:         <br /> \n"";  foreach (getallheaders() as $name => $value) {      echo ""$name: $value         <br />\n"";  }  ?>  ```    2. The sample vb.net code for quering the server. The program accepts a numeric code as argument and makes 100 requests to test server:    ```vb  Imports System  Imports System.IO  Imports System.Net  Imports System.Threading    Module Program      Private Const USER_AGENT = ""Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.167 Safari/537.36""        Sub Main(args As String())          Dim result As String          For counter = 1 To 100              If args.Count < 1 Then                  Console.WriteLine(""Launched without arguments"")                  result = DownloadString(""https://mytestserver/getstatus.php"")              Else                  Console.WriteLine(""Launched with argument: {0}"", args(0))                  result = DownloadString(""https://mytestserver/getstatus.php?"" & args(0))              End If              Console.WriteLine(""Respone content > "" & result)              Thread.Sleep(500)          Next          Console.ReadLine()      End Sub        Private Function GetResult(ByRef w As HttpWebRequest) As String          Try              Using r As HttpWebResponse = w.GetResponse                  Console.WriteLine(""Response status > "" & r.StatusCode)                  Console.WriteLine(""Response headers > "" & r.Headers.ToString)                  Using s As Stream = r.GetResponseStream                      Using rd As StreamReader = New StreamReader(s)                          Dim st As String = rd.ReadToEnd                          Return st                      End Using                  End Using              End Using          Catch ex As webException              Console.WriteLine(""Catch in GetResult(): "" & ex.Message)          End Try        End Function        Private Function DownloadString(ByVal __Url As String) As String          Try              Dim w As HttpWebRequest = CType(WebRequest.Create(__Url), HttpWebRequest)              w.UserAgent = USER_AGENT              w.KeepAlive = True              w.Timeout = 10000              w.ReadWriteTimeout = 10000              Console.WriteLine(""Requesting "" & __Url)              Return GetResult(w)          Catch ex As Exception              Console.WriteLine(""Catch in DownloadString(): "" & ex.Message)          End Try      End Function    End Module  ```  I use VS 2017 Community to write the code. The project was created using a "".Net Core Console application"" template with no additional changes to project configuration. The target platform is shown as "".NET Core 2.0""  The project is compiled under VS, then published to a folder, then the folder contents are transferred to the Debian 8 machine (VPS) and run like `dotnet myproj.dll`    3. To count open file handles I use a bash script found on StackOverflow  ```bash  cd /proc  for pid in [0-9]*  do      echo ""PID = $pid with $(ls /proc/$pid/fd/ | wc -l) file descriptors""  done | sort -rn -k5 | head | while read -r _ _ pid _ fdcount _  do    command=$(ps -o cmd -p ""$pid"" -hc)    printf ""pid = %5d with %4d fds: %s\n"" ""$pid"" ""$fdcount"" ""$command""  done  ```    4. Actual testing  4.1. Run `dotnet myproj.dll`. On a separate session monitor open file count with the above script. In my case there are no more than 42 open files for the dotnet process, from start to finish.    4.2. Run `dotnet myproj.dll 500` emulating http errors. Each attempt to get httpwebresponse object results in exception which is logged to console. After each error the number of open files for dotnet process increases by 3 (!). After 100 ""unsuccessful"" requests the open file count reaches 344 (started at 42).  Note that all objects for response handling are wrapped in `using`, so they should be disposed properly after exception, and tcp connection should be released for reusing for next calls. I might be wrong, but current behavior is a bug.    During further experiments I found a workaround. If I completely read a ResponseStream of WebException.Response object, the connection seems to be released, and total connection count does not increse. The `Catch` block in `GetResponse` function should containg following lines:  ```vb  Catch ex As webException              Console.WriteLine(""Catch in GetResult(): "" & ex.Message)              Console.WriteLine(""WebException.Reponse.Headers: "" & ex.Response.Headers.ToString)              Using s As Stream = ex.Response.GetResponseStream                  Using rd As StreamReader = New StreamReader(s)                      Dim st As String = rd.ReadToEnd                      Return st                  End Using              End Using          End Try  ```  But this seems to be redundant because in many cases servers don't return any meaningful info after http error in the response body, so reading it is unneeded work and anyway non-intuinive way of programming.  Thanks for attention and please don't mind any mistakes, I'm not a professiona l programmer.                           "
27354	area-System.Net	SSL certificate validation on Windows 7 with .Net Framework is ignored after a connection to port different than 443 was established	"- Steps to reproduce:    1. Create/find a server that hosts 2 SSL endpoins on port 443 and port 10443 (probably any port different that 443) - the IP address of the two endpoints should be the same, the server certificates of the endpoints should be self-signed and different.  2. Build the following code for **net471**:  ```c#            static void Main(string[] args)          {             string host = ""your server IP"";             MakeRequest(host, 10443);             MakeRequest(host, 443);          }           private static void MakeRequest(string host, int port) {            HttpRequestMessage webRequest =               new HttpRequestMessage(                  HttpMethod.Get,                  $""https://{host}:{port}/"");            webRequest.Version = new Version(1, 1);              var handler = new HttpClientHandler {               ServerCertificateCustomValidationCallback =                  (sender, cert, chain, errors) => true            };            HttpClient client = new HttpClient(handler);              client.SendAsync(webRequest).Wait();         }  ```  3. Run the following code to connect to that server **on Windows 7 64-bit**    - Expected result:  The code should complete without errors    - Actual result:  There is an exception:    ```  System.Net.Http.HttpRequestException: An error occurred while sending the request.   System.Net.WebException: The request was aborted: Could not create SSL/TLS secure channel.  ```    **This does not reproduce on Windows 10.**    Considering that this API is part of the .Net Standard 2.0 API, it affects portable code running on Windows 7 and on .Net Framework.    The issue is also observed on all net451+ frameworks on Windows 7. The  test for those frameworks uses the ```WebRequestHandler``` as it is the only one that has a certificate validation support.    I think it has something to do with the ServicePointManager and it reusing of connections as reducing the MaxServicePointIdleTime seems to have some effect (though in the distilled repro above I couldn't make it pass).    If the order of the request is changed so that the connection to the port 443 is established first, then the connection to port 10443 is ok.  "
27352	area-System.Net	be more liberal on what exception type to get on handshake failure	on Ubuntu18 following tests were failing: (#27023)    - GetAsync_AllowedSSLVersionDiffersFromServer_ThrowsException (Tls11/Tls12 args)  - GetAsync_DisallowTls10_AllowTls11_AllowTls12    The both set mismatched TLS versions and they expect handshake to fail.   However newer openssl sends Alert message before shutting down TCP connection.  The existing test expected IO failure and failed because we got Exception from SSL handshake.     This change will accept either exception as successful test pass.   The handshake should fail  but that can happen in different ways.     
27351	area-System.Drawing	Graphics.MeasureString produces wrong result if text contains Unicode characters at the end.	"Run the following code on Linux:  ```c#      var txt = ""1\uFF09"";//1）      using (var graphics = Graphics.FromImage(new Bitmap(200, 50)))      using(var font = new Font(""Arial"", 10))      {          var size = graphics.MeasureString(txt, font, new SizeF(float.MaxValue, float.MaxValue),                      StringFormat.GenericTypographic, out var chars, out var lines);                            Console.WriteLine($""Chars fitted: {chars}"");          Console.WriteLine($""Lines fitted: {lines}"");      }  ```    Observed: console output is   Chars fitted: 1  Lines fitted: 1    Expected: console output is  Chars fitted: 2  Lines fitted: 1    "
27350	area-System.Memory	Should Span.Empty return a pointer to an empty array instead of default?	"Currently, there is inconsistent behavior in the following scenario:  ```C#  byte[] array = new byte[10];  Span<byte> span = new Span<byte>(array, 0, 0); // effectively empty  Span<byte> emptySpan = Span<byte>.Empty; // returns ""default""    Assert.True(span.IsEmpty);  Assert.True(emptySpan.IsEmpty);    fixed (byte* pSpan = &MemoryMarshal.GetReference(span))  {      fixed (byte* pEmptySpan = &MemoryMarshal.GetReference(emptySpan))      {          // pSpan != null          // pEmptySpan == null      }  }  ```    Should `Span<T>.Empty` return either `SpanHelpers.PerTypeValues<T>.EmptyArray;` or `Array.Empty<T>();` instead?    As an aside, should we do a null check and throw if someone calls `MemoryMarshal.GetReference(default(Span<T>))` instead of returning a null pointer (especially now that we return default if we pass null array to the constructor)?    Otherwise, we would have to do pointer null checks (for span.Length == 0) before passing it to native libraries (for example here - https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Globalization/CompareInfo.Windows.cs#L166).    cc @jkotas, @KrzysztofCwalina, @stephentoub, @tarekgh, @VSadov, @AndyAyersMS "
27349	area-System.Net	Ignore ping6 failures on macOS 10.12	Fixes #26358
27348	area-System.IO	Update tests for Path changes	Updates for https://github.com/dotnet/coreclr/pull/16478    Tagged these tests with #27269 as they're related. Will update for both PRs from CoreCLR.    cc: @danmosemsft 
27347	area-System.IO	Directory and File Exists using charPool for normalization	Fixes https://github.com/dotnet/corefx/issues/20876
27346	area-System.ComponentModel	EmailAddressAttribute.IsValid Method (Object) cannot validate hyphen at the beginning of domain name	"_From @ahmetbombaci-united on February 21, 2018 22:25_  Domain names cannot start with hyphen (ref: https://tools.ietf.org/html/rfc952)    However; IsValid method does not respect to this rule    Test case:    var checkMail = new System.ComponentModel.DataAnnotations.EmailAddressAttribute().IsValid(""ahmet.bombaci@yahoo.-united.COM"");   _Copied from original issue: aspnet/Home#2893_"
27344	area-System.Net	refactor some proxy tests using new loopback server functions and new auth	This is beginning to get some feedback. If it looks ok, I can finish rest of the tests and retire LoopbackGetRequestHttpProxy. It also should be easier to write tests for something like #27293.  
27343	area-Infrastructure	Publish symbols using Microsoft.SymbolUploader.Build.Task package	The `Microsoft.SymbolUploader.Build.Task` package on the BuildTools feed is the new way to index and publish symbols to the symbol server. It should be used instead of the current combination of BuildTools' `GetAllSymbolFilesToPublish` and the VSTS symbol publish build step.    Example implementation in Core-Setup: https://github.com/dotnet/core-setup/pull/3465
27342	area-System.Text	Proposal: Add pre-defined regular expressions	"# Suggestion:  I suggest to add pre-defined regular exertions as static fields in Regex class or in a new Regexs class. There are some famous widely used expressions, such as Phone numbers, dates, times, zip codes, emails…. etc.  Regexs class can be put in a separate NuGet, to allow contributors to add as many Expressions as they want.    Note:   Regexs should appears in the auto-complete list displayed with Regex methods that expects expressions.    # Implementation:  ```  public static class Regexs  {    public static readonly string Email = @""^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$"";          // ...........  }    ```  # Usage:  `var rgx = new Regex(Regexs.Email);  `  # Benefit:  This will be a time saver for repeated Regex tasks, and will make it easier for beginners to use Regex,   "
27341	area-System.Net	Disable SocketsHttpHandler's concurrent content sends	SocketsHttpHandler currently has some support for allowing request content sending to run concurrently with response content receiving.  However, we don't actually have a need for this, and there are a lot of subtleties that would need to be made robust, e.g. how to handle exceptions that occur concurrently in the sending and receiving.  For now, we're removing it.  Unless ExpectContinue is set to true, we just send the content before receiving the response, and if it is set, we start the send and then wait for it once we've received the final status code from the server.    cc: @geoffkizer, @davidsh, @wfurt   Fixes #https://github.com/dotnet/corefx/issues/27324
27337	area-System.ComponentModel	Adding missing typeforward for Lazy<T,TMetadata> to S.CM.Composition	Adding missing typeforward for Lazy<T,TMetadata> to System.ComponentModel.Composition    Fixes #27299
27336	area-Meta	.NET Core Assembly Code Signing on Mac	"I have a class library that needs to be signed due to other references in the project it is in. I tried to pull it into my Mac app using Xamarin and Visual Studio for Mac but I keep getting this error:     ```  Target ResolveAssemblyReferences:      A TargetFramework profile exclusion list will be generated.  Target ResolveKeySource:      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: The ""ResolveKeySource"" task failed unexpectedly.      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: System.NotSupportedException: Specified method is not supported.      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject (System.Guid clsid, System.Guid riid) [0x00006] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/interopservices/runtimeenvironment.cs:204       /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)      /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.Reflection/MonoMethod.cs:305   Done building target ""ResolveKeySource"" in project ""POSModel.Shared.csproj"" -- FAILED.    Done building project ""POSModel.Shared.csproj"" -- FAILED.    Build FAILED.    /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: The ""ResolveKeySource"" task failed unexpectedly.  /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018: System.NotSupportedException: Specified method is not supported.  /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject (System.Guid clsid, System.Guid riid) [0x00006] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/referencesource/mscorlib/system/runtime/interopservices/runtimeenvironment.cs:204   /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at (wrapper managed-to-native) System.Reflection.MonoMethod:InternalInvoke (System.Reflection.MonoMethod,object,object[],System.Exception&)  /Library/Frameworks/Mono.framework/Versions/5.4.1/lib/mono/msbuild/15.0/bin/Microsoft.Common.CurrentVersion.targets(3105,5): error MSB4018:   at System.Reflection.MonoMethod.Invoke (System.Object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Object[] parameters, System.Globalization.CultureInfo culture) [0x00032] in /Users/builder/data/lanes/4992/mono-mac-sdk/external/bockbuild/builds/mono-x64/mcs/class/corlib/System.Reflection/MonoMethod.cs:305       0 Warning(s)      1 Error(s)  ```    It obviously says NotSupported, but didn't know if there was any way to sign this on the Mac or any plans to support this in the future. I tried to do a search through issues and couldn't find anything related.     I noticed the strong name tool does work on Mac `sn -i key.pfx <machine container>`. However because of the NotSupported exception I am not given a machine container to sign against.    Any help would be appreciated!"
27334	area-System.Runtime	StringBuilder should allow copying efficiently to a TextWriter	## Motivation    At present to copy a StringBuilder into a TextWriter you must allocate a throwaway string as large as the amount you want to copy. This can cause a LOH allocation.    ## Workaround     To avoid that today you must write code to copy in blocks via a char[] buffer. ASP.NET were forced to do this ([PR here](https://github.com/aspnet/AspNetWebStack/commit/3fe0d348f00864e4f1eeaefbd027ea965787b892#diff-fe84a6b0645ee996bea1ec4d8445823f)) in response to an issue in a customer workload.    If we add an API for StringBuilder to copy to a TextWriter, we can take care of that loop, and also use a pooled char[].    ## Proposed API    ```c#      public sealed partial class StringBuilder : System.Runtime.Serialization.ISerializable      {           // existing          public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count) { }          public void CopyTo(int sourceIndex, System.Span<char> destination, int count) { }            // proposed          public void CopyTo(int sourceIndex, TextWriter destination, int count) { }      }  ```    ## Rough Implementation    Basically [what ASP.NET did](https://github.com/aspnet/AspNetWebStack/blob/62d0b2df0bcca848a8e0848fd1866928df15528e/src/System.Web.WebPages/StringWriterExtensions.cs#L15) but using a pooled char[] buffer.    ```c#  public void CopyTo(int sourceIndex, TextWriter destination, int count)   {               int remainingChars = this.Length;              int bufferSize = Math.Min(this.Length,  1024);                char[] buffer = ArrayPool<byte>.Shared.Rent(bufferSize);              int currentPosition = 0;                while (remainingChars > 0)              {                  int copyLen = Math.Min(bufferSize, remainingChars);                    this.CopyTo(currentPosition, buffer, copyLen);                    destination.Write(buffer, 0, copyLen);                    currentPosition += copyLen;                  remainingChars -= copyLen;              }               ArrayPool<byte>.Shared.Return(buffer);  }  ````  
27333	area-Infrastructure	CoreFX publish steps should support running on systems with only VS 2017	Currently, the checked-in build definitions used by CoreFX publish tasks ( [example](https://github.com/dotnet/corefx/blob/master/buildpipeline/DotNet-Trusted-Publish.json#L38) ) are hard-coded to expect to find VS 2015 tools installed on the machine.    Ideally these steps could work on either system.  However, to support SourceLink and other new features we'd like to move all build processes to 2017 for now.    @weshaggard FYI.
27332	area-Serialization	Update sgen usage and --parameters	#26901   #26902   @huanwu  @zhenlan  @mconnew 
27330	area-Meta	Look for places to collapse AsSpan().Slice(start, length) into .AsSpan(start,length)	
27329	area-System.Net	SocketsHttpHandler: Consider exposing setting for maximum response drain size	When a response is disposed before the response stream is read to the end, we attempt to drain the remaining response body up to a limit.  We should consider making this limit configurable via a setting on SocketsHttpHandler.    See discussion on #27315     EDIT (@stephentoub): Added API:  ```C#  public int MaxResponseDrainSize { get; set; } // Question: should we use long instead?  ```
27328	area-System.Memory	Rename string-slicing extension methods	"As part of     https://github.com/dotnet/corefx/issues/26894    the api folks have approved renaming AsROSpan and AsROMemory  on string instances to AsSpan and AsMemory (as the ""readonly""  is obvious given the read-only nature of the input.)    This puts the renaming in effect. Basically a big search-replace  commit."
27326	area-System.Security	CryptoStream.Dispose calls Flush on read-only Stream in CryptoStreamMode.Read	```csharp  class ReadOnlyStream : Stream  {      public override void Flush() => throw new NotSupportedException();        public override int Read(byte[] buffer, int offset, int count) => count;        public override long Seek(long offset, SeekOrigin origin) => throw new NotSupportedException();        public override void SetLength(long value) => throw new NotSupportedException();        public override void Write(byte[] buffer, int offset, int count) => throw new NotSupportedException();        public override bool CanRead => true;        public override bool CanSeek => false;        public override bool CanWrite => false;        public override long Length => throw new NotSupportedException();        public override long Position      {          get => throw new NotSupportedException();          set => throw new NotSupportedException();      }  }              static void Main(string[] args)  {      var aes = Aes.Create().CreateDecryptor();      var crypto = new CryptoStream(new ReadOnlyStream(), aes, CryptoStreamMode.Read, false);      crypto.Dispose();  }  ```      I'm not sure if that's the intended behavior, but it makes no logical sense to me and also prevents me from reading encrypted payload from http requests in ASP.NET Core.
27324	area-System.Net	SocketsHttpHandler may corrupt pooled connection if send content is canceled	When a connection is about to be returned to the pool, we're nulling out the _currentRequest field, which then causes the send content to stop sending if it's still going.  But if the connection remains open, the server may still expect a promised amount of content to be received, causing a hang.
27323	area-System.ComponentModel	EmailAddressAttribute validates invalid emails	I've been using [`EmailAddressAttribute`](https://github.com/dotnet/corefx/blob/master/src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/EmailAddressAttribute.cs) to validate email addresses in an MVC app but I've noticed that it uses a very naive validation method that validates addresses like `.name@example.org` and other formats forbidden by [RFC 2822](https://tools.ietf.org/html/rfc2822#section-3.4.1) and [3696](https://tools.ietf.org/html/rfc3696#section-3). Should this attribute use the same regex validation method as its [Framework equivalent](https://github.com/Microsoft/referencesource/blob/master/System.ComponentModel.DataAnnotations/DataAnnotations/EmailAddressAttribute.cs#L54), which seems much more robust?
27322	area-System.Net	DO NOT MERGE: add request drain test to understand behavior	
27320	area-System.Drawing	Graphics.Transform does not affect clip region specified by Path on Linux	"The clip region remains in the same place, regardless of the transformation matrix. The issue is not reproducible on Windows, but reproducible on Linux. The issue is not reproducible with using of graphics.SetClip(Rectangle).    1. Run the following code on Linux:  ```c#       var bmp = new Bitmap(200, 50);       using (var graphics = Graphics.FromImage(bmp))       using(var pen = new Pen(Color.Black, 1f))       {          graphics.Clear(Color.White);                            graphics.TranslateTransform(50f,0f);            var clipRectangle = new Rectangle(0, 0, 50, 50);          graphics.DrawRectangle(pen, clipRectangle); //mark the clip area            // set clip area using path          var path = new GraphicsPath();          path.AddRectangle(clipRectangle);          graphics.SetClip(path);                            // Draw diagonal line to be clipped by rectangle          graphics.DrawLine(pen, -50,0,150,50);      }        bmp.Save(""/mnt/c/Temp/clip_linux.png"", ImageFormat.Png);  ```  2. Compare results of running the code on windows and linux    Observed: Clip area does not affected by transformation matrix and located at 0,0 point.  ![clip_linux](https://user-images.githubusercontent.com/16118282/36468035-47fab214-1714-11e8-9bb1-e38a28b6e6ed.png)    Expected: Clip area should affected by translation matrix and shifted to the right by 50 pixels like on Windows.  ![clip_win](https://user-images.githubusercontent.com/16118282/36468038-4b27777e-1714-11e8-857f-4f5b6c4ee380.png)  "
27319	area-System.Memory	Add ROSpan Equals/CompareTo/IndexOf/Contains string-like APIs with StringComparison	Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138    - Equals  - CompareTo  - IndexOf ~(fast span only)~  - Contains ~(fast span only)~    Depends on: https://github.com/dotnet/coreclr/pull/16467    **TODO:**  - Add more tests  - ~Verify correctness on Unix~  - ~Can we expose string.IndexOf with `out int matchedLength` parameter? Can we expose string.Contains with `StringComparison comparisonType` parameter? If not, these APIs cannot be implemented for portable span.~    cc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne, @joshfree 
27318	area-System.IO	Make final API review changes to file enumeration	Tweak stack array initialization to just zero the first element in matcher algorithm.    cc: @danmosemsft @terrajobst 
27317	area-System.IO	Brotli Compression not working in an Azure Web App	Opened on behalf of @jmkni from https://github.com/dotnet/corefxlab/issues/2068    ---    Hi all    I have the Brotli compression working nicely in development, but when I push it to Azure the files just don't compress.    The Content-Encoding is returned as **br**, but the files are no smaller than with GZIP. Running locally, they are significantly smaller.    On my Azure Web App, I have installed the **Brotli HTTP Compression (x86)** extension, and I am running on 32-bit.    Any ideas?    Cheers    Edit, have tried switching to 64-bit, and using the 64-bit extension. Same issue. I have also tried both 32 and 64 bit without the extension, no joy!    Buffer size: 65520  Quality: CompressionLevel.Optimal    
27315	area-System.Net	SocketsHttpHandler: add response stream drain	When an HttpResponseMessage is disposed before the entire response stream is read, we are currently just killing the connection.    Instead, try to drain the connection (up to a limit) so that it can be reused.    @stephentoub @davidsh @dotnet/ncl   
27314	area-System.Text	RegexPrefix struct, RegexFCD buffer to ValueListBuilder & ArrayPool	**Updated results from yesterday (couldn't repro the better number in commit 2).**    before:    |     Method |     Mean |    Error |    StdDev |       Gen 0 | Allocated |  |----------- |---------:|---------:|----------:|------------:|----------:|  |  RegexCtor | 339.5 ms | 0.9025 ms | 0.8442 ms | 201000.0000 | 402.07 MB |    after:    |     Method |     Mean |    Error |    StdDev |       Gen 0 | Allocated |  |----------- |---------:|---------:|----------:|------------:|----------:|  |  RegexCtor | 312.0 ms | 1.447 ms | 1.1258 ms | 189125.0000 | 378.36 MB |    ### Results    After the first regex construction:  ~ 8% increased throughput  ~ 4% less allocation
27313	area-System.Drawing	Graphics.Measure string wrong result in case of the text broken into lines	"charsFilled output parameter value is wrong in case of text broken into lines. The issue is reproducible under linux, but not reproducible under windows.    Run the following code:  ```c#      var bmp = new Bitmap(200, 50);      using (var graphics = Graphics.FromImage(bmp))      using(var font = new Font(""Arial"", 10))      {          graphics.MeasureString(""H E L L O"", font, new SizeF(20, float.MaxValue),                      StringFormat.GenericTypographic, out var chars, out var lines);                            Console.WriteLine($""Chars fitted: {chars}"");          Console.WriteLine($""Lines fitted: {lines}"");      }  ```    Observed: console output is  Chars fitted: 3  Lines fitted: 4    Expected: console output is   Chars fitted: 9  Lines fitted: 4    "
27312	area-System.Drawing	Graphics.MeasureString wrong results in case of PageUnit is Point and all chars fitted	"charsFitted and linesFitted output paramters values are 0 in case of text fitted in provided area and graphics's PageUnit is Point. The issue is reproducible under linux, but not reproducible under Windows.    Run the following code under linux  ```c#      var bmp = new Bitmap(200, 50);      using (var graphics = Graphics.FromImage(bmp))      using(var font = new Font(""Arial"", 10))      {          graphics.PageUnit = GraphicsUnit.Point;          graphics.MeasureString(""HELLO"", font, new SizeF(float.MaxValue, float.MaxValue),                      StringFormat.GenericTypographic, out var chars, out var lines);                             Console.WriteLine($""Chars fitted: {chars}"");           Console.WriteLine($""Lines fitted: {lines}"");        }  ```  Observed: Console output is  Chars fitted: 0  Lines fitted: 0    Expected: Console output is  Chars fitted: 5  Lines fitted: 1    "
27310	area-System.Drawing	Translation vector of Transformation matrix works incorrect when PageUnit is Point.	"The issue is observed on linux platform, but not observed on the Windows. Its looks like graphics.PageUnits does not taken into account on applying of translation vector to the graphical objects.    1. Run the following code:    ```c#      var bmp = new Bitmap(200, 50);      using (var graphics = Graphics.FromImage(bmp))      using(var font = new Font(""Arial"", 10))      using(var brush = new SolidBrush(Color.Black))      using(var bgBrush = new SolidBrush(Color.White))      {              //Fill background              graphics.PageUnit = GraphicsUnit.Pixel;              graphics.FillRectangle(bgBrush, 0, 0, 200, 100);                                // Draw text with 10 pixel offset              graphics.PageUnit = GraphicsUnit.Pixel;              graphics.Transform = new Matrix(1,0,0,1,10,0);              graphics.DrawString(""|<- 10 pixels offset"", font, brush, 0,0);                                // Draw text with 10 points offset              graphics.PageUnit = GraphicsUnit.Point;              graphics.DrawString(""|<- 10 points offset"", font, brush, 0,10);                                Console.WriteLine(""Actual Dpi is: "" + graphics.DpiX);//96          }      bmp.Save(""units.png"", ImageFormat.Png);  }  ```  2. Open generated png file    Observed: both line of the text have the same offset - 10px (see attached units_linux.png)  ![units_linux](https://user-images.githubusercontent.com/16118282/36460187-e2537272-16e9-11e8-98dd-56b8600c4d8d.png)    Expected: Second line should have 10 points offset (or ~13px for 96 dpi) (see attached units_win.png)  ![units_win](https://user-images.githubusercontent.com/16118282/36460193-e6d3a786-16e9-11e8-8ada-047c220fa28b.png)  "
27307	area-System.Data	Issue connecting to MS SQL Server running on non default port 1433	"@mahesji commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1264)  # Issue Title    Issue connecting to MS SQL Server running on non default port 1433 from Linux environment     **OS Version**  Linux 4.4.0-109-generic #132~14.04.1-Ubuntu SMP Tue Jan 9 21:46:42 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux    dotnet core project settings   ```  <Project Sdk=""Microsoft.NET.Sdk.Web"">      <PropertyGroup>      <TargetFramework>netcoreapp2.0</TargetFramework>      <RuntimeFrameworkVersion>2.0.5</RuntimeFrameworkVersion>    </PropertyGroup>      <ItemGroup>      <Folder Include=""wwwroot\"" />    </ItemGroup>      <ItemGroup>      <PackageReference Include=""Microsoft.AspNetCore.All"" Version=""2.0.5"" />      <PackageReference Include=""System.Data.SqlClient"" Version=""4.4.2"" />    </ItemGroup>      <ItemGroup>      <DotNetCliToolReference Include=""Microsoft.VisualStudio.Web.CodeGeneration.Tools"" Version=""2.0.2"" />    </ItemGroup>    </Project>    ```  # General  Using System.Data.SqlClient to connect to Sql server database. Following the sample in this post https://blogs.msdn.microsoft.com/dotnet/2016/11/09/net-core-data-access/    It works fine if the sql server is listening on port 1433 but fails when connecting to sql servers listening on port 1434. Confirmed that there is no network / firewall issues that that is blocking the ports. Able to connect to the same sql server on port 1434 using java code.  This connection string works >  Server=myhostname,1433;Database=mydatabase;User Id=myuser;Password=mypassword;  This connection string does not work in above linux environment.  Works fine on windows  Server=myhostname,1434;Database=mydatabase;User Id=myuser;Password=mypassword;    Both connect strings work fine in Windows environment.    Record Fetch Error: A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: TCP Provider, error: 35 - An internal exception was caught)  ---  @usergiga commented on [Fri Feb 09 2018](https://github.com/dotnet/core/issues/1264#issuecomment-364605423)  If an instance of SQL Server is listening on any other port, than 1433. You have to specify a server-alias or change the standard port globally.   You can have SQL Server listening on multiple ports.   ---  @mahesji commented on [Mon Feb 12 2018](https://github.com/dotnet/core/issues/1264#issuecomment-364967845)  @usergiga , Thank you for the reply.  I have the alias created and that doesn't seem to help. The connection works fine in Windows runtime.  Have this issue only in the Linux (Ubuntu) runtime.    "
27306	area-System.Runtime	DateTime.TryParse produces different results in different environments	"@Doff3n commented on [Wed Feb 14 2018](https://github.com/dotnet/core/issues/1267)  # DateTime.TryParse produces different results in different environments        # General  I am trying to parse a date, with DateTime.TryParse and with a provided Norwegian culture and no DatetimeStyles:  ``` csharp  var result: DateTime.TryParse(""29.01"", new CultureInfo(""nb-NO"", false), DateTimeStyles.None, out var parsedDateTime)  ```     I am purposely sending in ""29.01"" and expecting the result to parse to a default Datetime: ""29.01.2018"",  I also expect that 29.01.18 and 29.01.2018 parses to the correct dates.     In norway the date format is dd.MM.YYYY HH:mm  Code:  https://github.com/Doff3n/HelloDate    Commands:  - dotnet build  - dotnet run    Running this on my PC:  - dotnet run  parsedDateTime: 29.01.2018 00:00:00  result: True    Running this on the VM:  - dotnet run  parsedDateTime: 01.01.0001 00.00.00  result: False    .Net core sdk version: 2.1.4, runtime: 2.0.5    In desperation I have also tried setting Date and Time formats in Windows, but I would have expected the property UseUserOverride: false to not allow user settings.    "
27305	area-System.Net	Behavioral difference between Linux and Windows in httprequest with 302 reply and #	"@jdelrue commented on [Thu Feb 01 2018](https://github.com/dotnet/core/issues/1246)  # General  Operating system 1: Windows 10  Operating system 2: Ubuntu (16.04 or 17.04)    Execute:    ```  using System;  using System.Net.Http;  using System.Threading.Tasks;    namespace redirtest  {      class Program      {          static void Main(string[] args)          {              var res = Task.Run(async () => await method());              res.Wait();          }          public static async Task method()          {              using (var client = new HttpClient(new HttpClientHandler              {                  AllowAutoRedirect = true              }))              {                  var connect = await client.GetAsync(""http://www.jimber.org/redirect.php"");                  var requestUri = connect.RequestMessage.RequestUri.AbsoluteUri;                  Console.WriteLine(requestUri);                }          }      }  }  ```  Output Windows: http://www.google.be/#youdontgetthisinlinux  Output Linux: http://www.google.be/      Expected output is the Windows version. Workaround: Disable autoredirect and read location header.    "
27304	area-System.Runtime	Check if app is run by sudo/admin on Linux	@maroallegro commented on [Mon Jan 29 2018](https://github.com/dotnet/core/issues/1244)  I am trying to check if .NetCore code is running as sudo/admin on Linux. It works on Windows but throws exception on Linux.    How do I check if app is run by admin/sudo on Ubuntu Linux by using .NET Core2.0 build-in class?    Here is the code I have tried (however i thought that it will not manage admin rights on Linux):  ```  using System;  using System.Security.Principal;    namespace smallTestsCore  {      class Program      {          static void Main(string[] args)          {              Console.WriteLine(Program.IsAdministrator);              Console.ReadLine();          }          public static bool IsAdministrator =>              new WindowsPrincipal(WindowsIdentity.GetCurrent())                  .IsInRole(WindowsBuiltInRole.Administrator);      }  }  ```  The code works on Windows, but does not work on Linux:    ```  Exception has occurred: CLR/System.PlatformNotSupportedException  An unhandled exception of type 'System.PlatformNotSupportedException' occurred in  System.Security.Principal.Windows.dll: 'Windows Principal functionality is not supported on this platform.'    at System.Security.Principal.WindowsIdentity.GetCurrent()     at adminTst.Program.get_IsAdministrator() in /home/user/adminTst/Program.cs:line 15     at adminTst.Program.Main(String[] args) in /home/user/adminTst/Program.cs:line 11  ```  
27302	area-System.Net	[wcf.stress]: SocketsHttpHandler Test:Streaming Async:false Binding:Http StressRunDuration:4	Using `Async:true` we get the same exception wrapped on an `AggregateException`. `WinHttpHandler` completes this test without errors. The error message is suspicious in the sense that it seems to indicate that the server terminated the connection.    /cc @KKhurin     ```  Test:Streaming  Async:false  Binding:Http  StressRunDuration:4  ExitOnSuccess:True  Using CLITest-LocalCoreFX as the stress run name.  Start  2/20/2018 10:35:14 PM 1 0  2/20/2018 10:35:14 PM 8 0  2/20/2018 10:35:14 PM 3 0  2/20/2018 10:35:14 PM 4 0  2/20/2018 10:35:14 PM 0 0  2/20/2018 10:35:14 PM 2 0  2/20/2018 10:35:14 PM 5 0  2/20/2018 10:35:14 PM 7 0  2/20/2018 10:35:14 PM 6 0  2/20/2018 10:35:14 PM 9 0  2/20/2018 10:36:11 PM 9 100  2/20/2018 10:36:11 PM 1 100  2/20/2018 10:36:11 PM 0 100  2/20/2018 10:36:11 PM 6 100  2/20/2018 10:36:11 PM 3 100  2/20/2018 10:36:11 PM 4 100  2/20/2018 10:36:11 PM 8 100  2/20/2018 10:36:11 PM 5 100  2/20/2018 10:36:11 PM 7 100  2/20/2018 10:36:11 PM 2 100  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 71  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 81     at SharedPoolsOfWCFObjects.CommonMultiCallTest`3.<UseChannel>b__0_0(ChannelType channel) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\CommonTest.cs:line 337     at SharedPoolsOfWCFObjects.PooledFactoriesAndChannels`3.UseAllChannelsInPooledFactoriesAndChannels() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\SharedPoolsOfWCFObjects.cs:line 244     at SharedPoolsOfWCFObjects.Program.RunAllStressTests[ChannelType,TestTemplate,TestParams]() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 632     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass53_0.<DoTheStressRun>b__0() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 551     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass54_1.<<DoTheStressRunImpl>b__1>d.MoveNext() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 587  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 71  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 81     at SharedPoolsOfWCFObjects.CommonMultiCallTest`3.<UseChannel>b__0_0(ChannelType channel) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\CommonTest.cs:line 337     at SharedPoolsOfWCFObjects.PooledFactoriesAndChannels`3.UseAllChannelsInPooledFactoriesAndChannels() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\SharedPoolsOfWCFObjects.cs:line 244     at SharedPoolsOfWCFObjects.Program.RunAllStressTests[ChannelType,TestTemplate,TestParams]() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 632     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass53_0.<DoTheStressRun>b__0() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 551     at SharedPoolsOfWCFObjects.Program.<>c__DisplayClass54_1.<<DoTheStressRunImpl>b__1>d.MoveNext() in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Program.cs:line 587  System.IO.IOException: An exception has been thrown when reading the stream. ---> System.IO.IOException: Unable to transfer data on the transport connection: The I/O operation has been aborted because of either a thread exit or an application request. ---> System.Net.Sockets.SocketException: The I/O operation has been aborted because of either a thread exit or an application request     --- End of inner exception stack trace ---     at System.Net.Http.HttpConnection.FillAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1078     at System.Net.Http.HttpConnection.ReadNextLineAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpConnection.cs:line 1038     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.TryGetNextChunkAsync() in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 39     at System.Net.Http.HttpConnection.ChunkedEncodingReadStream.ReadAsync(Memory`1 destination, CancellationToken cancellationToken) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\ChunkedEncodingReadStream.cs:line 120     at System.Net.Http.HttpContentReadStream.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Net.Http\src\System\Net\Http\SocketsHttpHandler\HttpContentReadStream.cs:line 30     at System.ServiceModel.Channels.BufferedReadStream.Read(Byte[] array, Int32 offset, Int32 count)     at System.ServiceModel.Channels.MaxMessageSizeStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at System.Xml.EncodingStreamWrapper.Read(Byte[] buffer, Int32 offset, Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\EncodingStreamWrapper.cs:line 629     at System.Xml.XmlBufferReader.TryEnsureBytes(Int32 count) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBufferReader.cs:line 232     at System.Xml.XmlUTF8TextReader.ReadText(Boolean hasLeadingByteOf0xEF) in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1254     at System.Xml.XmlUTF8TextReader.Read() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlUTF8TextReader.cs:line 1363     at System.Xml.XmlBaseReader.MoveToContent() in d:\s\corefx\src\System.Private.DataContractSerialization\src\System\Xml\XmlBaseReader.cs:line 878     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     --- End of inner exception stack trace ---     at System.ServiceModel.Dispatcher.StreamFormatter.MessageBodyStream.Read(Byte[] buffer, Int32 offset, Int32 count)     at SharedPoolsOfWCFObjects.VerifiableStream.VerifyStream(Stream stream, Int32 expectedStreamSize, Int32 bufSize, Boolean verifyContent) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 387     at SharedPoolsOfWCFObjects.StreamingTest`2.TestEchoStream(StreamingRequestContext`1 details) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\Tests\StreamingTest.cs:line 264     at SharedPoolsOfWCFObjects.CallStats.CallFuncAndRecordStats[T](Func`1 func, Boolean hideExceptions) in d:\s\wcf\src\System.Private.ServiceModel\tests\Stress\SharedPoolsOfWCFObjects\CallStats.cs:line 71  ```  
27301	area-System.Net	CurlHandler: Transfer-Encoding incorrectly sent on redirect from POST to GET	If the initial request is a POST, and Transfer-Encoding: chunked is true for the request, and we receive a redirect code that forces the method to GET instead of POST, then CurlHandler is incorrectly sending Transfer-Encoding: chunked on the redirected GET request.    
27299	area-System.ComponentModel	System.ComponentModel.Composition is missing a typeforward for Lazy<T,TMetadata>	"@joperezr and I noticed this when having a discussion.    System.ComponentModel.Composition reference assembly is missing a type-forward for System.Lazy<T, TMetadata>.    As a result, when you use a .NET assembly which makes use of this type and reference System.ComponentModel.Composition, you will see a compile error.    ```  Error CS0012 The type 'Lazy<,>' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.ComponentModel.Composition, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.  ```    See attached sample.  [LazySample.zip](https://github.com/dotnet/corefx/files/1742137/LazySample.zip)    We should fix this by added the typeforward to the ref.     This also raises the question of  ""what goes in netcoreapp2.1""?  We can't remove System.ComponentModel.Composition.dll since that will be a breaking change.  It was present in 2.0 in order to typeforward this one type to System.Runtime.  Should we include all of MEF? /cc @weshaggard @danmosemsft   "
27298	area-System.Data	Updated contract, exposed SqlMetaData ctors	Updated contract, exposed SqlMetaData ctors and added SqlParameterCollection properties.    Completed the following types:  M:Microsoft.SqlServer.Server.SqlMetaData..ctor(System.String, System.Data.SqlDbType, System.Type, System.String)   M:Microsoft.SqlServer.Server.SqlMetaData..ctor(System.String, System.Data.SqlDbType, System.Type, System.String, System.Boolean, System.Boolean, System.Data.SqlClient.SortOrder, System.Int32)  P:Microsoft.SqlServer.Server.SqlMetaData.DbType {get;}  P:Microsoft.SqlServer.Server.SqlMetaData.Type {get;}  P:System.Data.SqlClient.SqlParameterCollection.IsFixedSize  P:System.Data.SqlClient.SqlParameterCollection.IsReadOnly M:System.Data.SqlClient.SqlDataReader.IsCommandBehavior(System.Data.CommandBehavior)         Adding reviewers:  @saurabh500 @corivera @geleems 
27297	area-System.Data	System.Data.Tests.DataTableTest.WriteXmlSchema3 test failed in CI on netfx	"```  System.Data.Tests.DataTableTest.WriteXmlSchema3 [FAIL]          Assert.Equal() Failure          Expected: ���CurrentLocale=""true"">\n    <xs:complexType>\n      <xs:choice m���          Actual:   ���CurrentLocale=""true"" msdata:EnforceConstraints=""True"">\n    <x���               at System.Data.Tests.DataTableTest.WriteXmlSchema3()  ```  https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_false_prtest/8520/consoleText"
27296	area-System.Runtime	Testing GetHashCode works properly when using string with embedded null	Related to #27098
27295	area-System.Net	SocketsHttpHandler: should validate request after chained handlers execute	The code in `SocketsHttpHandler::ValidateAndNormalizeRequest` is performing some checks on request validity, e.g. don't allow chunked encoding if there's no content.    These checks happen before the chained handlers (redirect, auth, etc) execute.  Because of this, it's possible that one of these handlers could modify the request to be invalid.  (In fact, we hit this previously because the redirect handler was changing POST to GET and clearing content but not removing Transfer-Encoding: chunked.)    Just to be safe, we should at least consider moving the validation logic to execute after the chained handers run, but before we try to establish a connection.
27293	area-System.Net	SocketsHttpHandler: proxy auth should choose digest over basic	There's logic in the regular auth handler to choose digest over basic if both exist in the 401 challenge.    The proxy logic doesn't seem to do this, it chooses whichever it finds first.
27292	area-System.Net	Expose SocketsHttpHandler.ConnectTimeout/Expect100ContinueTimeout	cc: @geoffkizer, @davidsh, @wfurt, @Priya91   Fixes https://github.com/dotnet/corefx/issues/27145  Fixes https://github.com/dotnet/corefx/issues/27235
27291	area-System.Net	SocketsHttpHandler cancellation test failures on windows	  [20180220.06 SocketsHttpHandler - Win7](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180220.06/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test~2FConnectTimeout_TimesOutSSLAuth_Throws)    ```  Assert.InRange() Failure  Range:  (500 - 10000)  Actual: 19271        at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.<>c__DisplayClass10_0.<<ConnectTimeout_TimesOutSSLAuth_Throws>b__0>d.MoveNext() in E:\A\_work\19\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 235  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in E:\A\_work\19\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 81  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in E:\A\_work\19\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 64     at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.ConnectTimeout_TimesOutSSLAuth_Throws() in E:\A\_work\19\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 222  --- End of stack trace from previous location where exception was thrown ---  ```      [20180220.07 SocketsHttpHandler - Win10](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180220.07/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test~2FConnectTimeout_TimesOutSSLAuth_Throws)    ```  Assert.InRange() Failure  Range:  (500 - 10000)  Actual: 14177       at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.<>c__DisplayClass10_0.<<ConnectTimeout_TimesOutSSLAuth_Throws>b__0>d.MoveNext() in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 235  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.<>c__DisplayClass11_0.<<CreateClientAndServerAsync>b__0>d.MoveNext() in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 81  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in E:\A\_work\14\s\corefx\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 64     at System.Net.Http.Functional.Tests.SocketsHttpHandler_HttpClientHandler_Cancellation_Test.ConnectTimeout_TimesOutSSLAuth_Throws() in E:\A\_work\14\s\corefx\src\System.Net.Http\tests\FunctionalTests\SocketsHttpHandlerTest.cs:line 222  --- End of stack trace from previous location where exception was thrown ---  ```  
27287	area-System.Threading	Improve thread name and start tests	Checking https://github.com/dotnet/coreclr/issues/16449 in CI
27285	area-System.Net	SocketsHttpHandler: Correct behavior when MaxAutomaticRedirections is exceeded?	Currently, if MaxAutomaticRedirections is exceeded, we throw an exception.  This matches WinHttpHandler/CurlHandler.    This does not match full framework behavior, though.  Framework will simply stop redirecting and return the last 3xx response.    The latter seems slightly better to me.  However, it also means the user needs to handle this case and not assume a 200 response.  They pretty much have to do this anyway since the response could always be 4xx or 5xx anyway, but it's still one more situation for them to handle.    See HttpClientHandlerTest.GetAsync_MaxAutomaticRedirectionsNServerHops_ThrowsIfTooMany.
27283	area-System.Data	.Net Core ExecuteReader GetSchemaTable() method not returning the BaseTableName and more details.	"_From @ezra2310 on February 17, 2018 16:54_    Hi,    In .Net Core ExecuteReader.GetSchemaTable() method not returning the BaseTableName and more details of the query will executed.    I'm created an console application in Core .Net 2.0. The below code has written and do some R&D. Its working in .net Framework 4x version and get all schema details as BaseTablename,BaseColumn,etc.... But in Core .Net 2.0 the BaseTableName was not returning.    Im tried in various way but still im not got the route. Can you please help me how to get the BaseTableName and all those details.    Its very important R&D undergoing. Can you anybody please help me ??  ```c#  SqlConnection sqlCnn = new SqlConnection(connetionString);  sqlCnn.Open();  SqlCommand sqlCmd = new SqlCommand(sql, sqlCnn);    SqlDataReader sqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);    List<string> gotTableNames = new List<string>();  DataTable schemaTable = sqlReader.GetSchemaTable();    foreach (DataRow dr in schemaTable.Rows)  {     string data = Convert.ToString(dr[""BaseTableName""]);     if (!gotTableNames.Contains(data))     {        gotTableNames.Add(data);     }  }    return string.Join("","", gotTableNames);  ```  [edit by @danmosemsft to add triple tick formatting]  _Copied from original issue: aspnet/Mvc#7389_"
27281	area-Serialization	Microsoft.XmlSerializer.Generator fails when project targets multiple frameworks	"I am currently benchmarking all serializers. I want to compare `XmlSerializer` with SGEN enabled and disabled.    The problem:  when my project targets multiple frameworks (I need to compare Core 2.0 vs 2.1 vs .desktop 4.7.1) the tool fails.    Repro: create a new console app and change TargetFramework to TargetFramework**s**    ```xml  <?xml version=""1.0"" encoding=""utf-8""?>  <configuration>   <packageSources>      <!--To inherit the global NuGet package sources remove the <clear/> line below -->      <clear />      <add key=""api.nuget.org"" value=""https://api.nuget.org/v3/index.json"" protocolVersion=""3"" />      <add key=""corefx CI"" value=""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"" />   </packageSources>  </configuration>  ```    ```xml  <Project Sdk=""Microsoft.NET.Sdk"">    <PropertyGroup>      <OutputType>Exe</OutputType>      <TargetFrameworks>netcoreapp2.1</TargetFrameworks> <!-- S IS CRUCIAL HERE -->    </PropertyGroup>      <ItemGroup>      <PackageReference Include=""Microsoft.XmlSerializer.Generator"" Version=""2.0.0-preview2-26216-03"" />      <PackageReference Include=""System.Xml.XmlSerializer"" Version=""4.3.0"" />    </ItemGroup>  </Project>  ```    ```cs  class Program  {      static void Main(string[] args)      {          var xmlSerializer = new XmlSerializer(typeof(Test));            Console.WriteLine(xmlSerializer);      }  }    public class Test  {      public int A, B;  }  ```    Now if I run `dotnet build -c Release -f netcoreapp2.1` it fails with:    ```  PS C:\Users\adsitnik\source\repos\ConsoleApp14> dotnet build -c Release -f netcoreapp2.1  Microsoft (R) Build Engine version 15.6.54.9755 for .NET Core  Copyright (C) Microsoft Corporation. All rights reserved.      Restore completed in 59,85 ms for C:\Users\adsitnik\source\repos\ConsoleApp14\ConsoleApp14.csproj.    ConsoleApp14 -> C:\Users\adsitnik\source\repos\ConsoleApp14\bin\Release\netcoreapp2.1\ConsoleApp14.dll    No executable found matching command ""dotnet-Microsoft.XmlSerializer.Generator""  C:\Users\adsitnik\.nuget\packages\microsoft.xmlserializer.generator\2.0.0-preview2-26216-03\build\Microsoft.XmlSerializer.Generator.targets(15,5): warning MSB3073: The command ""dotnet Microsoft.XmlSerializer.Generator obj\Release\netcoreapp2.1\ConsoleApp14.dll /force /quiet"" exited with code 1. [C:\Users\adsitnik\source\repos\ConsoleApp14\ConsoleApp14.csproj]  C:\Users\adsitnik\.nuget\packages\microsoft.xmlserializer.generator\2.0.0-preview2-26216-03\build\Microsoft.XmlSerializer.Generator.targets(16,5): warning : SGEN : warning SGEN1: Fail to generate the serializer for ConsoleApp14.dll. Please follow the instructions at https://go.microsoft.com/fwlink/?linkid=858594 and try again. [C:\Users\adsitnik\source\repos\ConsoleApp14\ConsoleApp14.csproj]  ```    @huanwu I am new to the company, but I can see that you have been working on this feature. Can you recommend me any fix/workaround?    /cc @jorive           "
27279	area-System.IO	GZipStream cannot decompress multipart gzip files. 	"See the following [stackoverflow thread](https://stackoverflow.com/questions/47743788/gzipstream-from-memorystream-only-returns-a-few-hundred-bytes  ) for more information.    GZipStream currently fails if you try to decompress a concatenated gzip file. The RFC does state that two gzip files can be cated together and it is also a valid gzip file. However, the current implementation can only read the first gzip stream and stops there. Here is a simple repro::  ```cs  using System;  using System.IO;  using System.IO.Compression;  class Program  {      static void Main()      {          using (var fs = new FileStream(Path.Combine(Environment.CurrentDirectory,""test.txt.gz""), FileMode.Create))          {              using(var gz = new GZipStream(fs, CompressionLevel.NoCompression, true))              using(var sw = new StreamWriter(gz))                  sw.WriteLine(""Stream 1"");                                using(var gz = new GZipStream(fs, CompressionLevel.NoCompression, true))              using(var sw = new StreamWriter(gz))                  sw.WriteLine(""Stream 2"");                            fs.Seek(0, SeekOrigin.Begin);              using (var gz = new GZipStream(fs, CompressionMode.Decompress))              using (var sr = new StreamReader(gz))              Console.WriteLine(sr.ReadToEnd());          }      }  }  ```    The expected output should be  ```  Stream 1  Stream 2  ```  But the actual output is just `Stream 1`.    If you open up ""test.txt.gz"" in your favorite gzip util, like 7z, you will be able to extract the file and you will see the correct output."
27278	area-System.Text	Improve Regex cache speed when cache is large	Fixes https://github.com/dotnet/corefx/issues/24425  Fixes https://github.com/dotnet/corefx/issues/26364    A try to speed up cache using `Dictionary<CachedCodeEntryKey, CachedCodeEntry>`, refs #24425 
27277	area-Infrastructure	E:\A\_work\2704\b\pipelineRepository\Tools\Symbols.targets(508,5): error : PDB0023: No supported URIs found in Source Link [E:\A\_work\2704\b\pipelineRepository\build.proj]	Opened on behalf of @jcagme  Warnings: 1 Status Message: failed  Build : Master - 20180216.01 (Publish) Failing configurations: - Publish Symbols   - Symbol Publish [Mission Control Build Info](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/build~2Fpublish~2F/build/20180216.01/workItem/Orchestration/analysis/external/Link)  At least last 10 builds have failed to publish due to this error
27275	area-System.Data	System.Data.SqlClient => Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information.	Hi guys,    same piece of code compiled and run against .net framework 4.5 and dotnet core 2.0    .net framework 4.5 version runs without issues  dotnet core 2.0 version returns error:  Dynamic SQL generation is not supported against a SelectCommand that does not return any base table information.    comparing info from both libraries used, i noticed the following difference:  .net framework 4.5  Property: BaseTableName                  Value: TEST    dotnet core 2.0:  Property: BaseTableName                  Value:    apparently, this property is not properly captured    best regards,    Raul
27273	area-System.Net	"WinHttpHandler on Win7 is occasionally failing with ""System.Net.Http.WinHttpException : The handle is invalid"""	For example, here: https://mc.dot.net/#/user/geoffkizer/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/aee82742ebc870d5831d6b0b95b5044cd9e53fc2/workItem/System.Net.Http.Functional.Tests    I saw this earlier today in another PR as well.  Only seems to happen on Win7.
27272	area-System.Net	Enable SocketsHttpHandler_HttpClientHandler_ConnectionPooling_Test for other handlers	From comments in the class:    ```csharp          // TODO: Currently the subsequent tests sometimes fail/hang with WinHttpHandler / CurlHandler.          // In theory they should pass with any handler that does appropriate connection pooling.          // We should understand why they sometimes fail there and ideally move them to be          // used by all handlers this test project tests.  ```    
27270	area-System.IO	Test updates for https://github.com/dotnet/coreclr/pull/16447	Updates and disables tests, tracked by #27269.  For Path change in CoreCLR: https://github.com/dotnet/coreclr/pull/16447
27269	area-System.IO	Need to update tests for https://github.com/dotnet/coreclr/pull/16447	I will link to the test change that disables the tests that are impacted.
27268	area-System.IO	Add IPipeReader and IPipeWriter and have IDuplexPipe inherit from them	Allows determination of whether a Pipe-like is Readable, Writable or Both via the type system    Current API  ```csharp  public interface IDuplexPipe  {      PipeReader Input { get; }      PipeWriter Output { get; }  }  ```  Proposed API  ```csharp  public interface IReadablePipe   {      PipeReader Input { get; }  }    public interface IWritablePipe   {      PipeWriter Output { get; }  }    public interface IDuplexPipe : IReadablePipe, IWritablePipe   {}  ```    Use case a Stream that is write only, but implemented on top of a Pipe  ```csharp  public class HttpResponseStream : Stream, IWritablePipe   {      private readonly Pipe _pipe;      PipeWriter IWritablePipe.Output => _pipe.Writer;        public override async Task FlushAsync(CancellationToken cancellationToken)          => await _pipe.Writer.FlushAsync(cancellationToken);        public override Task WriteAsync(ReadOnlyMemory<byte> source, CancellationToken cancellationToken = default)          => _pipe.Writer.WriteAsync(source, cancellationToken);                public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)          => WriteAsync(new Memory<byte>(buffer, offset, count), cancellationToken);                public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)          => throw NotSupportedException();                public override async ValueTask<int> ReadAsync(Memory<byte> destination, CancellationToken cancellationToken = default)          => throw NotSupportedException();        public override bool CanWrite => true;      public override bool CanRead => false;      public override bool CanSeek => false;            // Other stream overloads  }  ```  This means you can have TextWriters that work with Streams; however, if the Stream has a pipe it can encode on the go in WriteAsync with no internal buffers (using the Pipe's memory directly) rather than waiting for FlushAsync and either allocating buffers or pulling them from the ArrayPool; and then having an additional copy to pass onto the Stream e.g.  ```csharp  public class HttpResponseStreamWriter : TextWriter  {      internal const int DefaultBufferSize = 16 * 1024;        private readonly PipeWriter _pipe;      private readonly StreamWriter _streamWriter;      private readonly Encoder _encoder;        public PipeStreamWriter(Stream stream, Encoding encoding)          : this(stream, encoding, DefaultBufferSize) {}        public PipeStreamWriter(Stream stream, Encoding encoding, int bufferSize)      {          Encoding = encoding;          if (stream is IWritablePipe pipe)          {              _pipe = pipe.Output;          }          else          {              _streamWriter = new StreamWriter(stream, encoding, bufferSize);          }      }        public override Encoding Encoding { get; }        public unsafe override void Write(char value)      {          if (_pipe != null)          {              Span<byte> bytes = _pipe.GetSpan(Encoding.GetMaxByteCount(1));              var encoded = Encoding.GetBytes(new ReadOnlySpan<byte>(&value, sizeof(char)), bytes);              _pipe.Advance(encoded);          }          else          {              _streamWriter.Write(value);          }      }        public override Task WriteAsync(ReadOnlyMemory<char> source, cancellationToken = default) =>           (_pipe != null) ?               _pipe.WriteAsyncImpl(source, cancellationToken) :              _streamWriter.WriteAsync(source);        private Task WriteAsyncImpl(ReadOnlyMemory<char> source, CancellationToken token)      {          ReadOnlySpan<char> input = source.Span;          int minBytes = Encoding.GetMaxCharCount(1);          while (input.Length > 0)          {              Span<byte> bytes = _pipe.GetSpan(minBytes);              int totalEncoded = 0;              while (bytes.Length > 0)              {                  int toEncode = Math.Min(Encoding.GetMaxCharCount(bytes.Length), input.Length);                  var encoded = Encoding.GetBytes(input.Slice(0, toEncode), bytes);                  input = input.Slice(toEncode);                  bytes = bytes.Slice(encoded);                  totalEncoded += encoded;                  if (bytes.Length < minBytes)                  {                      break;                  }              }              _pipe.Advance(totalEncoded);          }                    return _pipe.WriteAsync(default);      }        public override Task WriteAsync(char[] values, int index, int count)          => WriteAsync(new ReadOnlyMemory<char>(values, index, count));        public override Task WriteAsync(string value)          => WriteAsync(value.AsReadOnlyMemory());        public override Task FlushAsync()      {          if (_pipe != null)          {              await _pipe.Output.FlushAsync();          }          else          {              await _streamWriter.FlushAsync();          }      }        // Other TextWriter overloads  }  ```    /cc @davidfowl @stephentoub @GrabYourPitchforks 
27267	area-System.Text	Introduce Regex.Replace Span API & optimize Regex-Redux benchmark	"## Rationale  Today we have the ability to replace certain parts of a string identified by a regex pattern by calling `Regex.Replace(string input, string pattern, string replacement)`. This does work well for small input strings but if you chain multiple Replace calls together and pass a large input string to it the number of string allocations are immensely high.     ## Example  In the regex-redux benchmark there are 3 huge sets of allocations that dominate the rest.  - There is a cascade of replacements on a 50M character string, which creates 500MB of string garbage, presumably in LOH  ![image](https://user-images.githubusercontent.com/6385855/36403552-5d9591f0-159a-11e8-9dad-a0df6d71aeff.png)  - Its input file is read into a 100MB string. (double byte - 50MB file)  - There are 100MB of StringBuilder allocations.    ## API Proposal  ```csharp  namespace System.Text.RegularExpressions  {      public class Regex      {          // Returns amount of bytes written into the buffer          public static int Replace(ReadOnlySpan<char> input, Span<char> buffer, string pattern, string replacement, RegexOptions options = RegexOptions.None, TimeSpan matchTimeout = default);      }  }  ```    ## Notes  This API would help us remove unnecessary string allocations in the regex-redux benchmark (http://benchmarksgame.alioth.debian.org/u64q/program.php?test=regexredux&lang=csharpcore&id=9).  The Regex.Replace implementation uses Match internally to check the pattern on the input string. Can we also change the Match code to operate on Spans or do we need to allocate a string in that step?    ## Sample Usage  ```csharp  // Sample implementation for regex-redux  const int InputFileSize = 1024 * 1024 * 50; // 50 MB input file    // Borrow buffers   char[] buffer1Arr = ArrayPool<char>.Shared.Rent(InputFileSize);   char[] buffer2Arr = ArrayPool<char>.Shared.Rent(InputFileSize);   Span<char> buffer1 = new Span<char>(buffer1Arr);   Span<char> buffer2 = new Span<char>(buffer2Arr);    int bufferBytesWritten = Console.In.ReadBlock(buffer1);  bufferBytesWritten = Regex.Replace(buffer1.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer2, ""tHa[Nt]"", ""<4>"");  bufferBytesWritten = Regex.Replace(buffer2.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer1, ""aND|caN|Ha[DS]|WaS"", ""<3>"");  bufferBytesWritten = Regex.Replace(buffer1.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer2, ""a[NSt]|BY"", ""<2>"");  bufferBytesWritten = Regex.Replace(buffer2.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer1, ""<[^>]*>"", ""|"");  bufferBytesWritten = Regex.Replace(buffer1.Slice(0, bufferBytesWritten).AsReadOnlySpan(), buffer2, ""\\|[^|][^|]*\\|"", ""-"");    // Return buffers  ArrayPool<char>.Shared.Return(buffer1Arr);  ArrayPool<char>.Shared.Return(buffer2Arr);    return bufferBytesWritten;  ```    Relates to https://github.com/dotnet/corefx/issues/27124    cc @stephentoub @danmosemsft @vancem @jkotas @jfree"
27266	area-System.Net	SocketsHttpHandler: split auth and redirect handling back into two separate handlers	This will help with supporting NTLM auth, which will need to disable auth on redirects as well, but the auth will be handled at a different level (per connection vs per request).    @stephentoub @davidsh     @dotnet-bot test Outerloop Windows x64 Debug Build please  @dotnet-bot test Outerloop Linux x64 Release Build please  @dotnet-bot test Outerloop OSX x64 Debug Build please
27265	area-System.Net	SocketsHttpHandler: Don't reuse connection with extraneous received data	Fixes #26754
27262	area-System.Text	Force inlining CheckTimeout in RegexRunner	"I can't get any valuable measurements with BDN here. I tried multiple times but it seems either my benchmarks are bad or the absolute costs of the CheckTimeout native calls are to small.    @AndyAyersMS Perfview tells me that without AggresiveInlining it won't inline the method with reason ""unprofitable inline"". Any idea why it doesn't inline a simple boolean check here (it doesn't inline either without the OR condition). Has it do with the state of inliner here (huge switch)?    Perfview before:    Name | Exc %  -- | --  system.text.regularexpressions!RegexInterpreter.Go | 35.8  system.text.regularexpressions!RegexCharClass.CharInClassInternal | 12.1  system.text.regularexpressions!RegexCharClass.CharInClassRecursive | 7.1  system.text.regularexpressions!RegexInterpreter.Backtrack | 7.0  system.text.regularexpressions!RegexInterpreter.Stringmatch | 6.1  system.text.regularexpressions!RegexInterpreter.SetOperator | 5.4  system.text.regularexpressions!RegexInterpreter.FindFirstChar | 5.3  system.text.regularexpressions!RegexInterpreter.Forwardcharnext | 3.5  system.text.regularexpressions!RegexRunner.Scan | 3.1  system.text.regularexpressions!RegexRunner.CheckTimeout | 2.9  system.text.regularexpressions!RegexInterpreter.Goto | 2.5    Perfview after:      Name | Exc %  -- | --  system.text.regularexpressions!RegexInterpreter.Go | 35.3  system.text.regularexpressions!RegexCharClass.CharInClassInternal | 13.8  system.text.regularexpressions!RegexCharClass.CharInClassRecursive | 8.0  system.text.regularexpressions!RegexInterpreter.Backtrack | 7.3  system.text.regularexpressions!RegexInterpreter.Stringmatch | 6.0  system.text.regularexpressions!RegexInterpreter.SetOperator | 5.3  system.text.regularexpressions!RegexInterpreter.FindFirstChar | 5.0  system.text.regularexpressions!RegexInterpreter.Forwardcharnext | 3.8  system.text.regularexpressions!RegexRunner.Scan | 3.1  system.text.regularexpressions!RegexInterpreter.Goto | 2.5        cc @danmosemsft @stephentoub"
27261	area-System.IO	Add tests against corelib shared IO internals	These were removed when we cleaned up unused code in CoreFX common. Next steps are to CoreFX PathInternal usages to CoreLib and remove existing CoreLib.
27260	area-System.Data	Are there plans to support GetSchema in System.Data.Odbc?	I'm currently using the System.Data.Odbc 4.5.0-preview1-25914-04.  Works great for connecting to various sources both on Windows and Linux.  I do however have a requirement to get the schema list for the source and when trying to use GetSchema I get a NotImplemented error.  Are there plans to implement this feature?
27259	area-System.Net	DO NOT MERGE: Test response drain behavior	
27258	area-System.Runtime	[WIP] Add NativeLibrary reference assemblies and tests	This is the corefx equivalent of https://github.com/dotnet/coreclr/pull/16409.
27257	area-System.Net	ValueWebSocketReceiveResult is missing CloseStatus and CloseStatusDescription	I tried replacing ReceiveAsync(ArraySegment\<byte\>) with the Memory\<byte\> overload only to notice these missing properties.    https://github.com/dotnet/corefx/blob/643bccc7f2c24a897cc15c42486d4184e1f931eb/src/System.Net.WebSockets/src/System/Net/WebSockets/WebSocketReceiveResult.cs#L34-L38    https://github.com/dotnet/corefx/blob/643bccc7f2c24a897cc15c42486d4184e1f931eb/src/System.Net.WebSockets/src/System/Net/WebSockets/ValueWebSocketReceiveResult.cs#L32-L34    Is there a reason for this?    /cc @stephentoub 
27256	area-System.Net	Using Trusted Root Certification Authorities for server certificate validation in HttpClient	I have created a self-signed certificate using     `    openssl req -x509 -newkey rsa:2048 -keyout https-key.pem -out https.pem -days 365`    then I created pkcs12 using (I have set the CN to my server's ip adress):    `    openssl pkcs12 -export -out https.pfx -inkey https-key.pem -in https.pem -password pass:123456`    In my server a use the generated `https.pfx` file for https.    In my client I imported the generated certificate into the Windows' `Trusted Root Certification Authorities` (Current user and also local system).    When I send a HTTP request to the server from my client, I get     ```  System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: A security error occurred         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Threading.Tasks.RendezvousAwaitable`1.GetResult()         at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()         --- End of inner exception stack trace ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)         at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()         at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()      --- End of stack trace from previous location where exception was thrown ---         at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task).  ```    In chrome it says:        Attackers might be trying to steal your information from *** (for example, passwords, messages, or credit cards). NET::ERR_CERT_AUTHORITY_INVALID    Does .NET Core 2.0's `HttpClient` use Windows certificate stores? What could be causing the issue.
27255	area-System.Net	SocketsHttpHandler: remove Content-Length header if Transfer-Encoding: chunked is present	This matches behavior of other handlers.  We've been getting away with not doing this because #27245 would cause Content-Length to not appear in the enumeration in normal cases.    Contributes to #27245     @stephentoub @davidsh 
27254	area-System.IO	Update root dir enum test	Update assert for better logging. Skip directory entries.    fixes #27244
27253	area-System.Text	Consider adding Span<char> overloads to TextEncoder	Seems like these were missed in the Spanification of the BCL. https://github.com/dotnet/corefx/blob/01fa16ffd618846a913cad719269c8bb441ceb28/src/System.Text.Encodings.Web/src/System/Text/Encodings/Web/TextEncoder.cs    /cc @stephentoub @KrzysztofCwalina @GrabYourPitchforks 
27251	area-System.Data	Null value in string array in DataRow causes DataRowComparer to throw NRE, but only if it is the first parameter	Use object.Equals() to compare array elements and avoid NRE
27250	area-System.Net	Optimise HtmlEncode and HtmlDecode to produce less garbage	"This fixes https://github.com/dotnet/corefx/issues/13893. I'd noticed in a project of mine that the `TextWriter` overload of `WebUtility.HtmlEncode` was unexpectedly generating garbage.    I added a `System.Buffers` project reference to the `System.Runtime.Extensions` csproj and wrote a simple implementation of `StringBuilder` based on `ArrayPool`, as suggested by @jkotas in https://github.com/dotnet/corefx/pull/13875.    I benchmarked this implementation and while it appears to produce no garbage (except for the `string` that it returns) it does seem to run around 10-20% slower. I'm keen to get some input from you guys on what might be going on here.      Benchmark code (using BenchmarkDotNet):    ```csharp  [MemoryDiagnoser]  public class Bench  {      public static readonly string _toEncode = string.Concat(Enumerable.Repeat(""<>\""'"", 100));        [Benchmark(Baseline = true)]      public void String_Old()      {          WebUtility.HtmlEncode(_toEncode);      }        [Benchmark]      public void String_New()      {          WebUtility.HtmlEncodeNew(_toEncode);      }        [Benchmark]      public void TextWriter_Old()      {          using (var writer = TextWriter.Null)          {              WebUtility.HtmlEncode(_toEncode, writer);          }      }        [Benchmark]      public void TextWriter_New()      {          using (var writer = TextWriter.Null)          {              WebUtility.HtmlEncodeNew(_toEncode, writer);          }      }  }  ```    And the results:    ```           Method |     Mean |     Error |    StdDev | Scaled | ScaledSD |  Gen 0 |  Gen 1 | Allocated |  --------------- |---------:|----------:|----------:|-------:|---------:|-------:|-------:|----------:|       String_Old | 5.394 us | 0.0987 us | 0.0924 us |   1.00 |     0.00 | 2.0828 | 0.0229 |   13120 B |       String_New | 6.571 us | 0.1101 us | 0.1030 us |   1.22 |     0.03 | 0.7629 |      - |    4832 B |   TextWriter_Old | 5.431 us | 0.1078 us | 0.1153 us |   1.01 |     0.03 | 2.0828 | 0.0229 |   13120 B |   TextWriter_New | 6.080 us | 0.1041 us | 0.0974 us |   1.13 |     0.03 |      - |      - |       0 B |  ```"
27249	area-System.Diagnostics	ObjectDisposedException on Process.Start leaves defunct process on Linux	"This is a difficult one to reproduce!     We're starting a process repeatedly in 5 seconds gaps. After leaving running for a week, we end up with 4-5 defunct processes that failed to start.   On the ones that failed we see the process handle is marked as invalid and an exception (see below) is thrown. Even though we're disposing, the process now has a defunct child for it's lifetime.    C# details:    - Self contained deployment  - DotNetCore 2.0  - Centos 7.3    Code to reproduce:  ```csharp  using (var process = new Process())  {      process.StartInfo.FileName = ""filename"";      process.StartInfo.Arguments = ""arguments"";      process.StartInfo.RedirectStandardOutput = true;      process.EnableRaisingEvents = true;      process.Start();        var output = process.StandardOutput.ReadToEnd();        process.WaitForExit(MaxWaitTime);  }  ```    Exception stack:  ```csharp  System.ObjectDisposedException: Safe handle has been closed  at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)  at System.Threading.RegisteredWaitHandleSafe.SetWaitObject(WaitHandle waitObject)  at System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, UInt32 millisecondsTimeOutInterval, Boolean executeOnlyOnce, StackCrawlMark& stackMark, Boolean compressStack)  at System.Threading.ThreadPool.RegisterWaitForSingleObject(WaitHandle waitObject, WaitOrTimerCallback callBack, Object state, Int32 millisecondsTimeOutInterval, Boolean executeOnlyOnce)  at System.Diagnostics.Process.EnsureWatchingForExit()  at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)  at System.Diagnostics.Process.Start()  ```"
27248	area-Meta	Guideline 14. formulation ('within type declarations') is unclear	  > 14. Fields should be specified at the top within type declarations    This is very unclear to our team.  It seems that a 'type declaration' is either a class or a struct declaration, and only classes and structs can have fields. Therefore it seems that either this information is redundant, or it should mean something else.            
27247	area-System.Data	Reference to type 'SqlConnection' claims it is defined in 'System.Data', but it could not be found.	"dotnet --version: 2.1.4   uname -a: Linux firefixmaarten 4.15.3-300.fc27.x86_64 #1 SMP Tue Feb 13 17:02:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux  Also tested on windows 10:    ```  <ItemGroup>      <PackageReference Include=""EnterpriseLibrary.WindowsAzure.TransientFaultHandling"" Version=""5.1.1212.0"" />      <PackageReference Include=""log4net"" Version=""2.0.8"" />      <PackageReference Include=""Lz4.Net"" Version=""1.0.98"" />      <PackageReference Include=""MongoDB.Driver"" Version=""2.5.0"" />      <PackageReference Include=""Newtonsoft.Json"" Version=""11.0.1"" />      <PackageReference Include=""Newtonsoft.Json.Schema"" Version=""3.0.6"" />      <PackageReference Include=""ServiceStack.Text"" Version=""5.0.2"" />      <PackageReference Include=""System.Data.SqlClient"" Version=""4.4.2"" />      <PackageReference Include=""WindowsAzure.ServiceBus"" Version=""4.1.7"" />      <PackageReference Include=""WindowsAzure.Storage"" Version=""9.0.0"" />  </ItemGroup>    ```  Getting this error everywhere:  Reference to type 'SqlConnection' claims it is defined in 'System.Data', but it could not be found [commonlib]"
27246	area-System.IO	Add PipeReader and PipeWriter implementations over a Stream	This will help with adoption of pipelines. This is possible today but we can provide an implementation with minimal allocations. The usual adapter code involves creating 2 pipes and creating 2 async loops that read from the stream and write into the pipe and reading from the pipe and writing into the Stream.    This works well but there are some downsides:  - Some streams buffer internally and we may end up copying from the Stream's internal buffer into the pipe's buffers.  - Even if we can avoid that, we'll end up allocating a Task per read and write operation (though some streams cache the result of the previous operation)  - We end up paying per read/write costs in general (for e.g. in FileStream allocating via ThreadPoolBoundHandle.AllocateNativeOverlapped per read/write pair).    Most of the per read/write costs can be mitigated by using CopyToAsync (if overridden by the Stream) but there are some downsides there as well.  - Using the default implementations CopyToAsync allocates an internal buffer if the Stream doesn't have one already and passes that buffer to the other stream. Using the default pipe implementation, we end up copying the Stream's buffer into the pipe's buffer which might be fine but is a bit unfortunate.    We can avoid some of these overheads if we implement a PipeReader on top of CopyToAsync that doesn't use the Pipe internally. The idea here is that we call CopyToAsync on a fake stream that forwards WriteAsync calls to the PipeReader consumer. This implementation would pass buffers directly from the Stream to the consumer. If the consumer doesn't process the entire buffer, only the unconsumed buffer is copied into an internal buffer for the next read.    The write side isn't as problematic because we need to be able to allocate memory to write into the Stream so reusing the pipe isn't so bad here. The implementation here would likely be using a Pipe internally, then writing to the Stream on FlushAsync.
27245	area-System.Net	HttpContent auto-computed content length header is not exposed via header enumeration	"If you access HttpContent.Headers.ContentLength directly, we will attempt to use the content's TryComputeLength to construct a content length header.    However, if you access HttpContent.Headers via its enumerator or a method like TryGetValues, we won't construct the content length header.    This means that just accessing the ContentLength property will change the results of header enumeration.  For example:    ```csharp              var content = new StringContent(""hello world"");              foreach (var kvp in content.Headers) { }    // Content-Length not present              var ignore = content.Headers.ContentLength;              foreach (var kvp in content.Headers) { }    // Content-Length present  ```    Similarly, if you try to remove the header using the Remove method, it's not actually removed:    ```csharp              var content = new StringContent(""hello world"");              content.Headers.Remove(""Content-Length"");              Assert.Equal(null, content.Headers.ContentLength);  // fails; returns value from TryComputeLength  ```    The easiest fix here is probably just to try to compute the length when the content object is constructed.  This assumes that TryComputeLength is always cheap, which seems reasonable, but is slightly different than how it's used today.  Also, it seems like LoadIntoBufferAsync changes the Content-Length, but probably this is fine.    Unfortunately, fixing this will cause SocketsHttpHandler to behave incorrectly.  Currently, if you set TransferEncodingChunked = true, then SocketsHttpHandler will never access the ContentLength property directly, and thus it won't get populated and won't get sent on the wire.  Fixing the above behavior will cause the ContentLength to get populated, and thus sent on the wire, which is not correct behavior, per RFC.  So this will need to get fixed somehow.  (Note that this problem exists today, it's just harder to hit it -- you would need to either set Content-Length explicitly, or force population of the header by accessing it.)    (edited because I'm an idiot and can't read the RFC properly)  "
27244	area-System.IO	Test failure: System.IO.Tests.Enumeration.RootTests/CanRecurseFromRoot	Opened on behalf of @danmosemsft  The test `System.IO.Tests.Enumeration.RootTests/CanRecurseFromRoot` has failed.  System.InvalidOperationException : Sequence contains more than one matching element          Stack Trace:             at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /Users/buildagent/agent/_work/391/s/corefx/src/System.Linq/src/System/Linq/Single.cs:line 143        at System.IO.Tests.Enumeration.RootTests.CanRecurseFromRoot() in /Users/buildagent/agent/_work/391/s/corefx/src/System.IO.FileSystem/tests/Enumeration/RootTests.netcoreapp.cs:line 47 Build : Master - 20180219.01 (Core Tests) Failing configurations: - OSX.1012.Amd64-x64   - Release - Ubuntu.1710.Amd64-x64   - Release 
27242	area-System.Net	Implement SocketsHttpHandler's Expect100ContinueTimeout and ConnectTimeout	With the expectation that we'll want to expose this in 2.1, implement Expect100ContinueTimeout and ConnectTimeout.  The members are currently internal but can be flipped public easily once the APIs are approved.  This also fixes an issue with cancellation around the connect phase, where a cancellation request that came in during the SSL auth phase would not be respected.    Contributes to https://github.com/dotnet/corefx/issues/27145  Contributes to https://github.com/dotnet/corefx/issues/27235  cc: @geoffkizer, @davidsh
27240	area-System.Linq	Linq.Expressions don't support operator overloads with in parameters	"For example:  ```csharp  readonly struct Foo  {      public static implicit operator Foo(in string x)      {          return new Foo();      }  }    class Program  {      public static void Main(string[] args)      {          Console.WriteLine((Foo)""hi""); // valid          Expression.Convert(Expression.Constant(""hi""), typeof(Foo)); // throws      }  }  ```    Exception:  ```  System.InvalidOperationException: No coercion operator is defined between types 'System.String' and 'Test.Foo'.     at System.Linq.Expressions.Expression.GetUserDefinedCoercionOrThrow(ExpressionType coercionType, Expression expression, Type convertToType)     at System.Linq.Expressions.Expression.Convert(Expression expression, Type type, MethodInfo method)     at System.Linq.Expressions.Expression.Convert(Expression expression, Type type)     at Test.Program.Main(String[] args) in D:\Desktop\Test\Test\Program.cs:line 22  ```    This also happens with other operator overloads. Maybe other places too (method call?) but I haven't tested those."
27239	area-System.IO	Handle errors getting state in Unix	Throwing errors while examining extended state while enumerating isn't consistent with Windows behavior. Windows never throws past getting directory entry data as all state is already available.    Ensure entry attribute state is consistent with initial construction.
27238	area-System.Memory	[Jit] Improve struct passing (reduce copies)	Before they are out there and it becomes a breaking change (byval => byref)    ReadOnlyMemory is a `readonly struct`; currently a copy is made and that copy is then passed by reference; but there is an advantage to passing it `in` and no-disadvantage (as call-site doesn't need to be annotated with `in`) and since it is `readonly` and passed by ref anyway due to its size.    e.g. changing     ```csharp  static int CompareOrdinalIgnoreCase(ReadOnlySpan<char> strA, ReadOnlySpan<char> strB)  ```  to  ```csharp  static int CompareOrdinalIgnoreCase(in ReadOnlySpan<char> strA, in ReadOnlySpan<char> strB)  ```  Changes the call site from  ```asm  G_M57521_IG05:         lea      rcx, bword ptr [rsp+38H]         mov      bword ptr [rcx], r9         mov      dword ptr [rcx+8], edx         lea      rcx, bword ptr [rsp+28H]         mov      bword ptr [rcx], r8         mov      dword ptr [rcx+8], edx         lea      rcx, bword ptr [rsp+38H]         lea      rdx, bword ptr [rsp+28H]         call     CompareInfo:CompareOrdinalIgnoreCase(struct,struct):int  ```  to  ```asm  G_M57521_IG05:         mov      bword ptr [rsp+28H], r8         mov      dword ptr [rsp+30H], eax         lea      rcx, bword ptr [rsp+28H]         call     CompareInfo:CompareOrdinalIgnoreCase(byref,byref):int  ```    /cc @jkotas @stephentoub @KrzysztofCwalina @mikedn 
27237	area-System.Memory	Consider adding MemoryMarshal.GetOwner(ROM)	```csharp  public static partial class MemoryMarshal  {      public static object GetOwner(ReadOnlyMemory<T> readOnlyMemory)  }  ```    With Registered IO; when sending an receiving data the api doesn't use `address`, `offset`, `length`; it uses `id`, `offset`, `length`    The `id`s are assigned upfront when you register the addresses (once)    Currently you have to [loop through all the registered](https://github.com/dotnet/corefxlab/blob/ec47e7023bcd45fb40c4468f5b1234b33f14ffe4/src/System.IO.Pipelines.Networking.Windows.RIO/Internal/RioThread.cs#L95-L117) memory blocks to find which one matches and then get its `id` which is inefficient and also has to protect against concurrency of new memory being registered while its searching.    This search and registration blocking could be avoided with the new api  ```csharp  if (GetOwner(readOnlyMemory) is RioMemoryPoolBlock block)  {      var idToUse = block.Id;  }  else  {      // Not registered memory, get registered memory block and copy data  }  ```    /cc @davidfowl @KrzysztofCwalina 
27235	area-System.Net	SocketsHttpHandler: Consider exposing ConnectTimeout	In some environments, in particular in a cloud, it's useful to be able to specify a timeout for just the connection phase of an HTTP request.  That way, if the server is unresponsive, we don't need to wait for the full HttpClient timeout to cancel the request, and conversely, setting a small HttpClient timeout to avoid such issues doesn't cancel an active operation taking a long time simply because it's conversing a lot.    We should add:  ```C#  public sealed class SocketsHttpHandler  {      public TimeSpan ConnectTimeout { get; set; } // defaults to infinite so that it's opt-in / pay for play      ...  }  ```
27234	area-Infrastructure	Consider making a property-based testing library available for tests.	Consider making a property-based testing library, such as [FsCheck](https://github.com/fscheck/FsCheck), available for use in testing.    In particular, [model-based testing](https://fscheck.github.io/FsCheck/StatefulTesting.html) would be useful for dealing with things like the [XML.LINQ](https://github.com/dotnet/corefx/blob/master/src/System.Private.Xml.Linq/tests/events/EventsAdd.cs) property tests, making it easier to write combinatorial tests that search through more possibilities.    Now, it's true that FsCheck, like most libraries based on Quickcheck, normally use a random seed on each run; this is considered a feature.  However, they all explicitly include the failing seed for any failing test in the output, and this can be included in the config for the test (meaning regression tests can be automatically re-run)
27233	area-System.Net	HttpContent.ReadStreamSync  (CancellationToken does not work)	"1.  I see a strange line of code in HttpClient.cs  But I did not found method with same name and 2 params.  ``` await response.Content.LoadIntoBufferAsync(_maxResponseContentBufferSize, cts.Token) ```  And I did not found method in binary files.  2.    Cancel token does not work.  (windows 8.1, net core 2.0)  ```   class Program      {          static void Main(string[] args)          {              new Program().Run().Wait();          }            async Task Run()          {              using (var opt = new HttpClientHandler              {                  Proxy = WebRequest.DefaultWebProxy              })              {                  using (var http = new HttpClient(opt))                  {                        var source = new CancellationTokenSource();                      var token = source.Token;                      var dt = DateTime.Now;                        //BIG FILE                      var task = http.GetAsync(                          new Uri(""https://codeload.github.com/MediaBrowser/Emby/zip/master""),                          HttpCompletionOption.ResponseHeadersRead,                          cancellationToken: token);                        var res = await task;                        //await Task.WhenAny(Task.WhenAll(new[] { task }), Task.Delay(5000));                      //source.Cancel();                        Console.WriteLine(res.Content.Headers.ContentLength);                      Console.WriteLine($""{(DateTime.Now - dt).TotalSeconds} sec"");                        dt = DateTime.Now;                        source.Cancel();                        var data = await res.Content.ReadAsByteArrayAsync();                        // exception did not raised, why?                        Console.WriteLine($""read {data.Length} bytes  ; {(DateTime.Now - dt).TotalSeconds} sec"");                        /*                                                            70995752  0.7254927 sec  read 70995752 bytes  ; 9.8042545 sec                                        */                  }              }          }      }  ```    I think problem this    ```  bool flag = this._timeout != HttpClient.s_infiniteTimeout;   bool disposeCts;   CancellationTokenSource cancellationTokenSource;   if (flag || cancellationToken.CanBeCanceled)   {    disposeCts = true;    cancellationTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, this._pendingRequestsCts.Token);    if (flag)    {     cancellationTokenSource.CancelAfter(this._timeout);    }   }   else   {    disposeCts = false;    cancellationTokenSource = this._pendingRequestsCts;   }  ```  finally{   if(disposeCts){token.Dispose()}  }"
27232	area-System.IO	FileSystemWatcher does not raise events when target directory is symlink (on linux)	"Steps to reproduce:    ```shell  mkdir /tmp/realdir  ln -s /tmp/realdir /tmp/symdir  ```    Launch a program similar to below:    ```csharp  var fsw = new FileSystemWatcher(""/tmp/symdir"") { NotifyFilter = NotifyFilters.FileName | NotifyFilters.LastWrite };  fsw.Created += (o, i) => Console.WriteLine(i.Name);  fsw.EnableRaisingEvents = true;  ```    Create empty file (or any other one):    ```shell  touch /tmp/symdir/test.txt # Could be also /tmp/realdir/test.txt, since it's one and the same  ```    No event being raised. Event is raised properly if we listen in `/tmp/realdir` instead.    Since expected behaviour of linux programs is to handle symlinks transparently, I expected that `FileSystemWatcher` would properly raise events that happened in real directory. That didn't happen though (no events being raised, I also tested with other event types). I couldn't find similar issue so I consider it a bug, but if this is expected then it should probably be noted somewhere.    Thank you in advance for looking into this.    ```  .NET Command Line Tools (2.1.300-preview2-008210)    Product Information:   Version:            2.1.300-preview2-008210   Commit SHA-1 hash:  f6065dcc62    Runtime Environment:   OS Name:     debian   OS Version:   OS Platform: Linux   RID:         debian-x64   Base Path:   /opt/dotnet/sdk/2.1.300-preview2-008210/    Microsoft .NET Core Shared Framework Host      Version  : 2.1.0-preview2-26131-06    Build    : b13a0d5c331f374afd35ded57b9a4b4ab128864c    ```"
27231	area-System.Net	Several perf improvements/tweaks for SocketsHttpHandler	- Chunked reads from buffer.  We now process as much of the buffer as we can synchronously during ReadAsync, rather than returning once we hit the end of a chunk.  For very small chunks that arrive quickly, this results in a huge perf increase, e.g. best case for the optimization, with lots of 1-byte chunks getting buffered together, it's now 10x faster.  With 100-byte chunks buffered together, it's 2x faster.    - Blitting byte[] to output for known headers.  Rather than using WriteStringAsync to output all header names, we now use WriteBytesAsync for known headers, with the headers precomputed into byte[]s and cached.    - Cached `Task<int>`s for ReadAsync.  Hopefully consumers start moving to the new `ReadAsync(Memory<byte>, CancellationToken)` overload on Stream, but for those who consume via `ReadAsync(byte[], int, int)`, we need to allocate a task even for synchronously completing values, which will be common when reading from a buffer.  We now cache `Task<int>`s for values < 1024, to account for small reads.    - Removed delegate/closure allocation from connection.  We were accidentally closing over a cancellation token, resulting in an extra delegate and closure allocation in ConnectHelper.  Also reduced the size of the EstablishSslConnectionAsync state machine by splitting the method in order to remove several arguments from being included.    - Use Utf8Formatter for hex values.  Switched from custom formatting of hex values to just use Utf8Formatter.TryFormat.    - Avoid buffering in HttpConnection.CopyToAsync(Stream).  This is used when we want to copy the whole source stream until EOF (e.g. for a Connection: close response), and thus we can skip the buffer and use the source stream's CopyToAsync directly.    - Added a test to exercise various size chunks, line endings, ReadAsync vs CopyToAsync, etc.    - Fix CopyToAsync cancellation handling.  Even though we'll abort the connection when cancellation is requested, we still need to pass the token to the destination stream's WriteAsync to give it the opportunity to cancel.  Also properly pass the buffer size through to the underlying stream's CopyToAsync where appropriate.    - Small miscellaneous cleanup, like removing a few unused arguments from methods, fixing an assert to validate the right thing, etc.    Fixes https://github.com/dotnet/corefx/issues/27198  cc: @geoffkizer, @davidsh, @wfurt, @Priya91 
27230	area-System.Xml	XslCompiledTransform fails on high number of xsl:when elements	".NET core 2.0 (project in Visual Studio 2017 v15.5.6 ) crashes with StackOverflowException when a very high number (2725+) of xsl:when elements are encountered in a choice-element. .NET framework 4.7 has the same problem, but fails (""The stylesheet is too complex"") or crashes with stackoverflowexception (with the restriction disabled in app.config) on around 780 elements) (this has been reported separately)    Below is code which reproduces the problem. Change the number to 2724 and it will complete successfully in my environment.          static void Main()          {              var xslt = new StringBuilder();                xslt.AppendLine(@""<?xml version=""""1.0"""" encoding=""""utf-8""""?>    <xsl:stylesheet version=""""1.0"""" xmlns:xsl=""""http://www.w3.org/1999/XSL/Transform"""">    <xsl:output method=""""html"""" encoding=""""utf-8"""" /><xsl:template name=""""test""""><xsl:choose>"");                for (int n = 1; n < 2725; n++)              {                  xslt.AppendLine($""<xsl:when test=\""@V='k{n}'\"">Value {n}</xsl:when>"");              }                xslt.AppendLine(@""</xsl:choose></xsl:template></xsl:stylesheet>"");              var ms = new MemoryStream(Encoding.UTF8.GetBytes(xslt.ToString()));                var transform = new XslCompiledTransform(true);              using (var rdr = XmlReader.Create(ms))              {                  transform.Load(rdr);              }          }  "
27229	area-System.IO	TryGet for ReadOnlysequence	Fixes https://github.com/dotnet/corefx/issues/27097    Needs tests
27228	area-System.Net	Can not send email on .Net Core 2.0 with SmtpClient or TcpClient	"I'm trying to send email using Google SMTP server but its throwing exception on socket connection.  Simple code that works fine on .Net but not on .Net Core 2.0:     ```  var client = new SmtpClient(""smtp.gmail.com"", 587);        client.UseDefaultCredentials = false;        client.Credentials = new NetworkCredential(""email@gmail.com"", ""some password"");        client.EnableSsl = true;            MailMessage mailMessage = new MailMessage();          mailMessage.From = new MailAddress(""email@gmail.com"");          mailMessage.To.Add(""otheremail@gmail.com"");          mailMessage.Body = ""Hello World!"";          mailMessage.Subject = ""Subjeeect"";            client.Send(mailMessage);  ```    Exception:    > System.Net.Mail.SmtpException: 'Failure sending mail.'    > ExtendedSocketException: An attempt to establish a connection was unsuccessful, because from another computer for the required time, the desired response was not received, or the already established connection was broken because of the incorrect response of the computer already connected. 64.233.162.109:587    Same error will be if use TcpClient:    ```  using (var client = new TcpClient())  {      await client.ConnectAsync(""smtp.gmail.com"", 587);  }  ```    I'm running this code on Windows 10 if it's important."
27227	area-System.Runtime	TimeZoneInfo incredibly slow	"The TimeZoneInfo methods ConvertTimeToUtc, IsAmbiguousTime and IsDayLightSavingTime popped up as eating up about half of the processing time in a program importing, converting and storing lots of data in a database, As this was quite unbelievable to me, I programmed a little converter, which did  these same conversions for our time zone ""W. Europe Standard Time"" and found it to be about 70 times as fast as the dotnet implementation.  I tried to figure out what went wrong in TimeZoneInfo implementation, but it looked pretty complicated (even messed up) to me, and as I only have limited time resources thought, that someone responsible for this code should check this out instead.   I know my comparison is only valid for our W.European timezone, but I think that most time zones are similarily easy to implement, so for these types of zones the dotnet code really should perform much better. Performance should really be an issue here, as time-related functionality is offen used in comination with engineering and measurment data, where converting between local timezones and UTC is very frequent, and needs to be fast.  I have attached my test program and also paste it here for your convenience.  Stefan      [Program.zip](https://github.com/dotnet/corefx/files/1733570/Program.zip)    using System;  using System.Collections.Generic;  using System.Linq;  using System.Text;  using System.Threading.Tasks;    namespace TestTimeZone {   class MyWesternEuropeConverter {    const int YFirst = 1900;    DateTime TFirst = new DateTime(YFirst, 1, 1), TLast = new DateTime(YFirst + 200, 1, 1);    DateTime[] FwdTimes = new DateTime[200], BwdTimes = new DateTime[200];    TimeZoneInfo RegularInfo;    int StdHourDiff = 1;    int HourOfChange = 2;    public MyWesternEuropeConverter() {     RegularInfo = TimeZoneInfo.FindSystemTimeZoneById(""W. Europe Standard Time"");     InitDates();    }    public DateTime ConvertTimeToUtcRegular(DateTime dt, out bool isAmbiguous, out bool isDayLightSavingTime, out bool isAllowed) {     try {      isAmbiguous = RegularInfo.IsAmbiguousTime(dt);      dt = TimeZoneInfo.ConvertTimeToUtc(dt, RegularInfo);      isDayLightSavingTime = RegularInfo.IsDaylightSavingTime(dt);      isAllowed = true;     } catch {      isAllowed = false;      isAmbiguous = true;      isDayLightSavingTime = true;     }     return dt;    }    public DateTime ConvertTimeFromUtcRegular(DateTime dt) {     return TimeZoneInfo.ConvertTimeFromUtc(dt, RegularInfo);    }      public DateTime ConvertTimeToUtc(DateTime dt, out bool isAmbiguous, out bool isDayLightSavingTime, out bool isAllowed) {     int yearIdx = dt.Year - YFirst;     if (yearIdx < 0 || yearIdx >= 200) {      return ConvertTimeToUtcRegular(dt, out isAmbiguous, out isDayLightSavingTime, out isAllowed);     } else {      DateTime curFwd = FwdTimes[yearIdx];      DateTime curBwd = BwdTimes[yearIdx];      if (dt < curFwd || dt >= curBwd) {       isAmbiguous = false;       isAllowed = true;       isDayLightSavingTime = false;       return new DateTime(dt.Ticks - TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Utc);      }      if (dt.Ticks < curFwd.Ticks + TimeSpan.TicksPerHour) {       isAllowed = false;       isAmbiguous = true;       isDayLightSavingTime = true;       return dt; // new DateTime(dt.Ticks - TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Utc);      }      isAllowed = true;      isAmbiguous = dt.Ticks >= curBwd.Ticks - TimeSpan.TicksPerHour;      isDayLightSavingTime = !isAmbiguous;      return new DateTime(dt.Ticks - TimeSpan.TicksPerHour * (StdHourDiff + (isAmbiguous ? 0 : 1)), DateTimeKind.Utc);     }    }    public DateTime ConvertTimeFromUtc(DateTime dt) {     DateTime utc = new DateTime(dt.Ticks + TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Local);     int yearIdx = utc.Year - YFirst;     if (yearIdx < 0 || yearIdx >= 200) {      return TimeZoneInfo.ConvertTimeFromUtc(dt, RegularInfo);     }     DateTime curFwd = FwdTimes[yearIdx];     DateTime curBwd = BwdTimes[yearIdx];     if (dt.Ticks >= curFwd.Ticks || dt.Ticks <= curBwd.Ticks - TimeSpan.TicksPerHour) dt = new DateTime(dt.Ticks + TimeSpan.TicksPerHour, DateTimeKind.Local);     return dt;    }    void InitDates() {     int yFirst = TFirst.Year;     for (int i = 0; i < FwdTimes.Length; i++) {      FwdTimes[i] = GetFwdDate(yFirst + i).AddHours(HourOfChange);      BwdTimes[i] = GetBwdDate(yFirst + i).AddHours(HourOfChange + 1);    //  System.Diagnostics.Trace.WriteLine(string.Format(""{0}-{1}"", FwdTimes[i], BwdTimes[i]));     }    }    DateTime GetFwdDate(int year) {     DateTime dLast = new DateTime(year, 3, 31);     return dLast.AddDays(-(int)dLast.DayOfWeek);    }    DateTime GetBwdDate(int year) {     DateTime dLast = new DateTime(year, 10, 31);     return dLast.AddDays(-(int)dLast.DayOfWeek);    }   }     class Program {    static void Echo(string s) {     System.Diagnostics.Trace.WriteLine(s);     System.Console.WriteLine(s);    }    static string Report(DateTime t, bool isAmbiguous, bool isDayLightSaving, bool isAllowed) {     return string.Format(""{0:yyyy/MM/dd/HH:mm} ambiguous:{1} dayLightSaving:{2} allowed:{3}"", t, isAmbiguous, isDayLightSaving, isAllowed);    }    static void Main(string[] args) {     MyWesternEuropeConverter conv = new MyWesternEuropeConverter();     TimeZoneInfo tzInfo = TimeZoneInfo.Local;     DateTime tStart = new DateTime(1900, 1, 1);     DateTime tEnd = new DateTime(2100, 1, 1);     bool allowed1, allowed2, isAmbiguous1, isAmbiguous2, isDayLightSaving1, isDayLightSaving2;     for (DateTime tCur = tStart; tCur < tEnd; tCur = tCur.AddMinutes(15)) {      DateTime utc1 = conv.ConvertTimeToUtcRegular(tCur, out isAmbiguous1, out isDayLightSaving1, out allowed1);      DateTime utc2 = conv.ConvertTimeToUtc(tCur, out isAmbiguous2, out isDayLightSaving2, out allowed2);      if (utc1 != utc2 || isAmbiguous1 != isAmbiguous2 || isDayLightSaving1 != isDayLightSaving2 || allowed1 != allowed2)       Echo(string.Format(""Different: {0} {1}"", Report(utc1, isAmbiguous1, isDayLightSaving1, allowed1), Report(utc2, isAmbiguous2, isDayLightSaving2, allowed2)));     }     DateTime utc = DateTime.UtcNow;     int count = 0;     for (DateTime tCur = tStart; tCur < tEnd; tCur = tCur.AddMinutes(15)) {      count++;      DateTime utc1 = conv.ConvertTimeToUtcRegular(tCur, out isAmbiguous1, out isDayLightSaving1, out allowed1);     }     TimeSpan tNeeded = DateTime.UtcNow - utc;     Echo(string.Format(""seconds needed for {0} ToUtc regular: {1}, ticks per call: {2}"", count, tNeeded.TotalSeconds,((double) tNeeded.Ticks)/count));     utc = DateTime.UtcNow;     count = 0;     for (DateTime tCur = tStart; tCur < tEnd; tCur = tCur.AddMinutes(15)) {      count++;      DateTime utc2 = conv.ConvertTimeToUtc(tCur, out isAmbiguous2, out isDayLightSaving2, out allowed2);     }     tNeeded = DateTime.UtcNow - utc;     Echo(string.Format(""seconds needed for {0} ToUtc mine: {1}, ticks per call: {2}"", count, tNeeded.TotalSeconds, ((double)tNeeded.Ticks) / count));     System.Console.Write(""Ready >"");     System.Console.ReadKey();    }   }  }    "
27226	area-System.IO	Use PreallocatedOverlapped when internal FileStream buffer isn't being used on Windows	See comment here https://github.com/dotnet/coreclr/pull/16190#issuecomment-363109865    /cc @stephentoub 
27224	area-System.Memory	ReadOnlySequence with empty array returns wrong SequencePosition	```  var buffer = new ReadOnlySequence<byte>(new byte[0]);  Console.WriteLine(buffer.Start.Index);  Console.WriteLine(buffer.End.Index);  ```    This prints:    0  -2147483648    It should print:    0  0    /cc @KrzysztofCwalina @pakrym @ahsonkhan 
27223	area-System.IO	Fix enumerating the root directory.	Shouldn't trim the trailing separator when at the root. On Windows that makes  the path drive relative- which breaks most of the logic.    Add a test to catch this case.
27222	area-System.Data	Convert continuations in SqlClient managed SNI to async/await	Based on the comment at https://github.com/dotnet/corefx/pull/27187#discussion_r168739991 the continuations in SqlClient SNI layer can be changed to use async await to prevent unnecessary allocations during network calls.
27220	area-System.Net	support for CONNECT method in SocketHttpHandler 	This is replacement for  #26869   It is mainly to make git resolving easier after rebasing.   To much changed in master since my original work so it is quire different PR anyway.    Aside from unit tests, I did basic testing with HTTPS over HTTP proxy and it works.   Authentication will still need some work as @geoffkizer mentioned in hist last commit.   I plan to take a look next as well as I'll keep testing SocketHttpHandler with proxies.  
27217	area-System.Net	"Test Failure: System.Net.Http.Functional.Tests.HttpClientHandlerTest/GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate ""Unhandled Exception"""	"[System.Net.Http.Functional.Tests.HttpClientHandlerTest/GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate(origFragment: \""#origFragment\"", redirFragment: \""\"", expectedFragment: \""#origFragment\"", useRelati)](https://mc.dot.net/#/user/caesar1995/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/c4522d10d10a1b622b3f2b0cf919ede239e636a6/workItem/System.Net.Http.Functional.Tests/analysis/xunit/System.Net.Http.Functional.Tests.HttpClientHandlerTest~2FGetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate(origFragment:%20%5C%22%23origFragment%5C%22,%20redirFragment:%20%5C%22%5C%22,%20expectedFragment:%20%5C%22%23origFragment%5C%22,%20useRelati))    Unhandled Exception of Type System.Net.Http.HttpRequestException  Message :  ```  System.Net.Http.HttpRequestException : An error occurred while sending the request.  ---- System.Net.Http.WinHttpException : The server returned an invalid or unrecognized response  ```    Stack Trace  ```  at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http\src\System\Net\Http\HttpClient.cs:line 488     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass60_1.<<GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate>b__0>d.MoveNext() in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 891  --- End of stack trace from previous location where exception was thrown ---     at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in D:\j\workspace\windows-TGrou---6368dffa\src\Common\tests\System\Net\Http\LoopbackServer.cs:line 64     at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_AllowAutoRedirectTrue_RetainsOriginalFragmentIfAppropriate(String origFragment, String redirFragment, String expectedFragment, Boolean useRelativeRedirect) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http\tests\FunctionalTests\HttpClientHandlerTest.cs:line 876  --- End of stack trace from previous location where exception was thrown ---  ----- Inner Stack Trace -----     at System.Threading.Tasks.RendezvousAwaitable`1.GetResult() in D:\j\workspace\windows-TGrou---6368dffa\src\Common\src\System\Threading\Tasks\RendezvousAwaitable.cs:line 62     at System.Net.Http.WinHttpHandler.StartRequest(WinHttpRequestState state) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.Http.WinHttpHandler\src\System\Net\Http\WinHttpHandler.cs:line 863  ```"
27216	area-System.IO	Fix some compression tests	- Remove an unnecessary, flaky compression test  - Reduce brotli performance test time down to ~13 minutes. The problem looks to be that since i was using custom inneriterations the perf runner was going to the max time clock length each time, regardless of max iteration count. I switched my tests to use the Benchmark InnerIterations field and also artificially limited the max Compression iteration count to 100 instead of the usual 1000.    resolves https://github.com/dotnet/corefx/issues/26089  resolves https://github.com/dotnet/corefx/issues/26566    
27215	area-Infrastructure	[1.1] Stand up CI for new distro versions	With [the changes to the supported distro map for 1.1](https://github.com/dotnet/core/pull/1219/files#diff-1c27310d2cbb36ac217c96d508e238f5R33), we need to add CI runs for those distros so we don't ship something without test coverage.    Missing RIDS:  - Fedora26/Fedora27  - OpenSuse 42.3
27214	area-Infrastructure	Add RH / Centos 7.4 skus	@mmitche can you comment on the .groovy change?  SHould 7.4 be in outerloop, replace 7.3, or ?
27213	area-System.Net	make sure socket is blocking after accept() on macOS and BSD	This change will make sure new sockets after Accept() are in blocking mode on macOS.   See the notes from #27210.     It will also make them auto-close after exec to match Linux behavior.  I have no direct evidence that it is causing problems but now remote exec xUnit tests will inherit sockets from main process. 
27211	area-System.Net	[Regresion] Test Failure: System.Net.WebSockets.Client.Tests.CancelTest / CloseAsync_Cancel_Success	[System.Net.WebSockets.Client.Tests.CancelTest/CloseAsync_Cancel_Success(server: ws://corefx-net.cloudapp.net/WebSocket/EchoWebSocket.ashx)](https://mc.dot.net/#/user/caesar1995/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/8345c5e744278e6274af556e5bfd3957d7ab7a41/workItem/System.Net.WebSockets.Client.Tests/analysis/xunit/System.Net.WebSockets.Client.Tests.CancelTest~2FCloseAsync_Cancel_Success(server:%20ws:~2F~2Fcorefx-net.cloudapp.net~2FWebSocket~2FEchoWebSocket.ashx))    ```  Assert.Equal() Failure                ↓ (pos 4)  Expected: The 'System.Net.WebSockets.InternalClientWebS···  Actual:   The remote party closed the WebSocket connect···                ↑ (pos 4)  ```    ```  at System.Net.WebSockets.Client.Tests.ClientWebSocketTestBase.TestCancellation(Func`2 action, Uri server) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.WebSockets.Client\tests\ClientWebSocketTestBase.cs:line 81     at System.Net.WebSockets.Client.Tests.CancelTest.CloseAsync_Cancel_Success(Uri server) in D:\j\workspace\windows-TGrou---6368dffa\src\System.Net.WebSockets.Client\tests\CancelTest.cs:line 80  --- End of stack trace from previous location where exception was thrown ---  ```    Consistent repro on Windows.    Different from: #22904    ## Failure history    Build | OS  -- | --  20180214.01 | 2x OSX10.12 & 2x OSX10.13  20180214.02 | 4x Win10 & 2x Win7 & 2x OSX10.12 & 2x OSX10.13  20180215.01 | 10x Win10 & 4x Win8.1 & 2x OSX10.12 & 2x OSX10.13  20180215.04 | 10x Win10 & 2x Win8.1 & 4x Win7 & 2x OSX10.12 & 2x OSX10.13  20180216.01 | 5x Win10 & Win8.1 & OSX10.12 & OSX10.13  20180216.03 | 4x Win10 & 2x Win7 & Win8.1 & OSX10.12 & OSX10.13  
27209	area-System.Security	Normalize names of span inputs in crypto API	"The asymmetric types operate on either hashed input, or unprocessed input.  The existing API tends to call hashed input ""hash"" (or ""rgbHash"" for older API),  and unprocessed input ""data"" (or ""rgbData"").    This change modifies the new (ReadOnly)Span-based methods to use ""data""  and ""hash"" (as appropriate) instead of ""source"".  Particularly because the  hash-based methods in DSA do not contain the word Hash, making ""source""  for CreateSignature ambiguous.    In the cases where the existing parameter was named ""rgbHash"" (et al) the  ""rgb"" was dropped in the (ReadOnly)Span variant, including in the cases  where the (ReadOnly)Span variant is a proper overload."
27208	area-System.Net	Enable overriding of OpenSSL version	Also change the order of attempts to load the libssl.so so that  the version 1.0.2 is tried first to make it less probable that some  of our other dependencies end up loading conflicting version of libssl  on Debian 8 that has bumped the libssl soname to 1.0.2.    Closes #24891    
27207	area-System.Net	Error with PostAsync	"if you use this code in the .net core 1-2 then it gives an error with code 400. If you use the same code in .netframework, then everything passes successfully with code 200. Test on windows. Why error?    `  class Program      {          private const string ProjectID = ""61"";          private const string SubProjectId = ""0"";          private const string ShardId = ""0"";          private const string UserId = ""6918200764865613899"";          private const string UserId2 = ""7816681534978888932"";            private static string XML(string name, string username, string password)          {              return string.Format(""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><{0} ProjectId=\""{1}\"" SubProjectId=\""{2}\"" ShardId=\""{3}\"" UserId=\""{4}\"" UserId2=\""{5}\"" Username=\""{6}\"" Password=\""{7}\"" />"", name, ProjectID, SubProjectId, ShardId,              UserId, UserId2, username, password);          }            static void Main(string[] args)          {              HttpClient hc = new HttpClient();              ServicePointManager.ServerCertificateValidationCallback += (o, certificate, chain, errors) => true;              hc.DefaultRequestHeaders.Add(""User-Agent"", ""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.9 Downloader/12820 MailRuGameCenter/1282 Safari/537.36"");              hc.DefaultRequestHeaders.Add(""Accept"", ""*/*"");              var post = XML(""Auth"", ""artem.rizenkov@gmail.com"", ""XNCCFCWA"");              var result = hc.PostAsync(""https://authdl.mail.ru/sz.php?hint=Auth"", new StringContent(post, Encoding.UTF8, ""application/x-www-form-urlencoded"")).GetAwaiter().GetResult();          }      }`"
27206	area-Meta	Scrub error messages for missing arguments	It's really easy to have a resource string with substitutions but then in code forget to include arguments to fill them, e.g. https://github.com/dotnet/corefx/pull/27205.  We should scrub through the codebase fixing any such issues we find.  I expect 99% of cases would be easily automatable.
27204	area-System.Runtime	Use stackalloc for longer SystemDirectory paths	nit change, use stackalloc for longer SystemDirectory path < 260 chars.
27203	area-System.Net	Add SslStream test to validate options aren't mutated	While reading the code, I thought I saw the AuthenticateAsClientAsync options mutating the input options bag, which it shouldn't do.  I wrote a test for it, only to realize that I'd read the code incorrectly and it wasn't mutating things incorrectly.  But since I'd written the test, figured I might as well check it in.    cc: @Priya91 
27202	area-System.Text	Regex perf test for cache, refs #24425	Performance test for System.Text.RegularExpressions.Regex cache. Refs #24425 
27199	area-System.Net	Put method with Content on Linux is very slow	".Net core - Runtime v2.0.5  ``` csharp  using System;  using System.Diagnostics;  using System.Net.Http;  using System.Text;    namespace Test  {      class Program      {            static void Main(string[] args)          {              var httpClient = new HttpClient();                            // PUT              using (var request = new HttpRequestMessage(HttpMethod.Put, ""http://httpbin.org/put""))              {                  request.Content = new StringContent(""{\""test\"": 123 }"", Encoding.UTF8, ""application/json"");                    var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""PUT with content - "" + stopWatch.Elapsed);                  }              }                            using (var request = new HttpRequestMessage(HttpMethod.Put, ""http://httpbin.org/put""))              {                  var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""PUT without content - "" + stopWatch.Elapsed);                  }              }                            // POST              using (var request = new HttpRequestMessage(HttpMethod.Post, ""http://httpbin.org/post""))              {                  request.Content = new StringContent(""{\""test\"": 123 }"", Encoding.UTF8, ""application/json"");                                    var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""POST with content - "" + stopWatch.Elapsed);                  }              }                            using (var request = new HttpRequestMessage(HttpMethod.Post, ""http://httpbin.org/post""))              {                  var stopWatch = new Stopwatch();                  stopWatch.Start();                  using (var response = httpClient.SendAsync(request).Result)                  {                      stopWatch.Stop();                      Console.WriteLine(""POST without content - "" + stopWatch.Elapsed);                  }              }          }      }  }  ```    Result:  ### Ubuntu 16.04.3 LTS  ```  PUT with content - 00:00:02.5108530  PUT without content - 00:00:00.1544149  POST with content - 00:00:00.1640221  POST without content - 00:00:00.1710089  ```    ### Windows 10 Pro  ```  PUT with content - 00:00:00.4485657  PUT without content - 00:00:00.2165181  POST with content - 00:00:00.1581848  POST without content - 00:00:00.1617438  ```    Why is Put method with content on Linux so slow? I tried use other content types(Steam/Bytes) and they all works slowly also"
27198	area-System.Net	SocketsHttpHandler: improve chunked read handling	Today, we only use a single chunk per ReadAsync on the content body.  For example, if we receive a chunked response body like this:    ```  5\r\n  hello\r\n  5\r\n  world\r\n  0\r\n  ```    The first ReadAsync on the response stream will only get the first 5 bytes, even though more bytes are available in subsequent chunks.    We should improve this.  We should process as many chunks are available in the buffer before returning to the user.    Addditionally, we should consider doing a buffered read when we are close to the end of the chunk but haven't fully chunk yet.  For example, assume the initial read on the body causes us to read into the connection read buffer, receiving the following chunks, with the second one incomplete:    ```  5\r\n  hello\r\n  5\r\n  wo  ```    Per above, for the initial read, we should process both chunks and return 7 bytes.    For the next read, we should notice that we are close to the end of the chunk (3 bytes remaining) and do a buffered read on the connection.  This will allow us to process the rest of the current chunk and any additional chunks returned as part of the buffered read.    We should only do unbuffered reads when there are enough bytes remaining in the current chunk to satisfy the requested read size, unless the remaining chunk bytes won't fit in the connection read buffer, in which case we should do an unbuffered read up to the remaining chunk bytes.  
27195	area-System.IO	Use NtCreateFile on Win32	NtCreateFile allows passing in a base handle which makes opening child directories much faster. This cuts anywhere from 3-10% of the time off of a GetFiles() call.    It is significantly faster as it avoids normalization and path parsing overhead.    cc: @terrajobst, @danmosemsft 
27194	area-System.Net	Remove unsafe from Uri.HexEscape in favor of string.Create	Remove unsafe, avoid allocation and write directly into the string's memory. Benchmarking with 200k * 100 samples.    Relates to https://github.com/dotnet/corefx/pull/22872  Benchmark-Code: https://gist.github.com/ViktorHofer/43a61de5cd7d3e45b29e36e7a40f21c2    ``` ini    BenchmarkDotNet=v0.10.12.431-nightly, OS=Windows 10.0.17101  Intel Core i7-6600U CPU 2.60GHz (Skylake), 1 CPU, 4 logical cores and 2 physical cores  Frequency=2742189 Hz, Resolution=364.6722 ns, Timer=TSC    [Host] : .NET Core ? (Framework 4.6.26214.07), 64bit RyuJIT    Job=.NET Core 2.1 uri Runtime=Core  Toolchain=InProcessToolchain      ```    Before:    |    Method |     Mean |    Error |   StdDev |       Gen 0 | Allocated |  |---------- |---------:|---------:|---------:|------------:|----------:|  | HexEscape | 345.2 ms | 3.552 ms | 3.322 ms | 384500.0000 | 769.04 MB |    After:    |    Method |     Mean |    Error |   StdDev |       Gen 0 | Allocated |  |---------- |---------:|---------:|---------:|------------:|----------:|  | HexEscape | 328.6 ms | 5.602 ms | 4.966 ms | 384500.0000 | 769.04 MB |    cc @CIPop, @davidsh @danmosemsft   
27193	area-System.Memory	Add ROSpan ToLower and ToUpper string-like APIs with CultureInfo	Part of https://github.com/dotnet/corefx/issues/21395#issuecomment-359906138    - ToLower  - ToLowerInvariant  - ToUpper  - ToUpperInvariant    Depends on: https://github.com/dotnet/coreclr/pull/16379 and https://github.com/dotnet/coreclr/pull/16496    cc @jkotas, @stephentoub, @KrzysztofCwalina, @tarekgh, @JeremyKuhne, @joshfree 
27192	area-System.IO	No easy way to see if FileStream.Lock is supported	On OS X, FileStream.Lock throws a PlatfomNotSupportedException.    There's no easy way to know if a given Platform supports this apart from either hardcoding a list of Platforms, or trying to do it and catching the Exception.    Streams have methods like CanRead/CanWrite/CanSeek to allow developers to verify if something _could_ work before doing it.    I'd like to propose a new static property on FileStream named like `SupportsLocking` than can be cheaply checked, even before creating the FileStream (as the result of this might influence the `FileMode` etc. arguments).    A proposal is [in this commit](https://github.com/mstum/corefx/commit/a9dd5fe07e101807ea0a950ddf9edc9afc3d10ee).  
27191	area-System.Diagnostics	ArgumentList added to Process.StartInfo	Fixes https://github.com/dotnet/corefx/issues/23592    This PR contains tests for the change also
27187	area-System.Data	SNIPacket performance improvement	 In `SNIPacket`, memory for `_data` byte array is allocated and released everytime `SqlClient` receives packets from server. I made it to reuse existing byte array if new allocation size is the same as existing byte array length. In `TdsParserStateObjectManaged`, `SNIPacket` object is newly created everytime it sends packets to server. I made it to reuse existing `SNIPacket` object if it is already created previously.   This fix improves SqlClient (managedSNI) by around 1000 tps both in sync and async in TechEmpower benchmark testing.(https://github.com/aspnet/benchmarks)    
27185	area-System.IO	Ability to wait for a specific amount of data	"Often a protocol knows how much data it is waiting for (TLS frames being one example, size headered binary protocols being another).    Instead of ReadAsync() then you check the header and you see you don't have enough, so you ReadAsync() check if you have enough and continue doing loops until you have a complete frame. If you could do a ""ReadAsync(xxxxx)"" and it wouldn't return unless there was an error/complete or at least that amount of data was available it would solve extra looping in every downstream protocol    /cc @Drawaes "
27184	area-System.IO	Remove FileSystem unused common files	Also update .sln using UpdateVSConfigurations    cc: @jkotas 
27181	area-System.Net	Enable SendReceive_VaryingLengthBuffers_Success on Windows run	Have run the test 500 times on local Windows 10 machine. No failure. The previous stack trace #22845 is too old, cannot reflect which code path results in this failure.    Enable the test on Windows to see if it fails in CI. If it fails, I can investigate further.    Related: #23765
27179	area-System.Runtime	Need tests for 2.0<->2.1 binary serialization roundtripping	We currently test 2.1<->2.1 and 2.1<->NETFX. We also need to verify 2.1<->2.0 works.    If we add a new set of canned binary blobs, copy and pasted from the 2.0 servicing branch, we can test 2.0->2.1 with trivial extension of existing mechanisms. To test 2.1->2.0 we would need 2.0 on our test machines, and it isn't there. However it's sufficient to only do that occasionally by hand, and no more often than we update the 2.1 binary blobs, since 2.0 isn't changing.    @ViktorHofer can you formalize a plan and then someone can work on it?
27177	area-System.Data	NullReferenceException in SNITCPHandle.Send	While attempting to write to a table using a table valued parameters with MARS on I am getting a `NullReferenceException` and the following stack trace.    ```   System.NullReferenceException: Object reference not set to an instance of an object.     at System.Data.SqlClient.SNI.SNITCPHandle.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsConnection.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsHandle.SendControlPacket(SNISMUXFlags flags)     at System.Data.SqlClient.SNI.SNIMarsHandle.Dispose()     at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.Dispose()     at System.Data.SqlClient.TdsParserSessionPool.PutSession(TdsParserStateObject session)     at System.Data.SqlClient.SqlCommand.EndExecuteNonQuery(IAsyncResult asyncResult)     at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction,   ```    I am on running dotnet-runtime-2.0.5-linux-x64. 
27176	area-System.Net	Modify StreamContent to use default CopyToAsync buffer size when no size is provided	When creating `StreamContent`, users have the option to provide a buffer size or to use our default. This change attempts to improve performance by deferring to the default buffer size chosen in CopyToAsync rather than selecting the default ourselves.    The default buffer size in CopyToAsync is much larger than the default we chose in StreamContent. Deferring to that default greatly improves performance for uploads from slow stream sources like the file system. While it does add some cost for the initial allocation, the larger buffers are then pooled. Users are also still able to specify their own buffer size if they prefer not to use the default.    Some rough performance testing on my machine showed a ~20% decrease in the time it took HttpClient to upload a 20 MB file. That performance testing was based off the code in [this article](http://weblogs.thinktecture.com/pawel/2017/03/aspnet-core-webapi-performance.html), which was the source for the original issue.    Fixes: #24495
27173	area-System.Net	Fix ConnectAsync not throwing exception for already connected Socket	For issue https://github.com/dotnet/corefx/issues/22765. @geoffkizer @wfurt PTAL    The previously failing tests are now passing for me locally, running a full test suite to make sure this doesn't regress anything else.
27172	area-System.Net	CurlHandler allows invalid headers as long as they contain a colon	"WinHttpHandler, SocketsHttpHandler, and the netfx all disallow response headers like:    - ""   :    ""  - "":""  - ""\x1234: \x5678""    but CurlHandler allows them... as long as there's a colon it's happy."
27171	area-System.Net	Test failure: GetAsync_ManyDifferentRequestHeaders_SentCorrectly	"From the test:  ```  // Fails consistently with:  // System.InvalidCastException: ""Unable to cast object of type 'System.Object[]' to type 'System.Net.Http.WinHttpRequestState'""  // This appears to be due to adding the Expect: 100-continue header, which causes winhttp  // to fail with a ""The parameter is incorrect"" error, which in turn causes the request to  // be torn down, and in doing so, we this this during disposal of the SafeWinHttpHandle.  ```"
27169	area-Infrastructure	[2.1] Update Linux Versions for test execution	Port of https://github.com/dotnet/corefx/pull/26723 for the 2.1 branch.    Removals:  Fedora 25 - EOL 12/20/17  OpenSUSE 42.2 - EOL 01/26/18  RedHat 7.2 - EOL 11/30/17    Additions:  OpenSUSE 42.3  Fedora 27    It may be too late to merge this with the impending lockdown, but I wanted to get it ready just in case we want to squeeze it in. These EOL Helix images are being removed soon which will cause red CI for Preview1 without an update.    cc: @MattGal @joshfree 
27168	area-System.IO	Add IsFlush to Pipelines ReadResult	```csharp  public partial struct ReadResult  {      public bool IsFlush => (_resultFlags & ResultFlags.Flush) != 0;  }  ```  ```diff  [Flags]  internal enum ResultFlags : byte  {      None = 0x0,      Canceled = 0x1,      Completed = 0x2,  +   Flush = 0x4  }  ```  And set for calls to `FlushAsync()`    This allows the reader; if it chooses, to differentiate between a `WriteAsync()` and a `FlushAsync()` (if the writer differentiates)    **Use case**    If `WriteAsync` and `FlushAsync` are differentiated; a `TextWriter` type on a Pipeline does not need to maintain arrays of internal buffered data to have good performance but only needs a char (or two?) to maintain the outstanding surrogate pairs for encoding; the rest can be directly written to the Pipe.    If they don't differentiate then it can't write directly to the Pipe as writing a very small chunk followed by a flush in a loop would have an unacceptable performance degradation; so its back to maintaining internal arrays and then writing in a large chunk 😢     /cc @davidfowl @pakrym @stephentoub 
27167	area-System.Numerics	Add a special Numeric structure or INumeric Interface	_Intrinsic_ numeric types (byte, int, float, ….etc) are structures, so unfortunately, they have no base class that can gather all basic methods and operators!   So I suggest to add a special Numeric structure that can accept numeric values of any type. It should contain the value and the underling type of it, as Object class does. Numeric structure should have the basic arithmetic and logical operators. Or it can be an interace (say INumeric) that all numeric data types implement. This will not break any existing code.    Usage:   Numeric structure (or INumeric Inrerface) can be used in generic methods where T is expected to be a numeric type, to carry out the basic arithmetic and logical operators without writing a dozen if statements for each individual numeric type. Objects doesn't have the basic arithmetic and logical operators and have to be converted to numeric types to work with. For example, I tried to do this but failed:      ```    public struct Numeric      {          public object Value { get; set; }            public static Numeric operator +(Numeric n1, Numeric n2)          {              return (Numeric)(n1.Value + n2.Value);          }      }    ```  C# refuses n1.Value + n2.Value because it doesn't know how to add objects. Many if statements are needed to deal with different types of n1 and n2, regarding the larger type to use as the output type. This is a hell of code to something that should be easy and direct if there was a general numeric type that can contain any numeric type.    I face the same situation when I use the base Enum class in any method, because Enum can have any numeric type as an underling type!    I saw similar problem in the source code of Vector<T>, where tons of code lines are repeated just to cover all cases of each numeric type!    Note: If you add the numeric type, C# and VB.net should add a new constraint for generic parameters to be numerics.  where T: numeric  this means T can only be of type Numeric or any intrinsic numeric data types.    So, If this Numeric Type or INumeric Interface exists, one can write  ```  public static Enum SetFlag(Enum value, Enum flag)  {  var result = (Numeric)value | (Numeric)flag);  return (Enum)result;   }  ```    instead of:     ```  public static Enum SetFlags(Enum value, Enum flag)  {     if (Enum.GetUnderlyingType(value.GetType()) == typeof(byte))        return (Enum)(object)((byte)(object)value | (byte)(object)flag);       if (Enum.GetUnderlyingType(value.GetType()) == typeof(int))        return (Enum)(object)((int)(object)value | (int)(object)flag);      //     //     // etc  }  ```    and the same  when writing  generic types that deal with numeric data types only.  This can be extended based on this proposal https://github.com/dotnet/csharplang/issues/1233, I also suggest to add these interfaces:  numeric constraint.  IIntegral: for integer tyoes (byte, sbyte, int, uint, short, ushort, long, ulong)  IFloating: (float, double, decemal)  IValue: (numerics and dates).  ILetiral (Char and string).  IPrimitive (numerics, dates, char, string)    These Interfaces will make writting generics easier. IPerimative can help you   format or parsing or using + operation depending on where T: IPerimative.   Also it can be usefull when defining generic lists and dictionaries that can contain different values.  This will make them more specialized than using objects.  
27165	area-System.Diagnostics	Process.Start fails to execute properly	"_From @victorsample on February 15, 2018 14:44_  Using Visual Studio 2017 Community  Process.Start (<name>,<command_line)  fails to execute properly.  Trying to start Postgresql utility ""psql"" with command line ""-U aobadmin aobdb <C:\\Temp\\backupdb.sql"" does not execute properly.  Putting the execution in a "".bat"" file and building the command line in the bat file does work.  Apparently the form of the ""psql"" command is causing a problem.  _Copied from original issue: dotnet/coreclr#16399_"
27164	area-Infrastructure	more love from BenchmarkDotNet to CoreFX	"To tell the long story short: I implemented new toolchain for BenchmarkDotNet which generates a self-contained app which can target **ANY** CoreFX and CoreCLR builds. I combined the knowledge from dogfooding docs from [corefx](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/dogfooding.md) and [coreclr](https://github.com/dotnet/coreclr/blob/master/Documentation/workflow/UsingDotNetCli.md). dotnet cli does the job for us, it's just a matter of generating the right `.csproj` and `NuGet.config` files.    So you can now:    1. Benchmark local CoreFX builds  2. Benchmark nightly CoreFX builds  3. Benchmark local CoreCLR builds  4. Benchmark nightly CoreCLR builds  5. Mix them all together  6. Compare them  7. Use Disassembly Diagnoser to get the generated assembly code    To use the new feature you need to add our CI feed to your `NuGet.config` file and download version `0.10.12.433` or newer.    ```xml  <packageSources>    <add key=""bdn-CI"" value=""https://ci.appveyor.com/nuget/benchmarkdotnet"" />  </packageSources>  ```    Simple example:    ```cs  public class LocalCoreFxConfig : ManualConfig  {   public LocalCoreFxConfig()   {    Add(Job.ShortRun.With(CustomCoreClrToolchain.CreateForLocalCoreFxBuild(     @""C:\Projects\forks\corefx\bin\packages\Release"",     ""4.5.0-preview2-26313-0"")));      Add(DefaultConfig.Instance.GetExporters().ToArray());    Add(DefaultConfig.Instance.GetLoggers().ToArray());    Add(DefaultConfig.Instance.GetColumnProviders().ToArray());      Add(DisassemblyDiagnoser.Create(new DisassemblyDiagnoserConfig(printAsm: true, recursiveDepth: 2)));   }  }    class Program  {      static void Main(string[] args)           => BenchmarkSwitcher.FromAssembly(typeof(Program).GetTypeInfo().Assembly)              .Run(args, new LocalCoreFxConfig());  }  ```    Comparison:    ```cs  Add(Job.Default.With(CustomCoreClrToolchain.CreateForNightlyCoreFxBuild(""4.5.0-preview2-26214-01"", displayName: ""before my change"")));  Add(Job.Default.With(CustomCoreClrToolchain.CreateForNightlyCoreFxBuild(""4.5.0-preview2-26215-01"", displayName: ""after my change"")));  ```    Complex example:    ```  public class LocalCoreClrConfig : ManualConfig  {   public LocalCoreClrConfig()   {    Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""local builds"",      coreClrNuGetFeed: @""C:\Projects\forks\coreclr\bin\Product\Windows_NT.x64.Release\.nuget\pkg"",      coreClrVersion: ""2.1.0-preview2-26313-0"",      coreFxNuGetFeed: @""C:\Projects\forks\corefx\bin\packages\Release"",      coreFxVersion: ""4.5.0-preview2-26313-0"")    ));      Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""local coreclr myget corefx"",      coreClrNuGetFeed: @""C:\Projects\forks\coreclr\bin\Product\Windows_NT.x64.Release\.nuget\pkg"",      coreClrVersion: ""2.1.0-preview2-26313-0"",      coreFxNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreFxVersion: ""4.5.0-preview2-26215-01"")    ));      Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""myget coreclr local corefx"",      coreClrNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreClrVersion: ""2.1.0-preview2-26214-07"",      coreFxNuGetFeed: @""C:\Projects\forks\corefx\bin\packages\Release"",      coreFxVersion: ""4.5.0-preview2-26313-0"")    ));      Add(Job.ShortRun.With(     new CustomCoreClrToolchain(      ""myget builds"",      coreClrNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreClrVersion: ""2.1.0-preview2-26214-07"",      coreFxNuGetFeed: ""https://dotnet.myget.org/F/dotnet-core/api/v3/index.json"",      coreFxVersion: ""4.5.0-preview2-26215-01"")    ));      // the rest of the config..   }  }  ```    The output is going to contain exact CoreCLR and CoreFX versions used:    ```  BenchmarkDotNet=v0.10.12.20180215-develop, OS=Windows 10 Redstone 3 [1709, Fall Creators Update] (10.0.16299.192)  Intel Core i7-3687U CPU 2.10GHz (Ivy Bridge), 1 CPU, 4 logical cores and 2 physical cores  Frequency=2533308 Hz, Resolution=394.7408 ns, Timer=TSC  .NET Core SDK=2.1.300-preview2-008162    [Host]     : .NET Core 2.0.5 (CoreCLR 4.6.26020.03, CoreFX 4.6.26018.01), 64bit RyuJIT    Job-DHYYZE : .NET Core ? (CoreCLR 4.6.26313.0, CoreFX 4.6.26313.0), 64bit RyuJIT    Job-VGTPFY : .NET Core ? (CoreCLR 4.6.26313.0, CoreFX 4.6.26215.01), 64bit RyuJIT    Job-IYZFNW : .NET Core ? (CoreCLR 4.6.26214.07, CoreFX 4.6.26215.01), 64bit RyuJIT    Job-CTQFFQ : .NET Core ? (CoreCLR 4.6.26214.07, CoreFX 4.6.26313.0), 64bit RyuJIT  ```    Corresponding change in BenchmarkDotNet https://github.com/dotnet/BenchmarkDotNet/issues/651    @ViktorHofer @benaadams  @stephentoub @JosephTremoulet @maryamariyan @AndyAyersMS    I am open to feedback and willing to improve/change the feature!      "
27163	area-System.Net	Streamline SocketHttpHandler's ParseStatusLine validation	"For a typical status line like ""HTTP/1.1 200 OK"", cuts the time of ParseStatusLine almost in half.  Fixes https://github.com/dotnet/corefx/issues/26946    cc: @geoffkizer, @davidsh"
27162	area-System.IO	Remove Commit from PipeWriter	Commit was originally added because to allow an opportunistic pick up of data by the reader if it's already reading but it doesn't give any back pressure and can be a pit of failure in some cases. Originally, it was required when we had the requirement to Alloc() then Commit() but that requirement has been relaxed. On top of that the scenarios it was added for were a bit ill defined and we should remove it from the PipeWriter class.    /cc @benaadams @pakrym 
27161	area-System.Collections	ImmutableArray<byte> .Concat() includes a number of trailing zeroes not present in either argument	".NET Command Line Tools 2.0.2    Hello!  Found a weird problem today, been able to isolate it to the following code sample:    ```C#  using Newtonsoft.Json;  using System;  using System.Collections.Immutable;  using System.Linq;  using System.Text;    namespace ArraySanitycheck  {      class Program      {          public sealed class TestModel          {              public readonly string TestString;              public readonly int TestNumber;                public TestModel(string testString, int testNumber)              {                  TestString = testString;                  TestNumber = testNumber;              }          }            static void Main(string[] args)          {              var model = new TestModel(""Test String Content"", 268234);                var bytes = Encoding.UTF8.GetBytes($""Test Purpose\0{JsonConvert.SerializeObject(model)}"").ToImmutableArray();                var a = bytes.TakeWhile(i => i != 0);              var b = new byte[] { 0 };              var c = bytes.SkipWhile(i => i != 0).Skip(1).Take(5);              var d = new byte[] { 254 };              var e = bytes.SkipWhile(i => i != 0).Skip(6);              var concatenated = a.Concat(b).Concat(c).Concat(d).Concat(e);          }      }  }  ```    Set a breakpoint on the closing brace following `var concatenated...` and inspect `concatenated`.  It ends with approximately 15 zeroes.    Note that none of a, b, c, d or e include said zeroes.    Weirdly, attempting to write this data to the console (`Console.WriteLine(string.Join("", "", concatenated));`) does not include the zeroes either.      I suspect this may be an issue with how TakeWhile/SkipWhile perform ""slices"" of the underlying array (the length of the concatenated array is the same as the length of the sliced array)."
27158	area-System.IO	Made a few tweaks to pipelines	- Renamed the file containing the class IDuplexPipe  - Changed the default scheduler to use the ThreadPool if none was specified    Resolves #27157 
27157	area-System.IO	Default the pipe scheduler to the thread pool instead of inline	As a safe default for the 99% of people we should use the ThreadPool PipeScheduler instead of the Inline one. Running inline can cause unintended consequences (like deadlocks).
27155	area-System.IO	Use shared IO helper code from CoreCLR	Common IO source code helpers were copied to CoreCLR some time ago. Now that we are mirroring, we should switch to using the mirrored code. There has been quite a bit of drift, so it might take some effort.    src/Common/src/System/IO/PathInternal.Windows.cs -> src/Common/src/CoreLib/System/IO/PathInternal.Windows.cs    https://github.com/dotnet/corefx/pull/27150#discussion_r168377623  
27154	area-System.IO	Remove IDisposable from IDuplexPipe	The way you close a pipe is by completing both sides, and in the case of an IDuplexPipe, that's the input and output. There should be no dispose on the interface.    /cc @pakrym 
27153	area-System.IO	Current directory code duplicates Environment	Just call Environment.CurrentDirectory. Remove a number of P/Invokes  that are no longer in use.
27152	area-System.IO	NamedPipeClientStream does not work on Mac on Mono	I've been trying to port the compiler server to work on Mono, but I hit a serious snag: looks like named pipes don't support Mono. Here's the stack trace I get:    ```C#  --- PID=37064 TID=29 Ticks=-1794243353: Attempt to open named pipe 'angocke.F.HUdVQvyExeOVtpAXeTBkTcTRj'  --- PID=37064 TID=29 Ticks=-1794243341: Exception 'Error on creating named pipe: error code -1' occurred during 'Exception while connecting to process'. Stack trace:    at System.IO.Pipes.UnixNamedPipe.EnsureTargetFile (System.String name) [0x00029] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.UnixNamedPipeClient..ctor (System.IO.Pipes.NamedPipeClientStream owner, System.String serverName, System.String pipeName, System.IO.Pipes.PipeAccessRights desiredAccessRights, System.IO.Pipes.PipeOptions options, System.IO.HandleInheritability inheritability) [0x00080] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeAccessRights desiredAccessRights, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability) [0x0003b] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel, System.IO.HandleInheritability inheritability) [0x00009] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options, System.Security.Principal.TokenImpersonationLevel impersonationLevel) [0x00000] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at System.IO.Pipes.NamedPipeClientStream..ctor (System.String serverName, System.String pipeName, System.IO.Pipes.PipeDirection direction, System.IO.Pipes.PipeOptions options) [0x00000] in <f7cad77794fc4fa5bf9a33531f4b94b4>:0     at (wrapper remoting-invoke-with-check) System.IO.Pipes.NamedPipeClientStream..ctor(string,string,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)  ```    cc @jaredpar @stephentoub 
27151	area-System.Net	SocketsHttpHandler: refactor pool manager logic to enable SSL proxy tunneling support	Reorganize and enhance a bunch of pool management logic to enable SSL proxy tunneling support.    Note that proxy tunneling support isn't actually working yet; once Tomas gets his CONNECT PR in, this should enable the tunnel support.    Split into two commits; first is general reorganization to enable proxy tunneling, second is the code to specifically implement proxy tunneling via CONNECT.    @stephentoub @wfurt @davidsh
27150	area-System.IO	Cleaning out dead code	Also refactor Unix attribute handling a bit to be more consistent and  ensure that we don't make unnecessary addtional filesystem calls.
27148	area-System.Net	Fix race condition in PostAsyncExpect100Continue_RetryOnConnectionClosed_Success test	Fixes https://github.com/dotnet/corefx/issues/26760    cc: @geoffkizer 
27147	area-System.Diagnostics	BasicEventSourceTests failing in non elevated Windows runs	cc @brianrob     Not all our Windows test runs are elevated. Tests need to pass non elevated.    ```  BasicEventSourceTests.FuzzyTests.Test_Write_Fuzzy | 35 ms | 10  -- | -- | --  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_ComplexData_SelfDescribing_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_SelfDescribing_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_Manifest_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_ByteArray_Manifest_ETW | 0 ms | 10  BasicEventSourceTests.TestsWriteEvent.Test_WriteEvent_ByteArray_SelfDescribing_ETW | 0 ms | 10  BasicEventSourceTests.TestsWrite.Test_Write_T_ETW | 0 ms | 10  BasicEventSourceTests.TestsUserErrors.Test_BadEventSource_MismatchedIds  ```  eg   https://ci.dot.net/job/dotnet_corefx/job/master/job/windows_nt_debug/lastCompletedBuild/testReport/BasicEventSourceTests/FuzzyTests/Test_Write_Fuzzy/    They are all failing this way  ```  MESSAGE:  System.Exception : Need to be elevated to run.  +++++++++++++++++++  STACK TRACE:  at BasicEventSourceTests.EtwListener..ctor(String dataFileName, String sessionName) in D:\j\workspace\windows_nt_debug88592b53\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\Harness\Listeners.cs:line 170 at BasicEventSourceTests.FuzzyTests.Test_Write_Fuzzy() in D:\j\workspace\windows_nt_debug88592b53\src\System.Diagnostics.Tracing\tests\BasicEventSourceTest\FuzzyTests.cs:line 2751  ```    Fix seems to be to change all these to have `[ConditionalFact(nameof(IsProcessElevated))]`
27146	area-System.Text	Fix regression & enable ClearInitLocals in System.Text.RegularExpressions	I expect we will use more stackalloc in Regex over time therefore it makes sense to enable the switch now.    Relates to https://github.com/dotnet/corefx/pull/26993    Also fixes a bad code refactoring introduced by https://github.com/dotnet/corefx/pull/26877  
27145	area-System.Net	SocketsHttpHandler: Consider exposing a setting for Expect: 100-continue timeout	This is hardcoded to 1 second today.  We should consider exposing a setting to control this.    API proposal:    ```C#  public sealed class SocketsHttpHandler  {      public TimeSpan Expect100ContinueTimeout { get; set; } // Default is 1 second, as today  }  ```
27142	area-System.Data	Fix the name of the schema queue	Allow Schema queue to be detected from the database schema instead of assuming that the schema name is user name.  This approach is more portable, especially while running tests in a SQL docker installation. 
27139	area-System.Globalization	Fixing fa-IR neg. currency format for test GetCurrencyNegativePattern	Fixing fa-IR negative currency format for test GetCurrencyNegativePattern    Fixes #27022
27138	area-System.Globalization	Fixing fa-IR neg currency format for test GetCurrencyNegativePattern	Fixes #27022
27135	area-System.Net	Improve test coverage of SocketsHttpHandler	Used code coverage information to write targeted tests to cover various uncovered paths in SocketsHttpHandler.  Along the way fixed a variety of issues relating to throwing the wrong exception type, a stack overflow due to an unexpected recursive call, etc.    cc: @geoffkizer, @davidsh, @Priya91, @wfurt 
27134	area-System.IO	Change RootDirectory properties to span	Exposing string restricts the ability to change internals without introducing unnecessary allocations.
27133	area-System.IO	Add some pattern transformation tests	
27132	area-System.IO	WIP Move Pipes ACL types down	/cc @pjanotti     Just meant to test the changes I've made.  
27131	area-System.Threading	Remove a SignalAndWait test so that relevant change in CoreCLR can be brought into CoreFX	This test would fail after CoreCLR PR https://github.com/dotnet/coreclr/pull/16383, removing. https://github.com/dotnet/corefx/pull/27118 is the other part of this set of changes.
27130	area-Infrastructure	Point the Readme test badges to Helix runs	We should abandon the Jenkins testing infrastructure for innerloop/outerloop which is currently only being used for the badges and instead point our badges at daily/onPush helix runs (daily outerloop added in https://github.com/dotnet/corefx/pull/27129).    This greatly reduces the cost of updating our test OS versions and also makes the badges more accurately reflect our current build&test state.    Forked from https://github.com/dotnet/corefx/issues/27095  Depends on https://github.com/dotnet/core-eng/issues/1901    
27129	area-Infrastructure	Remove EOL OS's from Jenkins	- Removes some EOL OS's from our Jenkins Innerloop and Outerloop tests. These test definitions are triggerable on PR's but are not run by default. They are primarily used for daily/onPush runs that the badges on the corefx ReadMe.md can point to. By removing the definitions, we aren't losing any OS coverage since we run them on Helix. We are, however, losing the badge runs, so until we point the badges to the helix runs those are going to be outdated.  - Add a daily trigger to helix outerloop runs to replace the outerloop runs I'm removing from the Jenkins build/test.    resolves https://github.com/dotnet/corefx/issues/27095 for corefx/master.  resolves https://github.com/dotnet/corefx/issues/25252 for corefx/master    @mmitche @MattGal 
27127	area-System.Globalization	"Test failure: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")"	"Opened on behalf of @danmosemsft  The test `System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern/CurrencyNegativePattern_Get(locale: \""fa-IR\"")` has failed.  Assert.Contains() Failure     Not found: 1     In value:  Int32[] [8]          Stack Trace:          null Build : Master - 20180214.02 (Core Tests) Failing configurations: - Ubuntu.1804.Amd64-x64   - Release "
27126	area-System.Security	*CNG crypto algorithms missing from CNG library	I was looking at porting some code targeting desktop and came across SHA256Cng which I noticed was missing.    I did a diff and I see we're actually missing a number of Cng algorithms:    - MD5Cng  - SHA1Cng  - SHA256Cng  - SHA384Cng  - SHA512Cng    Moreover, I see quite a few more here: https://github.com/dotnet/corefx/blob/5edf66e4f35eca3ba409cb2e31154fb6a59bd4b3/src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/CryptoConfig.cs#L266-L284    Any reason we left these out? /cc @bartonjs 
27125	area-System.Text	Inline RegexCharClass code	Relates to https://github.com/dotnet/corefx/issues/27124    Code wasn't inlined before because the JIT function size exceeds threshold. IL size is 26 bytes.  Is there an easier way to tell for sure if a method is inlined? Currently I'm more or less guessing by looking at the generated JIT code and then I set a break point inside the function and if it not hit the code must be  inlined. (in Release mode of course)    cc @danmosemsft 
27124	area-System.Text	Regex code optimization candidates	The following items are potential candidates for code optimization which could result in an increased performance / reduced allocation. Based on perfview data and manual code review.    ### Time    - [x] Avoid additional iteration in op code generation (https://github.com/dotnet/corefx/pull/26877)  - [x] CharInClass (Internal & Recursive) (12.7% + 7.9% time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexCharClass.cs,787  comments from @danmosemsft: optimizing for common characters [A-Za-z] first? Bloom filter? It's doing a binary search over a short list  comments from myself: I think binary search shouldn't be an issue even for small classes. See this article: https://schani.wordpress.com/2010/04/30/linear-vs-binary-search/  - [x] Stringmatch (6.2 % time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexInterpreter.cs,256  Inline optimization for short case-sensitive strings (default).  `if (str[--c] != _culture.TextInfo.ToLower(runtext[--pos]))` check whether the characters are identical before doing ToLower  - [ ] SetOperator (5.4% time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexInterpreter.cs,148  Store a boolean whether either of those opcodes appear in the pattern at all. Reduces costs to a Boolean check only.  - [ ] Forwardcharnext (3.5% time spent exclusively)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexInterpreter.cs,249  The benchmark analyzed by perfview uses case sensitive comparison. I don't know why so much time is spent in this function when it only does two comparisons and an index operation.  - [ ] EnsureStorage (2.3% time spent exclusively, a lot of allocation is done here)  https://source.dot.net/#System.Text.RegularExpressions/System/Text/RegularExpressions/RegexRunner.cs,345  Though one of the functions is called Stack it's allocating arrays on the Heap. We should investigate how often these array sizes are increased and think about using stackalloc with Span/ValueListBuilder here.  - [x] Analyze failing inlinees  There are probably tons of other places where inline optimizations are applicable.  [System.Text.RegularExpression.Inline.xlsx](https://github.com/dotnet/corefx/files/1725897/System.Text.RegularExpression.Inline.xlsx)    ### Allocations    In regex-redux there are 3 huge sets of allocations that dominate the rest  - There is a cascade of replacements on a 50M character string, which creates 500MB of string garbage, presumably in LOH  ![image](https://user-images.githubusercontent.com/6385855/36403552-5d9591f0-159a-11e8-9dad-a0df6d71aeff.png)  - Its input file is read into a 100MB string. (double byte - 50MB file)  - There are 100MB of StringBuilder allocations.    Could we use spans or pooled buffers or otherwise avoid these huge temporary strings?      Help is appreciated. If someone wants to collaborate I can share my perfview zip. I will extend this list over time.     FYI @stephentoub @jkotas @joshfree @vancem 
27123	area-System.IO	Move System.IO.Pipelines to netstandard1.1	
27121	area-System.Drawing	Unable to create Bitmap from disk file on Linux	"Hi, I'm referencing CoreCompat.System.Drawing.v2 from a .NET Core project and doing the following:    Bitmap frame = new Bitmap($""{Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)}\\images\\image_0.bmp"")    I've checked that the path is correct at runtime. On Windows this works fine, but on Debian I am getting:    Unable to update the static FcBlanks: 0x0600  Unable to update the static FcBlanks: 0x0601  Unable to update the static FcBlanks: 0x0602  Unable to update the static FcBlanks: 0x0603  Unable to update the static FcBlanks: 0x06dd  Unable to update the static FcBlanks: 0x070f  Unable to update the static FcBlanks: 0x2028  Unable to update the static FcBlanks: 0x2029  Unable to update the static FcBlanks: 0xfff9  Unable to update the static FcBlanks: 0xfffa  Unable to update the static FcBlanks: 0xfffb    Unhandled Exception: System.ArgumentException: A null reference or invalid value was found [GDI+ status: InvalidParameter]  at System.Drawing.GDIPlus.CheckStatus(Status status)  at System.Drawing.Bitmap..ctor(String filename, Boolean useIcm)  at TestVideoConvert.TestVideoConvert.Create() in /home/osboxes/Downloads/Test2/TestVideoConvert/TestVideoConvert.cs:line 44  at ImageResizeNetCore.Program.Main(String[] args) in /home/osboxes/Downloads/Test2/ImageResizeNetCore/Program.cs:line 15    I've installed libgdiplus, but no luck.    Using System.Drawing.Common gives the following error:    Unhandled Exception: System.ArgumentException: Parameter is not valid.  at System.Drawing.Bitmap..ctor(String filename, Boolean useIcm)  at TestVideoConvert.TestVideoConvert.Create() in /home/osboxes/Downloads/Test2/TestVideoConvert/TestVideoConvert.cs:line 44  at ImageResizeNetCore.Program.Main(String[] args) in /home/osboxes/Downloads/Test2/ImageResizeNetCore/Program.cs:line 15    I've read somewhere that this could be due to the image size being too large, but in my case it's a 1920x1080 bmp so not out of the ordinary.    Here is a sample image to repro the issue: https://wallpaperscraft.com/image/stars_sky_shore_84534_1920x1080.jpg"
27120	area-System.Security	The RSA implementation fails to encrypt an empty byte array	- Steps to reproduce: run the following code on **Windows 10 or Mac OS X on .Net Core 2.0**:  ```C#            var key = RSA.Create();            var encrypted = key.Encrypt(new byte[0], RSAEncryptionPadding.Pkcs1);  ```  - Expected result:  A byte array that would be decrypted to an empty byte array.    - Actual result:  Exception on Windows 10:  ```  Internal.Cryptography.CryptoThrowHelper.WindowsCryptographicException    HResult=0x80090027    Message=The parameter is incorrect    Source=System.Security.Cryptography.Algorithms    StackTrace:     at System.Security.Cryptography.RSAImplementation.RSACng.EncryptOrDecrypt(SafeNCryptKeyHandle key, Byte[] input, AsymmetricPaddingMode paddingMode, Void* paddingInfo, EncryptOrDecryptAction encryptOrDecrypt)     at System.Security.Cryptography.RSAImplementation.RSACng.EncryptOrDecrypt(Byte[] data, RSAEncryptionPadding padding, EncryptOrDecryptAction encryptOrDecrypt)     at System.Security.Cryptography.RSAImplementation.RSACng.Encrypt(Byte[] data, RSAEncryptionPadding padding)     at ConsoleApp3.Program.Main(String[] args)  ```    On Mac OS X the exception is:  ```  System.ArgumentNullException: Value cannot be null.  Parameter name: source     at System.Runtime.InteropServices.Marshal.CopyToManaged(IntPtr source, Object destination, Int32 startIndex, Int32 length)     at Interop.CoreFoundation.CFGetData(SafeCFDataHandle cfData)     at Interop.AppleCrypto.ExecuteTransform(SecKeyTransform transform)     at Interop.AppleCrypto.RsaEncrypt(SafeSecKeyRefHandle publicKey, Byte[] data, RSAEncryptionPadding padding)     at System.Security.Cryptography.RSAImplementation.RSASecurityTransforms.Encrypt(Byte[] data, RSAEncryptionPadding padding)     at ConsoleApp3.Program.Main(String[] args)  ```    **Running the same code on .Net Framework 4.6.1 and on Core on Ubuntu returns the expected result.**    
27119	area-System.Net	DO NOT MERGE: simple connection reuse test	
27118	area-System.Threading	Enable WaitHandle.SignalAndWait tests on Unix	Depends on https://github.com/dotnet/coreclr/pull/16383  Fixes https://github.com/dotnet/coreclr/issues/10441
27116	area-System.Diagnostics	Remove USE_ETW Compilation Constant from System.Diagnostics.Tracing.Tests	It may be possible to remove USE_ETW and just mark the tests as Windows only.  We should see if this is possible to simplify the test code.
27114	area-System.Runtime	"Test under ""System.Tests.EnvironmentTests"" failed with ""System.ArgumentOutOfRangeException"""	The test System.Tests.EnvironmentTests.WorkingSet_Valid has failed.    MESSAGE:  System.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.  +++++++++++++++++++  STACK TRACE:  at System.Environment.get_WorkingSet() at System.Tests.EnvironmentTests.WorkingSet_Valid() in /mnt/resource/j/workspace/dotnet_corefx/master/rhel7.2_release/src/System.Runtime.Extensions/tests/System/EnvironmentTests.cs:line 180    Details: https://ci.dot.net/job/dotnet_corefx/job/master/job/rhel7.2_release/5053/testReport/System.Tests/EnvironmentTests/WorkingSet_Valid/
27113	area-System.Net	Fix failing authentication test cases on different httpclienthandlers.	Search for issue number in code.
27109	area-System.Console	Adding support for ncurses 6.1 TERM format on System.Console	Fixes #26966    cc: @stephentoub @ianhays     ncurses 6.1 introduced a new magic number in their header, that if read, then its contents should be parsed as 32-bit integers instead of 16-bit integers. These changes will add support for ncurses6.1.
27106	area-System.Diagnostics	Fix ETW EventCounter Tests and Manifest_Write_T Tests	Both of these tests fail because the event names are incorrect.  They both use TraceLogging but have statically defined events as well which results in them having a manifest produced as well (because they are not strictly marked as SelfDescribing EventSources).  TraceEvent loads the manifests correctly but does not load the templates for the TraceLogging events.    Template loading appears to be specific to TraceLog but swapping in TraceLog results in a bunch of other failures.  This should be investigated so that these tests can be re-activated.
27104	area-Microsoft.CSharp	Remove more orphaned code in Microsoft.CSharp	Missed a couple in #26491 but @ericstj rerunning the diffs in #17905 found them.
27103	area-System.Security	Add FixedTimeEquals and other crypto helper routines as public API	Fixes #10749.  
27102	area-System.IO	API tweaks to match latest updates to spec	Add a few new tests    See #25873     cc: @terrajobst, @danmosemsft 
27101	area-System.Memory	Add an option to return finalizable versions of ArrayMemoryPoolBuffer from MemoryPool	
27100	area-Infrastructure	Update inbox data for UAP 6	A number of assemblies shipped inbox in `release/uwp6.0` (10.0.15138), but have been rev'ed in master and ship ref-assms that would apply to UAP.    This will cause a ref-def mismatch if we don't include the implementation assembly for UAP in the package.    We need to make sure to update the packageIndex in to account for this and then ensure that the current packages validate cleanly (either rolling back reference assembly versions or adding UAP runtime assemblies to fix errors).    This **must** be done before we ship the packages again.  Ideally it's done before we ship a preview of the packages, so that we don't break folks if we decide to roll-back reference assembly versions.    /cc @joperezr @weshaggard 
27098	area-System.Runtime	.NET 4.7 -  '\0' char in String causes GetHashCode to ignore remainder -- but on x64 only	"@vsfeedback commented on [Mon Feb 12 2018](https://github.com/dotnet/roslyn/issues/24780)  The `GetHashCode(...)` function for the **ordinal** `String` comparisons In **.NET 4.7** has a grossly different behavior between running on **x86** versus **x64**. Note: ***I am not talking about the different hash code values, per-platform***, since these are intended as opaque -- rather, the issue here is a ***semantic difference*** in runtime behavior between the two platforms.    On **x86**, the full length of a `String` is always hashed, regardless of any `\0` characters.    On **x64**, the hashing terminates at the first `\0` character.    This is trivial to demonstrate:     var h1 = ""\0AAAAAAAAA"".GetHashCode();   var h2 = ""\0BBBBBBBBBBBB"".GetHashCode();   var h3 = ""\0CCCCCCCCCCCCCCC"".GetHashCode();       // x64 results:   //  0x162a16fe   //  0x162a16fe   //  0x162a16fe       // x86 results:   //  0x07b801bc   //  0x048e22a3   //  0x21e2037d    As shown above, this affects the `GetHashCode` instance virtual method (overriden by the `String` type), as well as two other **.NET**-provided techniques for obtaining an ordinal-based `String` hash code: `StringComparer.Ordinal.GetHashCode` and also `CultureInfo.CurrentCulture.CompareInfo.GetHashCode` (when using `CompareOptions.Ordinal`). These results are summarized below:    <pre>  -------------------------- x86 --------------------------  &quot;\0AAAAAAAAA&quot;  s.GetHashCode     0x07b801bc  StringComparer.Ordinal.GetHashCode  0x07b801bc  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x07b801bc      &quot;\0BBBBBBBBBBBB&quot;  s.GetHashCode     0x00001505  StringComparer.Ordinal.GetHashCode  0x00001505  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x00001505      &quot;\0CCCCCCCCCCCCCCC&quot;  s.GetHashCode     0x21e2037d  StringComparer.Ordinal.GetHashCode  0x21e2037d  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x21e2037d          -------------------------- x64 --------------------------  &quot;\0AAAAAAAAA&quot;  s.GetHashCode     0x162a16fe  StringComparer.Ordinal.GetHashCode  0x162a16fe  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x162a16fe      &quot;\0BBBBBBBBBBBB&quot;  s.GetHashCode     0x162a16fe  StringComparer.Ordinal.GetHashCode  0x162a16fe  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x162a16fe      &quot;\0CCCCCCCCCCCCCCC&quot;  s.GetHashCode     0x162a16fe  StringComparer.Ordinal.GetHashCode  0x162a16fe  CompareInfo.GetHashCode/CompareOptions.Ordinal 0x162a16fe  </pre>    While I do realize that theoretical practice deems hash codes purely advisory, in practice applications will be designed to expect that hash code collisions are rare. Being able to trivially produce an infinite number of identical hashes, at will -- such as one can do via &quot;\0A&quot;, &quot;\0B&quot;, &quot;\0C&quot;, &quot;\012345...&quot;  (on **x64** all of these give the same hash code as above, `0x162a16fe`)-- is neither in the spirit of hashing nor accepted/expected common practice.    Worse, this only happens on the  x86 platform and not x64, which could cause considerable loss of design and development effort, if such proceeded based on a false impression of consistent behavior.    _This issue has been moved from https://developercommunity.visualstudio.com/content/problem/196675/net-47-0-char-in-string-causes-gethashcode-to-igno-1.html  VSTS ticketId: 565715_  _These are the original issue comments:_    Glenn Slayden on 2/9/2018, 06:39 PM (2 days ago): <p>I should also mention that the **x64** version of `String.GetHashCode(...)` in fact makes no reference to the string's length whatsoever, neither to incorporate that value into the hash, nor to determine how many characters to compute the hash code for. Instead, the x64 code ***just scans the string forward until it hits the first '\0' char***. If there are no embedded nulls, then it will scan to the end, where the **CLR** ensures there will always be an extra `\0` char (that is not included in the `Length`).</p><p>Thus, by ignoring the stored length of the string, the x64 code *takes a critical dependency* on that zero-terminating char being present. If that `\0` gets corrupted somehow, the failure mode is severe, since that loop can immediately scan off the end of the string into unrelated memory areas. </p><p>Since the **x86** version refers to the stored string length to determine how many chars to hash--it might seem like that code doesn't have the same problem, and it's true that it's not as fatal, as follows:</p><p>The x86 code does actually take a ***different kind of dependency*** on the zero terminator, namely, that loop is written such that the 16-bit terminator value itself is `XORed` into the returned hash value whenever the two lowest bits of the input string length are equal to `0b_00000011 == 0x03`. For that operation to have no effect, the terminator must be zero (since `xor` with zero is a `nop`.)  So if the terminator somehow becomes corrupted, the returned hash code value will be affected, but there won't likely be an immediate `AccessViolationException` (as with the x64 case).</p>    _These are the original issue solutions:_  (no solutions)  ---  @Joe4evr commented on [Mon Feb 12 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365098562)  Curious, does this also repro for the `OrdinalIgnoreCase` variants?  ---  @jcouv commented on [Mon Feb 12 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365161086)  @AlexGhiondea Could you help route? It feels like either a runtime or a BCL issue on desktop.  ---  @glenn-slayden commented on [Tue Feb 13 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365363366)  Yes, it should be BCL. The problem is with MSIL code that exists in the `String.GetHashCode` function in mscorlib.dll. The difference between **x64** and **x86** is due to there being different mscorlib.dll builds for each.    ---  @glenn-slayden commented on [Tue Feb 13 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365370873)  @jinujoseph  The 'Area-IDE' tag doesn't sound right; as I mentioned the problem is with runtime code in the Base Class Library.  ---  @jcouv commented on [Tue Feb 13 2018](https://github.com/dotnet/roslyn/issues/24780#issuecomment-365374965)  I'll move the issue over to corefx  "
27097	area-System.IO	Consider adding MemoryMarshal.TryGetArray/MemoryList(ReadOnlySequence)	We shouldn't interpret `SequencePositions` outside `ReadOnlySequence` but pipelines need to get IMemoryList reference and indexes out of SequencePositions received in `Advance`    I'm proposing to add the following API's:  ```C#  public static partial class MemoryMarshal  {      bool TryGetArray<T>(ReadOnlySequence<T> sequence, out ArraySegment<T> array);        bool TryGetOwnedMemory<T>(ReadOnlySequence<T> sequence, out OwnedMemory<T> ownedMemory, out int start, out int length);        bool TryGetMemory<T>(ReadOnlySequence<T> sequence, out ReadOnlyMemory<T> readOnlyMemory);        bool TryGetMemoryList<T>(ReadOnlySequence<T> sequence, out IMemoryList<T> startSegment, out int startIndex, out IMemoryList<T> endSegment, out int endIndex);  }  ```    /cc @davidfowl @KrzysztofCwalina 
27095	area-Infrastructure	Update RIDs used in test execution	This issue is to track updating the RIDs being used in CoreFX Jenkins testing.    Related: https://github.com/dotnet/corefx/issues/25252, https://github.com/dotnet/wcf/issues/2553, https://github.com/dotnet/core-eng/issues/2450    Current CoreFX Master Jenkins Linux RIDS:  - RHEL7.2  - CentOS7.1  - Fedora24  - Debian8.4  - Ubuntu 14.04, 16.04, 16.10    Target RIDS:  - RHEL7.4  - CentOS7.4  - Fedora27  - Debian9.0  - Ubuntu 14.04, 16.04, 18.04      Update 2/6/2018:  Remaining work:  - /+ RHEL7.4  - /+ CentOS7.4
27094	area-System.Memory	Move Span APIs that allow shipping visibility checks to MemoryMarshal	"`BinaryPrimitives.TryReadMachineEndian` or `MemoryExtensions.AsBytes` APIs are an inherently ""unsafe"" API in the sense that they allow bypassing visibility checks. They allow creating structs with invalid content that can lead to unexpected behaviors. An example of such unexpected behavior is buffer overrun described in https://github.com/dotnet/coreclr/issues/16336 .    Should we move these APIs to System.Runtime.InteropServices.MemoryMarshal to be together with other unsafe APIs that one has to be very careful about using?"
27092	area-System.Threading	Thread affinity isn't inherited from the process affinity in Linux	"Ubuntu 16.04, dotnet 2.1.4    ````  [DllImport(""libc"", EntryPoint = ""syscall"", SetLastError = true)]  public static extern long syscall0(long number);    [DllImport(""libc"", SetLastError = true)]  public static extern int sched_getaffinity(int pid, IntPtr cpusetsize, ref ulong cpuset);     Process.GetCurrentProcess().ProcessorAffinity = new IntPtr(6);    new Thread(() => {       var sysGetId =  (RuntimeInformation.OSArchitecture == Architecture.Arm ||               RuntimeInformation.OSArchitecture == Architecture.Arm64)                  ? 224                  : 186;       var threadId = syscall0(sysGetId);                ulong affinity;        var result = Syscall.sched_getaffinity((int)threadId, new IntPtr(sizeof(ulong)), ref            affinity);         // affinity == 255, expected == 6  });    ````    In Windows a new thread inherits the process affinity.  Need to call sched_setaffinity after thread creation."
27090	area-System.Net	Add a generic SASL API with GSSAPI support	Provide GSSAPI mechanism support, for Kerberos V5 authentication.    Sample SASL client methods: `EvaluateChallenge()`, `Wrap()`, `UnWrap()`.
27089	area-System.Data	Revert Managed SNI usage flag	Revert the managed SNI flag which was incorrectly toggled in https://github.com/dotnet/corefx/pull/27010
27088	area-System.Net	reorganize and cleanup some LoopbackServer code	"As we are writing more and more LoopbackServer based tests, seems like a good time to do a bit of refactoring and simplification.    Several related changes:  (1) Move nonessential code out of LoopbackServer itself. E.g. the websocket test code and the ""transfer"" code. These are only used by a couple very specific tests, and don't actually need to be in LoopbackServer.  (2) Simplify a few things that are awkward today. For example, the Options object gets passed in to several different places and used in different ways. I changed it to only be passed in to CreateServerAsync. Another example: the callback you pass to AcceptSocketAsync always has to return a Task<List>, even though many uses don't care about this and just pass null.  (3) Add the Connection object, which makes the callback from AcceptSocketAsync (now AcceptConnectionAsync) cleaner. Today you have to have four params on the callback, even though you often only care about one or two. Connection just encapsulates these args into a single object, and allows you to easily discover and call instance methods on this object.  (4) Rename some core methods to make them more descriptive.  (5) Fix usage in tests to reflect the updates.    @stephentoub @davidsh @Priya91 @wfurt     "
27086	area-Infrastructure	Tests are not waiting on child processes when run	Some tests use RemoteInvoke to launch child processes. Generally they should call Dispose() on the RemoteInvokeHandle that returns in order to WaitForExit on the process. If they forget, execution will continue and any assertion failure (or other unhandled exception) in the child process will not prevent the test passing. Eg.,:  ```    Running tests... Start time: 22:29:13.23    xUnit.net console test runner (64-bit .NET Core)    Copyright (C) 2014 Outercurve Foundation.      Discovering: System.Text.RegularExpressions.Tests    Discovered:  System.Text.RegularExpressions.Tests    Starting:    System.Text.RegularExpressions.Tests      Unhandled Exception: Xunit.Sdk.ThrowsException: Assert.Throws() Failure    Expected: typeof(System.ArgumentException)    Actual:   typeof(System.TypeInitializationException): The type initializer for 'System.Text.RegularExpressions.Regex'     threw an exception.       at Xunit.Assert.Throws(Type exceptionType, Exception exception) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.a    ssert\Asserts\ExceptionAsserts.cs:line 143       at Xunit.Assert.Throws[T](Func`1 testCode) in C:\BuildAgent\work\cb37e9acf085d108\src\xunit.assert\Asserts\Excepti    onAsserts.cs:line 36       at System.Text.RegularExpressions.Tests.RegexConstructorTests.<>c.<StaticCtor_InvalidTimeoutObject_ExceptionThrown    >b__3_0() in C:\git\corefx\src\System.Text.RegularExpressions\tests\Regex.Ctor.Tests.cs:line 85    --- End of stack trace from previous location where exception was thrown ---       at RemoteExecutorConsoleApp.Program.Main(String[] args) in C:\git\corefx\src\Common\tests\System\Diagnostics\Remot    eExecutorConsoleApp\RemoteExecutorConsoleApp.cs:line 92    Finished:    System.Text.RegularExpressions.Tests      === TEST EXECUTION SUMMARY ===       System.Text.RegularExpressions.Tests  Total: 802, Errors: 0, Failed: 0, Skipped: 0, Time: 2.042s    Finished running tests.  End time=22:29:15.68, Exit code = 0  ```    This behavior is slightly obscured when running on a dev machine, as runtests.cmd is generally wrapped inside MSBuild, and MSBuild, after WaitforExit hsa returned on the process it launched, will then wait indefinitely for the console output streams to reach EOF. Those do not return until the grandchild remote processes have exited (@JeremyKuhne @stephentoub  I'm unclear why this is - do they automatically duplicate the console handles from the test process which is MSBuild's direct child?). When the grandchild fails in this situation, the exception will appear in the console, but the test will already have succeeded and be counted as such.    When Helix runs the tests using runtest.cmd directly, MSBuild is not involved so if Dispose() is forgotten there is no wait on the grandchildren and they are completely ignored. https://github.com/dotnet/corefx/pull/26543#issuecomment-365021333 is an example.    We should add a finalizer to RemoteInvokeHandle which will mean that at least some waiting will occur on those child processes: they still wont fail the test, as it's too late, but their console output is more likely to show up in the log. (XUnit does not do WaitForPendingFinalizers so I figure if they don't complete within X seconds - I think 40 seconds - of the XUnit process completing, the output still won't show up.)    @stephentoub  does this sound like the best we can do?
27085	area-System.IO	Tests For GetFullPath(string path,string basePath)	Fixes #25535  Implementation PR:- dotnet/coreclr#15579  Previous PR:- https://github.com/dotnet/corefx/pull/25994    The Commits upto 4466ed9 this are already been reviewed in the previous PR.   This PR has been opened beacause of large number of merge conflicts in the other PR due to span overload tests.  
27084	area-System.Linq	Linq support on Task	I think we should add linq support for `IEnumerable<Task<T>>` and  `Task<Enumerable<T>>` with the same set of function as linq, let the lambda could return `Task<T>` and become unwrap while seamlessly handle both combination of `IEnumerable<Task<T>>` and  `Task<Enumerable<T>>`    ```C#  using System.Linq.Async;  ////  // Enumerable of Task can Select, Where and any function supporterd by Linq  Task<IEnumerable<string>> texts = GetTask();  IEnumerable<Task<string[]>> tasks = task.ToEnumerablesTasks().Where((text) => text.Length > 10).Select((text) => text.Split(':'));  string[][] splits = await Task.WhenAll(tasks);    // Enumerable has extension method SelectAsync to create Enumerable of Task from lambda  IEnumerable<Task<DBObject>> tasks2 = splits.SelectAsync(async(split) => await QuerySomeDB(split[0],split[1]));  var result = await Task.WhenAll(tasks2);  ```    If possible I would also want to have https://www.nuget.org/packages/System.Interactive.Async/ in BCL
27082	area-System.Drawing	Added DCS Tests for System.Drawing Types	This adds DataContractSerializer tests for basic types in System.Drawing   -See issue #25729 for a list of types    cc: @huanwu, @safern     Resolves #25729 
27079	area-System.Net	Change HTTP default request version to HTTP/2	Close: #23394
27077	area-System.Net	Log when an insecure Https -> Http redirect is blocked	.NET Core does not allow insecure redirects from https to http, but .NET Framework does. Developers have had some trouble diagnosing the issue when they run into this difference. This change adds logging to help developers track down what is going on.    Fixes: #24577 
27075	area-System.Data	ADO.NET: Database-independent way to generate parameter placeholders	In theory, parameter placeholders [are an entirely database-specific details](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types#working-with-parameter-placeholders) - there is no way to write a single SQL containing parameters, and then execute it on different databases.    In practice, it seems that most ADO.NET have aligned on the `@name` convention. This is quite a problem, since for databases which don't support it natively, the ADO.NET provider must parse and replace the `@name` placeholder with the one accepted by the database. For example, PostgreSQL uses positional placeholders ($1, $2...), which by the way are also specific to individual statements in a batch (parameters are per-statement, not per-batch).    We could design an API where the provider would generate the placeholder. This could be as simple as adding a `Placeholder` property on DbParameter, which each provider would implement as necessary. The user would then interpolate the placeholder into the CommandText. For positional placeholders, the logic would typically calculate the placeholder as the DbParameter is inserted into a DbParameterCollection, whereas for named placeholders the `ParameterName` would be returned.    PS Parameter placeholder translation is one of two things forcing Npgsql to parse the CommandText - the other is the lack of a proper batching API (#3688), which requires to parse and split on semicolons.
27074	area-System.Data	SqlClient: Avoid boxing values as much as possible	We believe that for hot paths while consuming data readers this could have a significant enough impact. For parameters, there is already https://github.com/dotnet/corefx/issues/8955 about adding a generic API in ADO.NET base provider model that then can be implemented by SqlClient.    cc @saurabh500 @geleems @roji @ajcvickers 
27073	area-System.Globalization	Fixing test CurrencyNegativePattern_Get() on distro Ubuntu18.04	From class/project System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern    Fixes #27022    CC: @danmosemsft @krwq 
27069	area-System.Net	Cache SslClientAuthenticationOptions on SocketsHttpHandler pool	For the common case, we can just use a singleton cached instance with settings computed when the pool is created.  Only if it's accessed via HttpClientHandler with a server certificate callback do we need to still create an instance per request, in order to wrap the delegate to provide the expected semantics.    cc: @geoffkizer, @davidsh, @Priya91, @wfurt 
27068	area-System.Net	Fix SocketsHttpHandler connection pool accounting for dropped connections	When MaxConnectionsPerServer is set to anything other than int.MaxValue, the SocketsHttpHandler pool keeps track of the number of connections handed out, and this count is updated when a connection is disposed.  But if a response stream isn't disposed of, resulting in the connection never being disposed of, the count may never be updated.  This fix adds an HttpConnection derived type that simply adds a finalizer, making it pay-for-play when MaxConnectionsPerServer is set to something other than the default.    cc: @geoffkizer, @davidsh, @Priya91, @wfurt 
27067	area-System.Net	WinHttpHandler/CurlHandler hangs or fails when connection pooling and connection dropped	See GetAsync_DontDisposeResponse_EventuallyUnblocksWaiters test.  It sets MaxConnectionsPerServer to 1, and then proceeds to issue a ResponseHeadersRead request but drops the response object without disposing it.  It then creates a second request to the same server, and that request is never processed.
27066	area-System.Net	Make Sockets behavior consistent in the face of cancellation	See discussion at https://github.com/dotnet/corefx/pull/27029/files/a137bbf42598202f999ead31d92754613145c849#r167445914    cc: @geoffkizer 
27065	area-System.Net	Test failure: GetAsync_CancelPendingRequests_DoesntCancelReadAsyncOnResponseStream	CurlHandler incorrectly maintains a registration with the CancellationToken passed in to SendAsync for the duration of the whole operation, including processing of the response body, even if HttpCompletionOption.ResponseHeadersRead is used.  That means that HttpClient.CancelAllPending will cancel such operations.  It should unregister from that token once it completes the Task returned from SendAsync.
27064	area-System.Net	Test failure: MaxConnectionsPerServer_WaitingConnectionsAreCancelable	"The MaxConnectionsPerServer_WaitingConnectionsAreCancelable test fails on WinHttpHandler in a strange manner.  It throws a ""The server returned an invalid or unrecognized response"" WinHttpException while receiving/parsing the response headers. This happens while handling the response from the first request, but doesn't happen if the last request is removed.  It almost as if there's some state that bleeds between the requests."
27063	area-System.Net	Test failure: PostAsync_CancelDuringRequestContentSend_TaskCanceledQuickly	WinHttpHandler has some cancellation support, but it doesn't appear to support cancellation during content send, e.g. if cancellation is requested and the server never sends back response headers.  netfx has the same issue.
27062	area-System.Threading	My idea:Async and Task function pipeline	I design a Lambda  Expression:Task<IEnumerable> WhereAsync.  If you used WhereAsync,You Lambda Expression pipline such as WhereAsync().SelectAsync() be broken.    So If c# has a async Lambda Expression pipline,We used async and Task our function pipline don't be broken.
27061	area-System.Net	Fix HttpClientMiniStress.UnreadResponseMessage_Collectible test	The async state machine was holding a reference to the response content object.    Fixes https://github.com/dotnet/corefx/issues/27058  cc: @geoffkizer 
27059	area-System.Net	Fix HttpClientMiniStressTest	Fix an issue with response generation.    Also, disable the UnreadResponseMessage_Collectible test, which is failing currently for reasons that are not obvious to me.     @stephentoub @davidsh 
27058	area-System.Net	HttpClientMiniStress: consistent failure in UnreadResponseMessage_Collectible	The Assert waiting for the response object to be collected fails.    Happens for both WinHttpHandler and SocketsHttpHandler.
27057	area-System.Data	Nested Transactions failing - Enlisting in Ambient transactions is not supported	"Nested transaction are broken in System.Data.SqlClient 4.4.2 (latest stable release)    They work with System.Data.Sqlclient 4.3.1.    The error is Enlisting in Ambient transactions is not supported.    Below is sample code which works in 4.3.1 and now boken in 4.4.2        ```c#  var option = new TransactionOptions  {      IsolationLevel = IsolationLevel.ReadCommitted,      Timeout = TimeSpan.FromSeconds(60)  };  using (var scopeOuter = new TransactionScope(TransactionScopeOption.Required, option))  {      using (var conn = new SqlConnection(connectionString))      {          using (SqlCommand cmd = conn.CreateCommand())          {              cmd.CommandText = ""INSERT INTO Data(Code, FirstName) VALUES('A-100', 'Mr. A');"";              cmd.Connection.Open();              cmd.ExecuteNonQuery();          }      }      using (var scopeInner = new TransactionScope(TransactionScopeOption.Required, option))      {          using (var conn = new SqlConnection(connectionString))          {              using (SqlCommand cmd = conn.CreateCommand())              {                  cmd.CommandText = ""INSERT INTO Data(Code, FirstName) VALUES('B-100', 'Mr. B');"";                  cmd.Connection.Open();                  cmd.ExecuteNonQuery();              }          }          scopeInner.Complete();      }      scopeOuter.Complete();  }  ```    [EDIT] Update code formatting and syntax highlighting by @karelz"
27056	area-System.Threading	[Question] Per thread finalizer	Regarding https://github.com/dotnet/corefx/issues/26992,  I have a question.    @davidfowl    > No, ReleaseHandle happens when the safe handle is disposed explicitly or finalized.    If we cannot dispose the safe handle explicitly, only finalizer can release it. In this situation, is there a way that the safe handle is disposed by finalizer in the same thread as initialization?
27055	area-System.Net	DO NOT MERGE: test some refactoring of LoopbackServer	
27052	area-System.IO	Switch from using SafeHandle for Unix enumeration	This cuts enumeration time by a further 5-10%. For filtered results it also has 5%+ impact on memory allocation.    For an unfiltered GetFiles of 66K files (CoreFX enlistment with some builds) GC count went from 5|2|1 to 4|1|0 (gen 0|1|2).    On top of earlier changes we're seeing 20-30% time improvements and 40-60% improvements in memory usage over 2.0.     Also tweak an assert to validate embedded nulls only when we try to filter them out.
27051	area-System.Runtime	Tests for StringComparer Create(culture, CompareOptions) overload	Related to dotnet/corefx#395  Implementation PR- https://github.com/dotnet/coreclr/pull/16334  
27049	area-System.IO	API Proposal: Add Path API that validates that path cross-plat safe	"Essentially this is similar to the Windows `Path.GetInvalidFileNameChars()`.    ``` c#  namespace System.IO  {      public static class Path      {          public static bool IsPortableFileName(ReadonlySpan<char> name);      }  }  ```    This API will not accept    - invalid Windows filename characters (control chars, `<`, `>`, `:`, `""`, `/`, `\`, `|`)  - starting or ending spaces ` `  - ending periods `.`  - starting dashes `-`  - normal globbing characters `[`, `]`, `*`, `?`    See related #27048  "
27048	area-System.IO	API Proposal: Path API that exposes the Portable Filename Character Set	``` c#  namespace System.IO  {      public static class Path      {          public static bool IsPortablePosixFileName(ReadonlySpan<char> name);      }  }  ```    Returns true if the name only has characters from the defined set. The set is small `[A-Z][a-z][0-9]._-`. The spec also discourages `-` as the first character, which we should also check.    POSIX.1-2008  3.282 Portable Filename Character Set  http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282    http://www.boost.org/doc/libs/1_66_0/libs/filesystem/doc/portability_guide.htm    See related #27049
27047	area-System.IO	Add more IO tests around problematic filename characters	While we have some tests, it would be good to add more with problematic filenames and filename characters.    Here is a good article describing difficult names for reference:    https://www.dwheeler.com/essays/fixing-unix-linux-filenames.html    Creating, copying, moving, enumerating, deleting, etc.    Trailing spaces and periods on Windows are legal, but difficult to create and access. Calling Win32 APIs with paths normally will strip these. The exception is when prepended with `\\?\`.  We purposefully do not handle creating these unless you use `\\?\` as creating these sort of paths frequently breaks apps.  We should (and do) handle finding them via `GetFiles`, etc. and handle manipulating them with the *Info classes. We currently don't allow opening them directly from a path string unless you use `\\?\`. 
27046	area-System.Runtime	System.Runtime.InteropServices bad calling convention when returning unions on linux	"Hi,    When using Interop on linux my app crashed. I managed to narrow it down to the cas where the native method returns an union.  When I looked at the core dump with gdb it seemed to me that the calling convention is wrong. I was expecting to see the pointer to the string in register RDI but it contained garbage.    I do not know if it is correct behavior or a bug, but I would appreciate if somebody has the time to take a look.    Thanks !    ## Environnent    * Fedora 26 linux 4.14.14-200.fc26.x86_64  * dotnet 2.1.4  * gcc (GCC) 7.2.1 20170915    ## C++ shared object code                #include <iostream>              #include <string>                extern ""C""              union Union {                  int64_t f2;              };                extern ""C""              Union crash(const char* msg) {                  std::cerr << __PRETTY_FUNCTION__ << "" start"" << std::endl;                  std::cerr << __PRETTY_FUNCTION__ << "" ptr "" << (void*)msg << std::endl;                  std::cerr << __PRETTY_FUNCTION__ << "" arg "" << msg << std::endl;                  return Union{};              }    Compiled using : `g++ -Wall -fPIC -std=c++11 -shared -O0 -g -o libcrash.so crash.cpp`    ## C# console app code            using System;          using System.Runtime.InteropServices;                    namespace question          {              [StructLayout(LayoutKind.Explicit)]              public struct Union {                  [FieldOffset(0)]                  Int64 field2;              }                        class Program              {                  [DllImport(""libcrash.so"")]                  static extern Union crash(string s);                            static void Main(string[] args)                  {                      crash(""boom !!"");                      Console.WriteLine(""All Done"");                  }              }          }"
27045	area-Infrastructure	ILLink initlocals custom step fails when building on Unix	Adding  ```XML  <ILLinkClearInitLocals>true</ILLinkClearInitLocals>  ```  to a corefx .csproj works fine on Windows but fails to build on Linux with the error:  ```  IL Linker  Error: Step type 'ILLink.CustomSteps.ClearInitLocalsStep,ILLink.CustomSteps' not found.  illink [options] -x|-a|-i file     --about             About the IL Linker     --version           Print the version number of the IL Linker     --skip-unresolved   Ignore unresolved types and methods (true or false)     --dump-dependencies Dump dependencies for the linker analyzer tool     -out                Specify the output directory, default to `output'     -c                  Action on the core assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to skip     -u                  Action on the user assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to link     -p                  Action per assembly     -s                  Add a new step to the pipeline.     -t                  Keep assemblies in which only type forwarders are referenced.     -d                  Add a directory where the linker will look for assemblies     -b                  Generate debug symbols for each linked module (true or false)     -g                  Generate a new unique guid for each linked module (true or false)     -v                  Keep memebers needed by debugger attributes (true or false)     -h                  List of reflection heuristics separated with a comma.                         Supported heuristics:                           LdtokenTypeMethods:   mark all methods of types whose token is used                                                 in an ldtoken instruction                           LdtokenTypeFields:    mark all fields of types whose token is used                                                 in an ldtoken instruction                           InstanceConstructors: mark all instance constructors in types                                                 where an instance member has been marked but                                                 none of the instance constructors have been marked     -l                  List of i18n assemblies to copy to the output directory                           separated with a comma: none,all,cjk,mideast,other,rare,west                           default is all     -x                  Link from an XML descriptor     -a                  Link from a list of assemblies     -r                  Link from a list of assemblies using roots visible outside of the assembly     -i                  Link from an mono-api-info descriptor     -z                  Include default preservations (true or false), default to true    Command execution failed with exit code 1.  ```  cc: @sbomer, @JosephTremoulet
27044	area-Microsoft.CSharp	Make many helpers, factories and tables static in Microsoft.CSharp	Microsoft.CSharp has several objects that are heavily used throughout the library that have circular dependencies on each other, as well as several other classes depending on them. Use of them hence requires either a field in each object that will use them, or to follow chains of such fields. Prior to #25191 it was necessary for them to be instances so that they could be replaced with new versions. This no longer being necessary it's possible to make them all static.    At the same time, the related `RuntimeBinder`, `ExpressionBinder` and `BindingContext` classes are relatively heavy, mostly due to these dependencies. They are hence created once unless a cast must be attempted with a different `BindingContext`, and `BindingContext`'s state is overwritten for each operation. Removing these dependencies makes these very light, allowing them to be `readonly struct`s that are created for each operation.    * Have `TypeArray` in charge of the empty `TypeArray` singleton    * Make `TypeArray` allocation a static responsibility of `TypeArray`    * Remove some orphaned members.    Mostly `BSYMMGR`-returning members that had been used to allocate `TypeArrays`    * Make members static where possible.    Those that can already be easily made static. Includes removing some members that this makes no longer necessary.    * Remove unused parameters    Since some are of the types we'll be making static, and such parameters will have to go anyway.    * Make `TypeTable` static    And more conventional names within `TypeTable`.    * More `TypeManager` state & methods to static    * Make `SYMTBL.Key` an immutable struct.    * `SYMTBL` completely static and renamed to `SymbolStore`    More conventional name, and doesn't clash with other `SymbolTable` class.    * `GetWinRTCollectionIfacesAll` to property.    * `SymFactory` static class.    * Remove `PredefinedTypes._symbolManager` field    Only used in assertion.    * Remove assert comparison with this in `GetAggregate`    Assert is the only reason to not be static, allows a cascade of more changes to static.    * Make `InternalsVisibleTo` check static.    * Make cycle of instance methods static    Take quite a large set of methods which must be instance because of cyclic instance dependencies, and make them all static.    Removes dependency in `AggregateSymbol` and `NullableType` on `TypeManager` instances.    * Replace `GetAggTypeSym` with virtual method on `CType`.    Merged with existing `GetAts` on `NullableType`. Comment says this would be nice, and indeed it would, and its easy now.    * Make those members that can now be static, static.    * Remove orphaned members and fields.    * `PredefinedMembers` entirely static.    * Remove `UserStringBuilder.m_buildingInProgress`    Only used in asserts, just assert on whether `m_strBuilder` is null or not.    Also rename `m_strBuilder` to `_strBuilder` to be more conventional.    * Favour returning over out in `UserStringBuilder`    And favour clearing `StringBuilder` over creating another.    * Make `ErrorHandling` completely static.    Creating `UserStringBuilder` instances on demand.    * `TypeManager` static.    * Make `CNullable` methods static and merge directly into `ExpressionBinder`    Don't cache method and property, as they're already cached.    * Don't preload types.    Either they'll be loaded soon anyway, or else it's a wasted effort.    * Move `CompareTypes` into Better.cs    * Remove `BSYMMGR.LookupAggMember`    Just call into `SymbolStore.LookupSym`    * Move `LookupNextSym` logic into `Symbol`    * Remove `BSYMMGR` and `GlobalSymbolContext`    No longer any use.    * `ExprFactory` static    * `SymbolLoader` static    * `CSemanticChecker` static    * Don't pre-emptively load `System.Object`    Will be loaded as a base of the first type encountered anyway.    * `SymbolTable` static    * More methods can be made static    * Remove orphaned method.    * Move methods for getting `MemberInfo`s from expressions into those expressions    * Replace `ExpressionTreeCallRewriter.GetObject` with virtual property in `Expr`    * `TypeArray` tidy-up.    * Pass `ExpressionBinder` to operator delegates, and make them static.    Allows array to be created once statically, rather than on each instance construction.    * Create `RuntimeBinder`, `ExpressionBinder` and `BindingContext` per operation    These are now very lightweight, so it's simpler to create them anew each time rather than overwriting the values in the `BindingContext`.    * Make `RuntimeBinder`, `ExpressionBinder` and `BindingContext` structs    No need to allocate on the heap.    * Remove `AggregateDeclaration`    We only ever care about the `AggregateSymbol` it relates to.    (The two aren't really separate in dynamic code, where there aren't really declarations).    * Remove `IsChecked` and `CallingContext` from C# binders.    Now not used as they are passed to `RuntimeBinder` on construction, except for `CallingContext` remaining in `CSharpInvokeMemberBinder` for use in deferring.    * Make `RecordBinOpSigFromArgs` static.    A last member that can be made static.    CC @VSadov @OmarTawfik 
27043	area-System.Net	Tweak CurlHandler SSL not supported messages to be more helpful	cc: @bartonjs, @karelz 
27040	area-System.Net	Add SocketsHttpHandler check for TransferEncodingChunked w/o Content	Fixes https://github.com/dotnet/corefx/issues/27031  cc: @geoffkizer, @davidsh
27038	area-System.IO	DirectoryEntry.GetName assert failure on macOS	https://mc.dot.net/#/user/stephentoub/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/a137bbf42598202f999ead31d92754613145c849/workItem/System.IO.Tests/wilogs  ```  2018-02-10 19:37:45,431: INFO: proc(54): run_and_log_output: Output: Discovering: System.IO.Tests  2018-02-10 19:37:45,666: INFO: proc(54): run_and_log_output: Output: Discovered:  System.IO.Tests  2018-02-10 19:37:45,821: INFO: proc(54): run_and_log_output: Output: Starting:    System.IO.Tests  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output: should not have embedded nulls  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output:   2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output:    at Interop.Sys.DirectoryEntry.GetName(Span`1 buffer)  2018-02-10 19:37:46,351: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEntry.get_FileName()  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerableFactory.<>c__DisplayClass5_0.<UserEntries>b__1(FileSystemEntry& entry)  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerable`1.DelegateEnumerator.ShouldIncludeEntry(FileSystemEntry& entry)  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()  2018-02-10 19:37:46,352: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectoryInternal(DirectoryInfo directory, Boolean recursive, Boolean throwOnTopLevelDirectoryNotFound)  2018-02-10 19:37:46,353: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  2018-02-10 19:37:46,353: INFO: proc(54): run_and_log_output: Output:    at System.IO.Directory.Delete(String path, Boolean recursive)  2018-02-10 19:37:46,353: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose(Boolean disposing) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 66  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 57  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.Aggregate(Action action)  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource)  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.Run(Action code)  2018-02-10 19:37:46,354: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,355: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,356: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,357: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTheoryTestCaseRunner.RunTestAsync()  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,358: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTheoryTestCaseRunner.RunTestAsync()  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,359: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,360: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,361: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,362: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,363: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.InnerInvoke() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 610  2018-02-10 19:37:46,364: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,364: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,364: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteEntry() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2361  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs:line 694  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state)  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()  2018-02-10 19:37:46,365: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _)  2018-02-10 19:37:46,366: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,366: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,366: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output: Assertion Failed  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output: should not have embedded nulls  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:   2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at Interop.Sys.DirectoryEntry.GetName(Span`1 buffer)  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEntry.get_FileName()  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerableFactory.<>c__DisplayClass5_0.<UserEntries>b__1(FileSystemEntry& entry)  2018-02-10 19:37:46,367: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerable`1.DelegateEnumerator.ShouldIncludeEntry(FileSystemEntry& entry)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.Enumeration.FileSystemEnumerator`1.MoveNext()  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectoryInternal(DirectoryInfo directory, Boolean recursive, Boolean throwOnTopLevelDirectoryNotFound)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.Directory.Delete(String path, Boolean recursive)  2018-02-10 19:37:46,368: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose(Boolean disposing) in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 66  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at System.IO.FileCleanupTestBase.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx-TGroup_netcoreapp+CGroup_Debug+AGroup_x64+TestOuter_false_prtest/src/CoreFx.Private.TestUtilities/src/System/IO/FileCleanupTestBase.cs:line 57  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExecutionTimer.Aggregate(Action action)  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at ReflectionAbstractionExtensions.DisposeTestClass(ITest test, Object testClass, IMessageBus messageBus, ExecutionTimer timer, CancellationTokenSource cancellationTokenSource)  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.Run(Action code)  2018-02-10 19:37:46,369: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestInvoker`1.<RunAsync>b__45_0()  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,370: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)  2018-02-10 19:37:46,371: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestRunner`1.RunAsync()  2018-02-10 19:37:46,372: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCaseRunner`1.RunAsync()  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,373: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestMethodRunner`1.RunAsync()  2018-02-10 19:37:46,374: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestClassRunner`1.RunAsync()  2018-02-10 19:37:46,375: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 922  2018-02-10 19:37:46,376: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.TestCollectionRunner`1.RunAsync()  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task`1.InnerInvoke() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/future.cs:line 610  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,377: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteEntry() in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2361  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs:line 694  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state)  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,378: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc()  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _)  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) in /Users/buildagent/agent/_work/382/s/src/mscorlib/src/System/Threading/Tasks/Task.cs:line 2440  2018-02-10 19:37:46,379: INFO: proc(54): run_and_log_output: Output:    at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /Users/buildagent/agent/_work/382/s/src/mscorlib/shared/System/Threading/ExecutionContext.cs:line 166  2018-02-10 19:37:49,001: INFO: proc(54): run_and_log_output: Output: /Users/dotnet-bot/dotnetbuild/work/78908c4b-3dbb-4ac4-8785-16df253cd217/Work/5674dd81-888b-46a4-9774-b7b0136812e8/Unzip/RunTests.sh: line 87: 64175 Abort trap: 6     ```  cc: @JeremyKuhne 
27037	area-System.Net	Test failed: System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest / UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException	Failed tests: System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest.UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException    Details:  https://ci.dot.net/job/dotnet_corefx/job/master/job/outerloop_netcoreapp_win7_release/398/testReport/System.Net.Http.WinHttpHandlerFunctional.Tests/ServerCertificateTest/UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException/    Configuration: Outerloop_netcoreapp_win7_debug    MESSAGE:  Assert.Equal() Failure\r\nExpected: 12175\r\nActual: 12017  +++++++++++++++++++  STACK TRACE:  at System.Net.Http.WinHttpHandlerFunctional.Tests.ServerCertificateTest.UseCallback_CallbackReturnsFailure_ThrowsInnerSecurityFailureException() --- End of stack trace from previous location where exception was thrown ---
27036	area-System.Drawing	Disable drawing test for distro Ubuntu18.04	Related to #27021
27035	area-System.Globalization	Fixing test CurrencyNegativePattern_Get() on distro Ubuntu 18.04	Fixing test CurrencyNegativePattern_Get() on newly added distro Ubuntu 18.04    From class/project System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern    Fixes #27022
27033	area-System.Numerics	[Feature-Request] N-bit sized int and floating point types	@hamarb123 commented on [Fri Feb 09 2018](https://github.com/dotnet/standard/issues/647)  I propose we should be able to have N-bit sized int and floating point types.  Here is how it could work:    Obviously we already have the following:  - int 1 / uint 1 (bool)  - uint 8 (byte)  - int 8 (sbyte)  - uint 16, 32 and 64 (ushort, uint and ulong)  - int 16, 32 and 64 (short, int and long)  - float 32 (single)  - float 64 (double)    But what about the following:  - (u)int 2 (2 bits)  - (u)int 4 (4 bits)  - (u)int 128 (128 bits)  - (u)int 256 (256 bits)  - (u)int 2^n (2^n bits)  - (float 1 makes no sense but you could still add it)  - float 2 (2 bits)  - float 4 (4 bits)  - float 8 (8 bits)  - float 16 (16 bits)  - float 128 (128 bits)  - float 256 (256 bits)  - float 2^n (2^n bits)    The classes could be called the following:  For integers: `intj` where j is a power of 2 for a j bit integer  For unsigned integers: `uintj` where j is a power of 2 for a j bit unsigned integer  For floats: `floatj` where j is a power of 2 for a j bit float  And there could be special names for floats between `float8` and `float256` ranging from `quarter`, `half`, `single` (already in .NET), `double` (already in .NET), `quadruple`, `octuple`    Why do I need this in my beloved c#?  1. Because it will give you more/less precise floats to use  2. It will give you more integers to use  3. There are no good floating point (bigger than double) libraries out there that do not just use System.Math which reduces it to double precision anyway    Won't this ruin my IDE with millions of different type names?  1. Not if you make a maximum for the types (say 1024) or make it so that the IDE can have the ability to only show you some (say up to 1024) then it will not give you millions of types suggested  
27031	area-System.Net	SocketsHttpHandler should check for transfer encoding chunked without content	WinHttpHandler and CurlHandler both fail if TransferEncodingChunked is set to true but request.Content is null.  SocketsHttpHandler should check for that, too.  And there should be a test.
27029	area-System.Net	Enable SocketsHttpHandler cancellation support	This change significantly improves the cancellation support in SocketsHttpHandler.  Previously we were passing the CancellationToken around to every method, eventually bottoming out in calls to the underlying Stream which then ends up passing them down to the underlying Socket.  But today Socket's support for cancellation is minimal, only doing up-front checks; if cancellation is requested during the socket operation rather than before, the request will be ignored.  Since HttpClient implements features like timeouts on top of cancellation support, it's important to do better than this.    The change implements cancellation by registering with the CancellationToken to dispose of the connection.  This will cause any reads/writes to wake up.  We then translate resulting exceptions into cancellation exceptions.  When in the main SendAsync method, we register once for the whole body of the operation until the point that we're returning the response message.  For individual operations on the response content stream, we register per operation; however, when feasible we try to avoid the registration costs by only registering if operations don't complete synchronously.  We also account for the case that on Unix, closing the connection may result in read operations waking up not with an exception but rather with EOF, which we also need to translate into cancellation when appropriate.    Along the way I cleaned up a few minor issues as well.    I also added a bunch of cancellation-related tests:  - Test cancellation occurring while sending request content  - Test cancellation occurring while receiving response headers  - Test cancellation occurring while receiving response body and using a buffered operation  - Test that all of the above are triggerable with CancellationTokenSource.Cancel, HttpClient.CancelPendingRequests, and HttpClient.Dispose  - Test cancellation occurring while receiving response body and using an unbuffered operation, either a ReadAsync or CopyToAsync on the response stream  - Test that a CancelPendingRequests doesn't affect unbuffered operations on the response stream    There are deficiencies here in the existing handlers, and tests have been selectively disabled accordingly.  SocketsHttpHandler passes now for all of them.  I will open issues for the non-netfx issues and include the corresponding numbers in comments before merging.    cc: @geoffkizer, @Priya91, @wfurt, @davidsh   Fixes https://github.com/dotnet/corefx/issues/23131  Fixes https://github.com/dotnet/corefx/issues/23141
27024	area-System.IO	Fix *Info classes for Unix when opened on root	Regression I introduced. Created a new inner loop test that will catch this in the future.    Fixes #26988
27023	area-System.Net	[Ubuntu18.04] Tests failed: System.Net.Http.Functional.Tests.HttpClientHandler_SslProtocols_Test / *	Failed on newly added distro Ubuntu18.04    Affected tests:  * `GetAsync_AllowedSSLVersionDiffersFromServer_ThrowsException` (Tls11/Tls12 args)  * `GetAsync_DisallowTls10_AllowTls11_AllowTls12`    Test failure:  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.Security.Authentication.AuthenticationException): A call to SSPI failed, see inner exception.    at System.Net.Security.SslState.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 973  at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 820  at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 791  at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 960  at System.Net.Security.SslState.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 863  at System.Net.Security.SslState.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 820  at System.Net.Security.SslState.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 791  at System.Net.Security.SslState.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 960  at System.Net.Security.SslState.PartialFrameCallback(AsyncProtocolRequest asyncRequest) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 1094  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Security.SslState.EndProcessAuthentication(IAsyncResult result) in /root/corefx-1372297/src/System.Net.Security/src/System/Net/Security/SslState.cs:line 709  at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization) in /root/coreclr/src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs:line 533  --- End of stack trace from previous location where exception was thrown ---  at System.Net.Test.Common.LoopbackServer.AcceptSocketAsync(Socket server, Func`5 funcAsync, Options options) in /root/corefx-1372297/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 165  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/10 | 20180210.01 | 3x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Net.Http.Functional.Tests)  2/10 | 20180210.03 | 3x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.Net.Http.Functional.Tests)  
27022	area-System.Globalization	[Ubuntu18.04] Test failed: System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern / CurrencyNegativePattern_Get	Fails on newly added distro: Ubuntu 18.04    Failure:  ```  Assert.Contains() Failure  Not found: 1  In value:  Int32[] [8]  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/10 | 20180210.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Globalization.Tests/analysis/xunit/System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern~2FCurrencyNegativePattern_Get(locale:%20%5C%22fa-IR%5C%22))  2/10 | 20180210.03 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.Globalization.Tests/analysis/xunit/System.Globalization.Tests.NumberFormatInfoCurrencyNegativePattern~2FCurrencyNegativePattern_Get(locale:%20%5C%22fa-IR%5C%22))  
27021	area-System.Drawing	[Ubuntu18.04] Test failed: System.Drawing.Imaging.Tests.EncoderParameterTests / Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException	Failed on newly added distro Ubuntu 18.04. Related to #24274 (failing in the past)    Failure:  ```  Assert.Throws() Failure  Expected: typeof(System.OutOfMemoryException)  Actual:   (No exception was thrown)    at System.Drawing.Imaging.Tests.EncoderParameterTests.Ctor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(Int32 numberOfValues) in /root/corefx-1371172/src/System.Drawing.Common/tests/Imaging/EncoderParameterTests.cs:line 327  ```    ## History of failure    Day | Build | Details  -- | -- | --  2/10 | 20180210.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  2/10 | 20180210.03 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  2/12 | 20180212.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180212.01/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  2/12 | 20180212.01 | [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180212.05/workItem/System.Drawing.Common.Tests/analysis/xunit/System.Drawing.Imaging.Tests.EncoderParameterTests~2FCtor_Encoder_NegativeNumberOfValues_Type_Value_OutOfMemoryException(numberOfValues:%20-1))  
27019	area-System.IO	Fix Unix enumeration	For non-trivial recursive enumerations we were running out of file descriptors. Stop creating them when we queue pending subdirectories and only create when we dequeue.
27018	area-System.Collections	Test failure in CI: System.Collections.Tests.LinkedList_Generic_Tests_string/AddBefore_LLNode_LLNode	https://mc.dot.net/#/user/tmat/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Frelease~2F2.1~2F/test~2Ffunctional~2Fcli~2F/76c888d757bf1e9d470ceb4b93d3d00b5be5d4ec/workItem/System.Collections.Tests/analysis/xunit/System.Collections.Tests.LinkedList_Generic_Tests_string~2FAddBefore_LLNode_LLNode
27015	area-System.Net	Not a good idea to specify charset parameter for some content types in StringContent	https://github.com/dotnet/corefx/blob/6bf1e7c3032d3c24d5a41bbd880549ef4a8de2da/src/System.Net.Http/src/System/Net/Http/StringContent.cs#L31    I was building a `StringContent` object with a `mediaType` of `application/json`. That media type does not specify a `charset` parameter, which is unconditionally added in this class.    Adding this parameter automatically is probably not a good idea. I'm not sure the right fix, I just know that `Content-Type: application/json; charset=utf-8` will choke some parsers.
27014	area-System.Numerics	Add Vector.Narrow and Vector.Widen overloads to cast elemnts values between float and int, and between double and long	I suggest to add these two overloads to the Vector.Narrow method:  ```  Vector<int> Vector.Narrow(Vector<float>, ConversionType ct)  Vector<long> Vector.Narrow(Vector<double> ConversionType ct)    ```  where:  ```  enum ConversionType  {      Floor,        // Apply Mathf.Floor      Ceiling,     // Apply Mathf.Ceiling      Truncate,   // Apply Mathf.Truncate      Round       // Apply Mathf.Round  }    ```  Example:  ```  var v1 = new Vector<float>({-1.4, 2.1, -3.9, 4.3});  var v2 = Vector.Narrow(v1, ConversionType.Floor);        // <-2, 2, -4, 4>    ```  By the way, It will be nice if we can use foreach to iterate Vector<T> elemnts using foreach..  I think more mathematical methods (like the ones in the Math class) can be added to the Vector class. The fact that the Vector<T> is immutable, demands some long codes to construct a new version containing individual results. Or, is there a chance to make the Indexer read-write?        
27013	area-System.IO	Implement Snappy compression algorithm 	The Brotli algorithm has been recently implemented. I think that it would be nice to see a similar implementation for Snappy: it is very popular, cross platform, open source, with a lower compression but faster than Brotli.
27011	area-System.Data	Bump System.Data.SqlClient assembly version to 4.4.0.	Fixes https://github.com/dotnet/corefx/issues/26142
27010	area-System.Data	Restrict the Long Running option to MARS	This PR partially address https://github.com/dotnet/corefx/issues/19836     Restrict the usage of Long Running while reading data off the stream, to cases which are reading data for MARS enabled connections. This is to restrict the side effects of LongRunning continuation option.     Validated with EF tests.   
27008	area-System.Net	DO NOT MERGE: test multiple cookie header handling	
27007	area-System.IO	Add System.IO.Pipelines API	94% coverage of new API    Please check csprojes, configuration.props and other infrastructure files. It's my first time adding a package to corefx so I may have done some mistakes there.
27006	area-System.Net	System.Net.Security.SslStream throws exception while running EF tests	"While running EF tests on Ubuntu against netcoreapp2.1 an exception is thrown     ```  Failed   Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.Deletes_database(async: False, open: True, ambientTransaction: False)  Error Message:   System.NotSupportedException :  The WriteAsync method cannot be called when another write operation is pending.  Stack Trace:     at System.Net.Security.SslStreamInternal.WriteAsyncInternal[TWriteAdapter](TWriteAdapter writeAdapter, ReadOnlyMemory`1 buffer)     at System.Net.Security.SslStreamInternal.Write(Byte[] buffer, Int32 offset, Int32 count)     at System.Net.Security.SslStream.Write(Byte[] buffer, Int32 offset, Int32 count)     at System.Data.SqlClient.SNI.SNITCPHandle.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsConnection.Send(SNIPacket packet)     at System.Data.SqlClient.SNI.SNIMarsHandle.SendControlPacket(SNISMUXFlags flags)     at System.Data.SqlClient.SNI.SNIMarsHandle.Dispose()     at System.Data.SqlClient.SNI.TdsParserStateObjectManaged.Dispose()     at System.Data.SqlClient.TdsParser.Disconnect()     at System.Data.SqlClient.SqlInternalConnectionTds.Dispose()     at System.Data.ProviderBase.DbConnectionPool.DestroyObject(DbConnectionInternal obj)     at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)     at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)     at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)     at System.Data.SqlClient.SqlConnection.Close()     at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing)     at System.ComponentModel.Component.Dispose()     at Microsoft.EntityFrameworkCore.TestUtilities.RelationalTestStore.Dispose() in /home/saurabh/EntityFrameworkCore/src/EFCore.Relational.Specification.Tests/TestUtilities/RelationalTestStore.cs:line 41     at Microsoft.EntityFrameworkCore.TestUtilities.SqlServerTestStore.Dispose() in /home/saurabh/EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests/TestUtilities/SqlServerTestStore.cs:line 414     at Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.<Delete_database_test>d__2.MoveNext() in /home/saurabh/EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests/SqlServerDatabaseCreatorTest.cs:line 154  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---  --- End of stack trace from previous location where exception was thrown ---    ```    Steps to repro     Clone the EFCore repo `https://github.com/aspnet/EntityFrameworkCore`    Build the repo from the root using build.sh    Execute the tests in /EntityFrameworkCore/test/EFCore.SqlServer.FunctionalTests  Steps:  1. Modify config.json to have a valid connection string (something like) ""Data Source=tcp:server,1437;Database=master;Integrated Security=False;Connect Timeout=60;ConnectRetryCount=0;uid=saurabh;pwd=*******;MultipleActiveResultSets=False""    2. Execute test   ```   ~/.dotnet/dotnet test --framework netcoreapp2.1 --filter=""FullyQualifiedName=Microsoft.EntityFrameworkCore.SqlServerDatabaseCreatorEnsureDeletedTest.Deletes_database""  ```    This test passes one out of every 5 times when run for framework netcoreapp2.1   Run the test against netcoreapp2.0 and it passes consistently.     Some in System.Net.Security changed?     Please contact me for the database password via email for quicker setup."
27004	area-System.Runtime	Wrong Type equality behavior when loading assembly from file	I take a Type, query its assembly location, and then load the assembly from the same address, and find the same type from the loaded assembly. The resulting type is not equal to the original type.    Here's the test case:        [TestMethod]      public void TestTypeLoadingWithFilePath()      {          var originalType = typeof(SomeClass);          var assemblyAddress = originalType.Assembly.Location;            var loadedAssembly = Assembly.LoadFile(assemblyAddress);          Assert.IsNotNull(loadedAssembly);            var loadedType = loadedAssembly.GetType(originalType.FullName);          Assert.IsNotNull(loadedType);            Assert.AreEqual(originalType, loadedType);      }    The test fails on the last assertion.    This only happens on .NET Core on Windows. (I'm testing against latest version, 2.1.4). But this was not the case with .NET Framework.    Is this by design, or a bug?  If it's by design, why?  Again, if it's by design, doesn't this mean different behavior between two implementations of .NET Standard? (.NET Core vs. .NET Framework)
27001	area-System.Memory	API proposal: ReferenceCountedDisposable<T>	## Summary    This proposal simplifies the use of disposable resources shared through code where single owner of the resource is either unclear, or complicates maintenance of the code. This situation is increasingly common when asynchronous code which needs to operate on a threading-agnostic API where the `Dispose` operation is explicitly called out as not safe for concurrent use.    The semantics of a safe, shared wrapper for `IDisposable` objects is challenging, especially when considerations are made for handling missing and/or multiple calls to `Dispose` and for weakly-held references. Providing a holder for managing lifetimes of these objects allows developers to focus on the semantics of the underlying shared object, which is always a challenge in itself.    ## Proposed API    ```csharp  namespace System.Memory  {    public sealed class ReferenceCountedDisposable<T> : IDisposable      where T : class, IDisposable    {      public ReferenceCountedDisposable(T instance);        public T Target { get; }        public ReferenceCountedDisposable<T> TryAddReference();      public void Dispose();        public struct WeakReference      {        public WeakReference(ReferenceCountedDisposable<T> reference);          public ReferenceCountedDisposable<T> TryAddReference();      }    }  }  ```    ## Semantics    A reference-counting wrapper which allows multiple uses of a single disposable object in code, which is deterministically released (by calling `IDisposable.Dispose`) when the last reference is disposed.    Each instance of `ReferenceCountedDisposable<T>` represents a counted reference (also referred to as a *reference* in the following documentation) to a target object. Each of these references has a lifetime, starting when it is constructed and continuing through its release. During this time, the reference is considered *alive*. Each reference which is alive owns exactly one reference to the target object, ensuring that it will not be disposed while still in use. A reference is released through either of the following actions:    * The reference is explicitly released by a call to `Dispose`.  * The reference is no longer in use by managed code and gets reclaimed by the garbage collector.    While each instance of `ReferenceCountedDisposable<T>` should be explicitly disposed when the object is no longer needed by the code owning the reference, this implementation will not leak resources in the event one or more callers fail to do so. When all references to an object are explicitly released (i.e. by calling `Dispose`), the target object will itself be deterministically released by a call to `IDisposable.Dispose` when the last reference to it is released. However, in the event one or more references is not explicitly released, the underlying object will still become eligible for non-deterministic release (i.e. finalization) as soon as each reference to it is released by one of the two actions described previously.    When using `ReferenceCountedDisposable<T>`, certain steps must be taken to ensure the target object is not disposed early.    1. Use `ReferenceCountedDisposable<T>` consistently. In other words, do not mix code using reference-counted wrappers with code that references to the target directly.  1. Only use the `ReferenceCountedDisposable<T>(T reference)` constructor one time per target object. Additional references to the same target object must only be obtained by calling `TryAddReference`.  1. Do not call `IDisposable.Dispose` on the target object directly. It will be called automatically at the appropriate time, as described above.    All public methods on this type adhere to their pre- and post-conditions and will not invalidate state even in concurrent execution.    ### `ReferenceCountedDisposable<T>.TryAddReference`    Increments the reference count for the disposable object, and returns a new disposable reference to it. The returned object is an independent reference to the same underlying object. Disposing of the returned value multiple times will only cause the reference count to be decreased once.    Return value: a new `ReferenceCountedDisposable<T>` pointing to the same underlying object, if it has not yet been disposed; otherwise, `null` if this reference to the underlying object has already been disposed.    ### `ReferenceCountedDisposable<T>.WeakReference`    Represents a weak reference to a `ReferenceCountedDisposable<T>` which is capable of obtaining a new counted reference up until the point when the object is no longer accessible.    ### Differences between `TryAddReference` operations    The semantics of `ReferenceCountedDisposable<T>.TryAddReference` and `ReferenceCountedDisposable<T>.WeakReference.TryAddReference` are slightly different:    * `ReferenceCountedDisposable<T>.TryAddReference`: This method returns `null` after *this reference* is disposed. In other words, it is possible for other references to the target object to still be held in code.  * `ReferenceCountedDisposable<T>.WeakReference.TryAddReference`: This method returns `null` after *the last reference* to the target object is disposed.
27000	area-System.Net	" The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (""LibreSSL/2.0.20"")"	"I'm having an issue when calling an endpoint with the following code, and I don't know what can solve that critical issue on mac:    ```  var handler = new HttpClientHandler();  handler.ClientCertificates.Add(cert);  var client = new HttpClient(handler);  var result = await client.GetAsync(url);  ```    The error is below:    ```  System.PlatformNotSupportedException: The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (""LibreSSL/2.0.20"").     at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(EasyRequest easy, ClientCertificateOption clientCertOption)     at System.Net.Http.CurlHandler.EasyRequest.InitializeCurl()     at System.Net.Http.CurlHandler.MultiAgent.ActivateNewRequest(EasyRequest easy)  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()     at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()  --- End of stack trace from previous location where exception was thrown ---     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()     at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)     at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()  ```    **curl --version**  ```  curl 7.54.0 (x86_64-apple-darwin17.0) libcurl/7.54.0 LibreSSL/2.0.20 zlib/1.2.11 nghttp2/1.24.0  Protocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp  Features: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz HTTP2 UnixSockets HTTPS-proxy  ```    **dotnet info**  ```  .NET Command Line Tools (2.1.4)    Product Information:   Version:            2.1.4   Commit SHA-1 hash:  5e8add2190    Runtime Environment:   OS Name:     Mac OS X   OS Version:  10.13   OS Platform: Darwin   RID:         osx.10.12-x64   Base Path:   /usr/local/share/dotnet/sdk/2.1.4/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.5    Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54  ```"
26999	area-System.Collections	Queue/Stack batch item Enqueue/Push	"`Queue` and `Stack` in the `System.Collections.Generic` namespace currently only implement methods to enqueue/push single objects to the collection. In order to add multible elements, the source collection has to be enumerated, that could potentialy lead to a performance loss based on the required iterations.      # Usage  Because of performance, large input collections would profit from such a change.  ````cs      private static async void UseCaseLogic()      {          var workQueue = new Queue<char>();          var siteList = new List<string>          {              ""https://google.com"",              ""https://github.com"",          };                using (var wc = new WebClient())          {              foreach (var cSite in siteList)              {                  var cSiteText = await wc.DownloadStringTaskAsync(cSite);                  workQueue.EnqueueRange(cSiteText.ToCharArray());              }          }                while (workQueue.Count != 0)          {              var cItem = workQueue.Dequeue();              //Process          }      }  ````    # Proposed API additions    Because of a simmilar method in `List<T>` (`AddRange`) naming the new APIs `EnqueueRange`/`PushRange` appears to be the most logical way.    ````cs  namespace System.Collections.Generic  {      public class Stack<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>      {          public void EnqueueRange(IEnumerable<T> item);          public void EnqueueRange(T[] item);      }  }  ````    ````cs  namespace System.Collections.Generic  {      public class Queue<T> : IEnumerable<T>, IEnumerable, ICollection, IReadOnlyCollection<T>      {          public void PushRange(IEnumerable<T> item);          public void PushRange(T[] item);      }  }  ````    # Open Questions  In which order should the source array/collection be Inserted? Would reordering the source void the performance gains?"
26997	area-System.Net	Trying to collect info about ping test failures in macOS 10.12	See #26358
26996	area-System.IO	System.MissingMethodException : Method not found: 'Void System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, Boolean)'	I'm having the following error when targetting netappcore2.0 and net471:    System.MissingMethodException : Method not found: 'Void System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, Boolean)'.    Is this a new bug? Is there any workaround available?    Thanks.
26995	area-System.Net	Add DecompressionMethods.Brotli?	"System.Net.DecompressionMethods is an enum that is used by HttpClient handlers to determine whether/what to automatically decode in a response, e.g. if DecompressionMethods.Deflate is set and the response is encoded with deflate, it'll automatically decode the response as part of handing it back.    The enum today is just:  ```C#  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          None = 0,          GZip = 1,          Deflate = 2      }  }  ```  but we now also have BrotliStream, which we could use to support a DecompressionMethods.Brotli and a ""br"" encoding:  ```C#  namespace System.Net  {      [Flags]      public enum DecompressionMethods      {          ...          Brotli = 4      }  }  ```  From an implementation perspective, this would mean either System.Net.Http.dll taking a dependency on System.IO.Compression.Brotli.dll, or if we wanted to avoid the dependency, building all of the source into System.Net.Http.dll (there is currently a native dependency, with the native portion compiled into clrcompression.dll on Windows and System.IO.Compression.Native.so/dylib on Unix)."
26994	area-System.Reflection	Add new overload to System.Reflection.Assembly to load from Stream	## Rationale    Currently we can load an assembly from byte array or by file name:  ```c#          public static Assembly Load(byte[] rawAssembly);          public static Assembly Load(byte[] rawAssembly, byte[] rawSymbolStore);          public static Assembly Load(AssemblyName assemblyRef);          public static Assembly Load(string assemblyString);          public static Assembly LoadFile(string path);          public static Assembly LoadFrom(string assemblyFile, byte[] hashValue, Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);          public static Assembly LoadFrom(string assemblyFile);  ```    If we compile dynamically in a memory stream we have to do extra allocations to load the assembly:  ```c#  using (var ms = new MemoryStream())  {      emitResult = compilation.Emit(peStream: ms, options: _emitOptions);      if (emitResult.Success)      {          ms.Flush();          ms.Seek(0, SeekOrigin.Begin);          Assembly assembly = Assembly.Load(ms.ToArray());      }  }  ```    ### Proposed API    ```c#      // Load the assembly from Stream.          public static Assembly Load(Stream assemblyStream);  ```    ### Update    There is `AssemblyLoadContext.Default.LoadFromStream()` in `System.Reflection.Loader` but its hard to find.
26993	area-Infrastructure	Clear initlocals in a bunch of assemblies	Sets  ```XML  <ILLinkClearInitLocals>true</ILLinkClearInitLocals>  ```  for the assemblies:  - System.IO.FileSystem  - System.IO.Pipes  - System.Memory  - System.Net.Http  - System.Net.Http.WinHttpHandler  - System.Net.NameResolution  - System.Net.NetworkInformation  - System.Net.Primitives  - System.Net.Requests  - System.Net.Security  - System.Net.Sockets  - System.Net.WebSockets  - System.Net.WebSockets.Client  - System.Net.WebSockets.WebSocketsProtocol  - System.Private.Uri  - System.Runtime  - System.Runtime.Extensions    Eventually we'd ideally set the flag (or eventually compiler switch) for the whole repo; these are just the ones I audited thus far.  In a few cases I had to make code changes to adapt, where the code was expecting stackallocs to be cleared.  I also looked at a few other projects (System.Collections, System.Runtime.Numerics) where there were more significant dependencies on clearing and I decided to leave those for later.    Contributes to https://github.com/dotnet/corefx/issues/26939  cc: @jkotas, @erozenfeld, @VSadov 
26991	area-System.Net	HttpClient not setting Accept-Encoding: gzip, deflate on older Windows versions	".NET Core 2.1.4 SDK    ```csharp  var handler = new HttpClientHandler()  {         AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate  };    using (var client = new HttpClient(handler))  {        response = client.GetStringAsync(""http://scooterlabs.com/echo"").Result;  }  ```    On a Windows 2008 R2 box, it looks like `Accept-Encoding` is **not** set even though the `HttpClientHandler` has compression set.    Windows 2008 R2  ```  [headers] => Array  (      [Connection] => Keep-Alive      [Host] => scooterlabs.com  )  ```    Windows 10  ```  [headers] => Array  (      [Connection] => Keep-Alive      [Accept-Encoding] => gzip, deflate      [Host] => scooterlabs.com  )    ```  This works as expected on a Windows 10 box and Windows 8.1 VM.    If you force the headers to be sent however, on Windows 2008 R2 it decompresses fine, so compression is supported.    If you use WebClient or HttpWebRequest directly with `AutomaticDecompression` set it works on all versions with the correct headers and ability to handle the compressed payload.    This works on all environments  ```csharp  var handler = new HttpClientHandler()  {         AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate  };    using (var client = new HttpClient(handler))  {        client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue(""gzip""));        client.DefaultRequestHeaders.AcceptEncoding.Add(new StringWithQualityHeaderValue(""deflate""));        response = client.GetStringAsync(""http://scooterlabs.com/echo"").Result;  }  ```      P/s: SO question is here https://stackoverflow.com/questions/48703143/httpclient-not-sending-accept-encoding-on-different-machine    "
26990	area-System.Security	Crypto provider wrappers in System.Security.Cryptography.Algorithms	PR #12964 added crypto wrappers.    I'm able to use them targeting netstandard 2.x but not for netstandard1.x.    I see that those providers are not included as part of `System.Security.Cryptography.Algorithms` package (v4.3.1). Would it be possible to include them as part of the nuget package?
26989	area-System.Net	SocketsHttpHandler: Fix some issues with cookie handling, and add cookie tests	Remove CookieHandler and integrate the cookie handling logic into HttpConnection, which fixes some issues with how cookies were handled.    Add a bunch of protocol tests for cookie handling.  Issues filed for failures in CurlHandler and WinHttpHandler.    Fixes #26984   Fixes #26985   
26988	area-System.IO	[Regression] Test failure: System.IO.Tests.* / DeleteRoot	Affected OS:  * All Linux & Mac OS    Affected tests:  * System.IO.Tests.DirectoryInfo_Delete / DeleteRoot  * System.IO.Tests.DirectoryInfo_Delete_bool / DeleteRoot  * System.IO.Tests.Directory_Delete_str / DeleteRoot  * System.IO.Tests.Directory_Delete_str_bool / DeleteRoot    Failure:  ```  Assert.Throws() Failure  Expected: typeof(System.IO.IOException)  Actual:   typeof(System.IO.DirectoryNotFoundException): Could not find a part of the path '/'.    at System.IO.FileSystem.RemoveDirectory(String fullPath, Boolean recursive)  ```    ## History of failures    Day | Build | Details  -- | -- | --  2/9 | 20180209.01 | 56x (14 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.IO.FileSystem.Tests)  2/9 | 20180209.03 | 48x (12 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.03/workItem/System.IO.FileSystem.Tests)  2/9 | 20180209.05 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.05/workItem/System.IO.FileSystem.Tests)  2/10 | 20180210.01 | 60x (15 OS's) - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.01/workItem/System.IO.FileSystem.Tests)  2/10 | 20180210.03 | 56x - [link](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180210.03/workItem/System.IO.FileSystem.Tests)
26986	area-System.Net	WinHttpHandler: cookies received on a 401 response are not added to the CookieContainer	If the server sends a 401 auth challenge with a Set-Cookie header, the cookie is not added to the CookieContainer.    SocketsHttpHandler and CurlHandler handle this correctly.
26985	area-System.Net	SocketsHttpHandler: incorrect cookie behavior with redirects	When processing a redirect, the redirected request will be sent with cookies for both the initial request and the redirected request.  Should be only the latter.
26984	area-System.Net	SocketsHttpHandler: container cookies are incorrectly handled if you add a Cookie header to the cookie collection	"If you add a Cookie header via    ```csharp      requestMessage.Headers.Add(""Cookie"", ""A=1"");  ```    This causes cookies from the cookie container to be appended using the "","" separator, which is incorrect for cookies -- they use "";"" as a separator instead.    WinHttpHandler appends the cookies properly."
26983	area-System.Net	CurlHandler: container cookies are not sent if you add a Cookie header to the header collection	"If you add a Cookie header via    ```csharp      requestMessage.Headers.Add(""Cookie"", ""A=1"");  ```    This causes cookies from the cookie container to not be sent.    WinHttpHandler appends the cookies from the cookie container to the specified Cookie: header."
26982	area-System.Net	Disable Http status line parsing test cases on CurlHandler	Closes: #26980
26981	area-Infrastructure	Add Ubuntu 18 to supported Linux list	
26980	area-System.Net	[New test] Test failure: System.Net.Http.Functional.Tests.HttpProtocolTests / GetAsync_InvalidStatusLine_ThrowsException	"[8 test cases](https://mc.dot.net/#/product/netcore/master/source/official~2Fcorefx~2Fmaster~2F/type/test~2Ffunctional~2Fcli~2F/build/20180209.01/workItem/System.Net.Http.Functional.Tests) fail on Fedora27 and Ubuntu17.10 (probably due to different libcurl version which changed the behavior) - introduced in #26798  * ""HTTP/1.1 ""  * ""HTTP/1.1 !11""  * ""HTTP/1.1 "" (looks same as the first one - unclear why)  * ""HTTP/1.1 a11""  * ""HTTP/1.1 abc""  * ""HTTP/1.1\\t""  * ""HTTP/1.1\\t\\t""  * ""HTTP/1.A 200 OK""    I would recommend to skip the test cases on CurlHandler in general."
26979	area-System.Net	Add test infra for auth testing.	fixes #26375    @dotnet/ncl 
26978	area-System.IO	Make Unix filename conversion lazy	Also hook error handling. I'm working on shifting to IntPtr instead of SafeHandle like the Windows impl.    cc: @danmosemsft, @pjanotti, @tarekgh 
26976	area-System.Reflection	Add support for PDB Checksum debug directory entry	Implements proposal https://github.com/dotnet/corefx/issues/26935    The CodeView debug directory entry in PE/COFF file associates the PE file with one or more PDBs. The CodeView entry and the PDB both store the same PDB ID (for Portable PDB it's 20B for Windows PDB it's 16B of data). Debuggers, symbol servers and other tools use the PDB ID to match the PE file with the PDB.     Although the PDB ID is good enough for finding the right PDB for the PE file it is not good enough for validating that the PDB has not been maliciously modified. _PDB Checksum_ is a new debug directory record that can be used for such validation.    _PDB Checksum_ comprises of crypto hash algorithm name and the hash of the PDB content. See   [Specification](https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PE-COFF.md#pdb-checksum-debug-directory-entry-type-19) for details.    This change introduces new APIs that allow tools to read and write PDB Checksum.   
26975	area-System.Net	CookieCollection should implement ICollection<Cookie>	It implements `ICollection`, but not `ICollection<Cookie>`.
26971	area-Infrastructure	Adding a new resource string to .resx file doesn't regenerate generated SR.cs 	"Repro:    1. Open `corefx\src\System.Reflection.Metadata\System.Reflection.Metadata.sln` in VS.  2. Open `corefx\src\System.Reflection.Metadata\src\Resources\Strings.resx`  3. Add a new resource string and save the .resx file, e.g.    ```xml    <data name=""Foo"" xml:space=""preserve"">      <value>Foo</value>    </data>  ```    4. Open any .cs file and type `SR.Foo`. `Foo` is not in completion.  5. Build. Build fails due to missing `SR.Foo` property.    **Expected behavior**    `SR.Foo` is generated as soon as the .resx file is saved."
26970	area-System.Runtime	Fixing a regression introduced by the previous test fix.	My previous fix introduced a regression which was not caught in normal desktop test runs.
26967	area-System.Net	"HttpClient PostAsync throws exception ""The server returned an invalid or unrecognized response"" when using linux container"	"When I ran following code in Windows or Visual Studio, it worked fine.     ```c#  var httpClientHander = new HttpClientHandler() { AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip };    using (var client = new HttpClient(httpClientHander))  {      client.DefaultRequestHeaders.Add(""Authorization"", $""Basic {_authorizationHeaderValue}"");      var soapMessage = CreateSoapRequestForGetDocument();      using (var response = await client.PostAsync(_options.Value.BaseUri, new StringContent(soapMessage, Encoding.UTF8, ""text/xml"")))      {          documentResponse = await response.Content.ReadAsStringAsync();      }  }  ```    However, when I ran it with docker using Linux container, I got this error:    ```  System.Net.Http.HttpRequestException: The server returned an invalid or unrecognized response.  at System.Net.Http.CurlResponseHeaderReader.ReadHeader(String& headerName, String& headerValue)  at System.Net.Http.CurlHandler.MultiAgent.CurlReceiveHeadersCallback(IntPtr buffer, UInt64 size, UInt64 nitems, IntPtr context)  --- End of stack trace from previous location where exception was thrown ---  at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)  ```    I inspected the response via Fiddler and the raw response is like this:    ```  > HTTP/1.1 200 OK  Date: Wed, 07 Feb 2018 21:02:57 GMT  Server: Web Server  Vary: Accept-Encoding  X-Robots-Tag: noindex  Keep-Alive: timeout=5, max=100  Connection: Keep-Alive  Content-Type: multipart/related; type=""application/xop+xml""; start=""<soap.xml@xfire.codehaus.org>""; start-info=""text/xml"";  boundary=""----=_Part_166_1126302715.1518037377448""  Content-Length: 2488  ------=_Part_166_1126302715.1518037377448  Content-Type: application/xop+xml; charset=UTF-8; type=""text/xml""  Content-Transfer-Encoding: 8bit  Content-ID: <soap.xml@xfire.codehaus.org>  <soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><soap:Body><ns1:getDocumentResponse xmlns:ns1=""http://www.test.com/ws/integration""><ns1:Document xmlns:ns2=""http://www.w3.org/2004/11/xmlmime"" ns2:contentType=""text/xml; charset=UTF-8""><Include xmlns=""http://www.w3.org/2004/08/xop/include"" href=""cid:1518037377448449414076338@http://www.w3.org/2001/XMLSchema""/></ns1:Document></ns1:getDocumentResponse></soap:Body></soap:Envelope>  ------=_Part_166_1126302715.1518037377448  Content-Type: text/xml; charset=UTF-8  Content-Transfer-Encoding: binary  Content-ID: <1518037377448449414076338@http://www.w3.org/2001/XMLSchema>  <Document xmlns=""http://www.test.com/ws/integration"">  </Document>  ------=_Part_166_1126302715.1518037377448--  ```    I have tried to use HttpWebRequest, WebClient or RestSharp and I got the same error message from all of them.     ## Steps to reproduce  Call post async method with HttpClient in docker Linux container    ## Expected behavior  Get the SOAP response (Works fine on Windows).    ## Actual behavior  An exception was thrown    ## Environment data  Product Information: Windows 10  Version: .NET Core 2.0 / .NET Standard 2.0  Docker: Community Edition Version 17.12.0-ce-win47 (15139)    [EDIT] Format code sample and logs/stacks, add syntax highlighting by @karelz"
26966	area-System.Console	System.Console fails with ncurses 6.1	Released on Jan 27, 2018 - Announcement https://www.gnu.org/software/ncurses/    Original report: https://bugs.archlinux.org/task/57260    ```  MSBUILD : error MSB1025: An internal failure occurred while running MSBuild.  System.InvalidOperationException: The terminfo database is invalid.  at System.TermInfo.Database..ctor(String term, Byte[] data)  at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)  at System.TermInfo.Database.ReadDatabase(String term)  at System.TermInfo.Database.ReadActiveDatabase()  at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()  at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)  at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)  at System.Lazy`1.CreateValue()  at System.ConsolePal.EnsureInitializedCore()  at System.ConsolePal.ControlCHandlerRegistrar.Register()  at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)  at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 526    Unhandled Exception: System.InvalidOperationException: The terminfo database is invalid.  at System.TermInfo.Database..ctor(String term, Byte[] data)  at System.TermInfo.Database.ReadDatabase(String term, String directoryPath)  at System.TermInfo.Database.ReadDatabase(String term)  at System.TermInfo.Database.ReadActiveDatabase()  at System.ConsolePal.TerminalFormatStrings.<>c.<.cctor>b__27_0()  at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)  at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)  at System.Lazy`1.CreateValue()  at System.ConsolePal.EnsureInitializedCore()  at System.ConsolePal.ControlCHandlerRegistrar.Register()  at System.Console.add_CancelKeyPress(ConsoleCancelEventHandler value)  at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 748  at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args) in E:\A\_work\17\s\src\MSBuild\XMake.cs:line 215  ```
26965	area-System.Data	Crash in SqlConnection.Close() when using TransactionScope on linux.	"I'm using SqlClient 4.5.0-preview1-26207-04 in netcoreapp2.0.    ```  .NET Command Line Tools (2.0.0)    Product Information:   Version:            2.0.0   Commit SHA-1 hash:  cdcd1928c9    Runtime Environment:   OS Name:     centos   OS Version:  7   OS Platform: Linux   RID:         centos.7-x64   Base Path:   /usr/share/dotnet/sdk/2.0.0/    Microsoft .NET Core Shared Framework Host      Version  : 2.0.0    Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d  ```    The following snippet would crash on the above machine (removed some code for brevity). Works without issues on Windows.    ```c#  using (var txscope = new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))                  using (var cn = _dBProvider.GetWriteConnection())                  {                      await cn.OpenAsync();                        if (cmd.RecordCertificationStatus)                      {                          await cn.ExecuteAsync(@""INSERT INTO (...) (@iduser, @idtitle, @value, getdate()); "",                               new { @iduser = cmd.SubId, @idtitle=cmd.EntityId, @value = cmd.Model.IsCertified });                      }                      await cn.ExecuteAsync(sql, data);                      txscope.Complete();                  }  ```      Both statements are inserts. Stacktrace is below:    ```   ""System.NullReferenceException: Object reference not set to an instance of an object.                  at System.Data.ProviderBase.DbConnectionPool.DeactivateObject(DbConnectionInternal obj)                  at System.Data.ProviderBase.DbConnectionPool.PutObject(DbConnectionInternal obj, Object owningObject)                  at System.Data.ProviderBase.DbConnectionInternal.CloseConnection(DbConnection owningObject, DbConnectionFactory connectionFactory)                  at System.Data.SqlClient.SqlConnection.Close()                  at System.Data.SqlClient.SqlConnection.Dispose(Boolean disposing)                  at System.ComponentModel.Component.Dispose()                  at ...TitleUpdate.Handler.<HandleCore>d__2.MoveNext() in ...TitleUpdate.cs:line 189                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at MediatR.Internal.RequestHandlerWrapperImpl`1.<>c__DisplayClass0_0.<<Handle>g__Handler0>d.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()                  at ...ValidationBehavior`2.<Handle>d__2.MoveNext() in ...ValidationBehavior.cs:line 34                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at ....TitlesController.<Update>d__5.MoveNext() in TitleController.cs:line 98                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeActionMethodAsync>d__12.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeNextActionFilterAsync>d__10.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Rethrow(ActionExecutedContext context)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)                  at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.<InvokeInnerFilterAsync>d__14.MoveNext()                  --- End of stack trace from previous location where exception was thrown ---                  at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()                  at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)                  at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.<InvokeNextExceptionFilterAsync>d__23.MoveNext()""  ```"
26964	area-System.Net	Expose SocketsHttpHandler	- Renames ManagedHandler to SocketsHttpHandler  - Moves a bunch of files around accordingly  - Updates System.Net.WebSockets.Client to use SocketsHttpHandler directly  - Updates System.Net.Http's tests with a reflection-based rather than TLS-based method for instantiating an HttpClientHandler backed by a SocketsHttpHandler.  - Adds some more tests    cc: @geoffkizer, @davidsh, @Priya91, @wfurt, @karelz   Closes https://github.com/dotnet/corefx/issues/23166  Closes https://github.com/dotnet/corefx/issues/26895  Closes https://github.com/dotnet/corefx/issues/26960
26963	area-Infrastructure	Add TestUtilities NuGet package	To be consumed by CoreRT in connection with the work done in https://github.com/dotnet/corert/pull/5329.     cc @joperezr         
26962	area-System.Net	DO NOT MERGE: test HttpClient cookie handling	
26961	area-System.Security	Support for RFC 3161 cryptographic timestamps with RFC 5816 additions	"This change adds API to inspect, request, and create timestamp tokens in accordance with IETF RFC 3161 (Internet X.509 Public Key Infrastructure Time-Stamp Protocol (TSP)).  The validation layer includes support for IETF RFC 5816 (ESSCertIDv2 Update for RFC 3161).    Unlike the Win32 CryptRetrieveTimeStamp, this API does not provide ""Time-Stamp Protocol via HTTP"" functionality.  Instead it provides enough of the processing logic to enable a client to do the HTTP(S) request using whatever preferred technology they desire, or to implement any of the other protocols (email, file, sockets, or a custom solution) as their application sees fit.    Rfc3161TimestampRequest.CreateForSignerInfo and Rfc3161TimestampToken.VerifyForSignerInfo provide an accelerated path for IETF RFC 3161 Appendix A (Signature Time-stamp attribute using CMS).    References:  * https://tools.ietf.org/html/rfc3161  * https://tools.ietf.org/html/rfc5816    Fixes #24524."
26960	area-System.Net	WebSocketProtocolTests causing failures in NETFX Outerloop	"NETFX Outerloop test runs have been failing for a few weeks now with the following error:  ```  16:24:49 Build FAILED.  16:24:49   16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(492,5): warning :    System.Net.WebSockets.WebSocketProtocol.Tests  Total: 7, Errors: 0, Failed: 2, Skipped: 0, Time: 1.331s [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(492,5): warning MSB3073: The command ""D:\j\workspace\windows-TGrou---bb3e71cd\bin/tests/System.Net.WebSockets.WebSocketProtocol.Tests/netfx-Windows_NT-Release-x86//RunTests.cmd D:\j\workspace\windows-TGrou---bb3e71cd\bin/testhost/netfx-Windows_NT-Release-x86/"" exited with code 1. [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\Tools\tests.targets(500,5): error : One or more tests failed while running tests from 'System.Net.WebSockets.WebSocketProtocol.Tests' please check D:\j\workspace\windows-TGrou---bb3e71cd\bin/tests/System.Net.WebSockets.WebSocketProtocol.Tests/netfx-Windows_NT-Release-x86/testResults.xml for details! [D:\j\workspace\windows-TGrou---bb3e71cd\src\System.Net.WebSockets.WebSocketProtocol\tests\System.Net.WebSockets.WebSocketProtocol.Tests.csproj]  16:24:49 D:\j\workspace\windows-TGrou---bb3e71cd\dir.traversal.targets(77,5): error : (No message specified) [D:\j\workspace\windows-TGrou---bb3e71cd\src\tests.builds]  ```  There have been ~200 runs that have failed at the same point. As far as I can tell the issue first occurred on January 18th. Based on that date and an offline discussion with the team I think the issue was probably introduced by PR #26429.     You can find a few instances of failed runs here: [1](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/38/console), [2](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/34/console), [3](https://ci3.dot.net/job/dotnet_corefx/job/master/job/windows-TGroup_netfx+CGroup_Release+AGroup_x86+TestOuter_true_prtest/37/console)    cc: @Priya91 "
26959	area-System.Runtime	Re-evaluate default buffer size for getpw native calls	By default, we are allocating 1K of memory on the stack as the first buffer to use in getpwnam_r and getpwuid_r.    https://github.com/dotnet/corefx/blob/bfac45af5dddcbd70b6935fcf92b4b8755f3cd1c/src/Common/src/System/IO/PersistedFiles.Unix.cs#L100    https://github.com/dotnet/corefx/blob/6f5ce856e9f40a7d247c241a6bb916fc546045ff/src/System.Runtime.Extensions/src/System/Environment.Unix.cs#L371    https://github.com/dotnet/corefx/blob/426e1c72a0dbda1aece127ec5f56696dc465d74b/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs#L632    We should re-evaluate if this is too large of a buffer to start with on the stack, as it may be too large for what is necessary.    See https://github.com/dotnet/corefx/pull/26945/files/55c360ff0e62b30814a085f079304a126dab9d21#diff-015aad2514de8320cbfe19ed2b8ee9a7
26957	area-System.Net	Validate ClientWebSocket wss connections work through http proxies	After https://github.com/dotnet/corefx/pull/26878 is merged, validate (and ideally add automated tests) that ClientWebSocket's proxy support works when using wss connections.  And if it doesn't, fix it.
26956	area-System.Numerics	Add Quaternion.Divide(Quaternion, float)	I noticed that Quaternion.Divide Method has no overload to dived a quaternion by a scalar value, unlike the Multiply method! so I suggest to add it!  I used this:  ```  Dim Q1 = New Quaternion(1, -1, 2, -4)  Dim Q2 = New Quaternion(-1, 1, -2, -4) * (1 / Q1.LengthSquared())  ```    Edit:  After looking at the Inverse Methode source code, it appears it is the Reciprocal Method but with a confusing name! Inverse in math can mean addative Inverse  or multiplicative inverse. SIMD-enabled types are not consistant with naming conventions of .net. One odd examole is implementing the Length of these types as a method not a property! I expected to find a Quaternion.Reciprocal as there is a Complex.Reciprocal, but found an Inverse method instead. Having a consistant naming convention makes new features easy to learn and thier methods names easy to remember.  Also I think many of static members need to be instance members.
26954	area-System.Runtime	Proposal: TryForSufficientStack method to support stackalloc usage	"_From @kkokosa on February 8, 2018 12:8_  Due to changes in C# 7.2 and Span, more and more `stackalloc `usages may become popular like:    `Span<byte> span = stackalloc byte[1000];`    However, this call will end up with unrecoverable `StackOverflowException `if there is not enough stack space left. We can do nothing in such situation which makes this approach not useful at some point. It is now just completely unreliable to guess what `stackalloc `size may end up with such a catastrophe.    @jkotas pointed out in #14675 that `RuntimeHelpers.EnsureSufficientExecutionStack` is a reliable solution for handling stack overflow in general but as MSDN says, this method ""_ensures that the remaining stack space is large enough to execute the average .NET Framework function_"". However, probing for _average_ .NET framework function is not very helpful as `stackalloc` makes it not average for sure.     I propose to add a new helper method which gives at least some clue whether our `stackalloc `may end up with `StackOverflowException`:    `public static bool RuntimeHelpers.TryForSufficientStack(long size)`    I believe returning `bool` instead of throwing an exception (like `InsufficientExecutionStackException` from above method) is better because `stackalloc` is most probably used in hot paths already and adding exception handling there is rather undesirable.    As far as I understand this method seems to be quite simple in terms of implementation as all necessary data are there already. My naive implementation proposal:    ```  FCIMPL1(FC_BOOL_RET, ReflectionInvocation::TryForSufficientStack, INT64 size)  {      FCALL_CONTRACT;        Thread *pThread = GetThread();        UINT_PTR current = reinterpret_cast<UINT_PTR>(&pThread);      UINT_PTR limit = reinterpret_cast<UINT_PTR>(pThread->GetCachedStackLimit());        FC_RETURN_BOOL(current >= (limit + size));  }  FCIMPLEND  ```    PS. I am not sure whether stack guard size should be taken into consideration here or not...   _Copied from original issue: dotnet/coreclr#16277_"
26952	area-System.IO	System.IO.IOException: 'Entries cannot be opened multiple times in Update mode.'	"I am moving an application from .net to core.  When I run core version I got System.IO.IOException: 'Entries cannot be opened multiple times in Update mode.'    I use System.IO.Packaging library to create packages.      ```csharp   Package package = Package.Open(packageFile, System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite);    AddFile(package, folder, filePath1, mimeType1, id1, reletionType);    AddProperties(package);    AddCoreAndHash(package);      package.Close();  ```    Here is the AddProperties function:    ```csharp  private static void AddProperties(Package package)  {              package.PackageProperties.Subject = ""Subject"";              package.PackageProperties.Creator = ""Creator"";  }  ```  After this I call the AddCoreAndHash function:  ```csharp  private static void AddCoreAndHash(Package package)  {              package.Flush(); // serialize core properties                var coreRelations = package.GetRelationshipsByType(""http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties"");              if (coreRelations == null || coreRelations.Count() == 0)              {                  throw new ApplicationException(""Missing core relations."");              }              var corePart = package.GetPart(coreRelations.First().TargetUri);              var stream = corePart.GetStream();              stream.Position = 0;              using (var memoryStream = new MemoryStream())              {                  Tools.CopyStream(stream, memoryStream);                  memoryStream.Position = 0;                  byte[] hash = Tools.CalculateHash(memoryStream);                  //... will add hash to package later              }  }  ```  I get error while accessing the stream of corePart.   I have attached sample files to reproduce the issue    [Files.zip](https://github.com/dotnet/corefx/files/1705985/Files.zip)    "
